type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program '() (Int 42))


testing @ utilities.rkt:2016
test-name:
"var_test_1"

expected-result:
42


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Int 42))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Int 42))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_1"

expected-result:
42


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Int 42))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Int 42))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_1"

expected-result:
42


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Int 42))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Int 42))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_1"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Int 42))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Int 42))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_1"

expected-result:
42


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram '() (list (cons 'start (Return (Int 42)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram '((locals-types)) (list (cons 'start (Return (Int 42)))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_1"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types))
 (list
  (cons
   'start
   (Block
    '()
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types))
 (list
  (cons
   'start
   (Block
    '()
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_1"

expected-result:
42


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_1"

expected-result:
42


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_1"

expected-result:
42


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'start
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'start
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_1"

expected-result:
42


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'start
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'start
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_1"

expected-result:
42


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_1"

expected-result:
42


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Let
  'x
  (Int 11)
  (Let
   'y
   (Int 20)
   (Let
    'z
    (Int 30)
    (Prim
     '+
     (list (Var 'x) (Prim '+ (list (Var 'y) (Prim '- (list (Var 'z)))))))))))


testing @ utilities.rkt:2016
test-name:
"var_test_10"

expected-result:
1


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x
  (Int 11)
  (Let
   'y
   (Int 20)
   (Let
    'z
    (Int 30)
    (Prim
     '+
     (list (Var 'x) (Prim '+ (list (Var 'y) (Prim '- (list (Var 'z)))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x
  (Int 11)
  (Let
   'y
   (Int 20)
   (Let
    'z
    (Int 30)
    (Prim
     '+
     (list (Var 'x) (Prim '+ (list (Var 'y) (Prim '- (list (Var 'z)))))))))))


output:  @ utilities.rkt:2042
result:
1


testing @ utilities.rkt:2016
test-name:
"var_test_10"

expected-result:
1


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x25753
  (Int 11)
  (Let
   'y25754
   (Int 20)
   (Let
    'z25755
    (Int 30)
    (Prim
     '+
     (list
      (Var 'x25753)
      (Prim '+ (list (Var 'y25754) (Prim '- (list (Var 'z25755)))))))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x25753
  (Int 11)
  (Let
   'y25754
   (Int 20)
   (Let
    'z25755
    (Int 30)
    (Prim
     '+
     (list
      (Var 'x25753)
      (Prim '+ (list (Var 'y25754) (Prim '- (list (Var 'z25755)))))))))))


output:  @ utilities.rkt:2042
result:
1


testing @ utilities.rkt:2016
test-name:
"var_test_10"

expected-result:
1


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x25753
  (Int 11)
  (Let
   'y25754
   (Int 20)
   (Let
    'z25755
    (Int 30)
    (Prim
     '+
     (list
      (Var 'x25753)
      (Prim '+ (list (Var 'y25754) (Prim '- (list (Var 'z25755)))))))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x25753
  (Int 11)
  (Let
   'y25754
   (Int 20)
   (Let
    'z25755
    (Int 30)
    (Prim
     '+
     (list
      (Var 'x25753)
      (Prim '+ (list (Var 'y25754) (Prim '- (list (Var 'z25755)))))))))))


output:  @ utilities.rkt:2042
result:
1


testing @ utilities.rkt:2016
test-name:
"var_test_10"

expected-result:
1


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x25753
  (Int 11)
  (Let
   'y25754
   (Int 20)
   (Let
    'z25755
    (Int 30)
    (Let
     'g25757
     (Prim '- (list (Var 'z25755)))
     (Let
      'g25756
      (Prim '+ (list (Var 'y25754) (Var 'g25757)))
      (Prim '+ (list (Var 'x25753) (Var 'g25756)))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x25753
  (Int 11)
  (Let
   'y25754
   (Int 20)
   (Let
    'z25755
    (Int 30)
    (Let
     'g25757
     (Prim '- (list (Var 'z25755)))
     (Let
      'g25756
      (Prim '+ (list (Var 'y25754) (Var 'g25757)))
      (Prim '+ (list (Var 'x25753) (Var 'g25756)))))))))


output:  @ utilities.rkt:2042
result:
1


testing @ utilities.rkt:2016
test-name:
"var_test_10"

expected-result:
1


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'x25753) (Int 11))
    (Seq
     (Assign (Var 'y25754) (Int 20))
     (Seq
      (Assign (Var 'z25755) (Int 30))
      (Seq
       (Assign (Var 'g25757) (Prim '- (list (Var 'z25755))))
       (Seq
        (Assign (Var 'g25756) (Prim '+ (list (Var 'y25754) (Var 'g25757))))
        (Return (Prim '+ (list (Var 'x25753) (Var 'g25756))))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types
    (g25756 . Integer)
    (z25755 . Integer)
    (y25754 . Integer)
    (x25753 . Integer)
    (g25757 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'x25753) (Int 11))
    (Seq
     (Assign (Var 'y25754) (Int 20))
     (Seq
      (Assign (Var 'z25755) (Int 30))
      (Seq
       (Assign (Var 'g25757) (Prim '- (list (Var 'z25755))))
       (Seq
        (Assign (Var 'g25756) (Prim '+ (list (Var 'y25754) (Var 'g25757))))
        (Return (Prim '+ (list (Var 'x25753) (Var 'g25756))))))))))))


output:  @ utilities.rkt:2042
result:
1


testing @ utilities.rkt:2016
test-name:
"var_test_10"

expected-result:
1


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (g25756 . Integer)
    (z25755 . Integer)
    (y25754 . Integer)
    (x25753 . Integer)
    (g25757 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 11) (Var 'x25753)))
     (Instr 'movq (list (Imm 20) (Var 'y25754)))
     (Instr 'movq (list (Imm 30) (Var 'z25755)))
     (Instr 'movq (list (Var 'z25755) (Var 'g25757)))
     (Instr 'negq (list (Var 'g25757)))
     (Instr 'movq (list (Var 'y25754) (Var 'g25756)))
     (Instr 'addq (list (Var 'g25757) (Var 'g25756)))
     (Instr 'movq (list (Var 'x25753) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25756) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (g25756 . Integer)
    (z25755 . Integer)
    (y25754 . Integer)
    (x25753 . Integer)
    (g25757 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 11) (Var 'x25753)))
     (Instr 'movq (list (Imm 20) (Var 'y25754)))
     (Instr 'movq (list (Imm 30) (Var 'z25755)))
     (Instr 'movq (list (Var 'z25755) (Var 'g25757)))
     (Instr 'negq (list (Var 'g25757)))
     (Instr 'movq (list (Var 'y25754) (Var 'g25756)))
     (Instr 'addq (list (Var 'g25757) (Var 'g25756)))
     (Instr 'movq (list (Var 'x25753) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25756) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
1


testing @ utilities.rkt:2016
test-name:
"var_test_10"

expected-result:
1


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25756 . Integer)
    (z25755 . Integer)
    (y25754 . Integer)
    (x25753 . Integer)
    (g25757 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25753) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'z25755) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'g25756) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'g25756) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25756) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 11) (Var 'x25753)))
     (Instr 'movq (list (Imm 20) (Var 'y25754)))
     (Instr 'movq (list (Imm 30) (Var 'z25755)))
     (Instr 'movq (list (Var 'z25755) (Var 'g25757)))
     (Instr 'negq (list (Var 'g25757)))
     (Instr 'movq (list (Var 'y25754) (Var 'g25756)))
     (Instr 'addq (list (Var 'g25757) (Var 'g25756)))
     (Instr 'movq (list (Var 'x25753) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25756) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25756 . Integer)
    (z25755 . Integer)
    (y25754 . Integer)
    (x25753 . Integer)
    (g25757 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25753) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'z25755) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'g25756) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'g25756) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25756) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 11) (Var 'x25753)))
     (Instr 'movq (list (Imm 20) (Var 'y25754)))
     (Instr 'movq (list (Imm 30) (Var 'z25755)))
     (Instr 'movq (list (Var 'z25755) (Var 'g25757)))
     (Instr 'negq (list (Var 'g25757)))
     (Instr 'movq (list (Var 'y25754) (Var 'g25756)))
     (Instr 'addq (list (Var 'g25757) (Var 'g25756)))
     (Instr 'movq (list (Var 'x25753) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25756) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
1


testing @ utilities.rkt:2016
test-name:
"var_test_10"

expected-result:
1


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25756 . Integer)
    (z25755 . Integer)
    (y25754 . Integer)
    (x25753 . Integer)
    (g25757 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25753) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'z25755) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'g25756) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'g25756) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25756) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 11) (Var 'x25753)))
     (Instr 'movq (list (Imm 20) (Var 'y25754)))
     (Instr 'movq (list (Imm 30) (Var 'z25755)))
     (Instr 'movq (list (Var 'z25755) (Var 'g25757)))
     (Instr 'negq (list (Var 'g25757)))
     (Instr 'movq (list (Var 'y25754) (Var 'g25756)))
     (Instr 'addq (list (Var 'g25757) (Var 'g25756)))
     (Instr 'movq (list (Var 'x25753) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25756) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25756 . Integer)
    (z25755 . Integer)
    (y25754 . Integer)
    (x25753 . Integer)
    (g25757 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25753) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'z25755) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'g25756) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'g25756) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25756) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 11) (Var 'x25753)))
     (Instr 'movq (list (Imm 20) (Var 'y25754)))
     (Instr 'movq (list (Imm 30) (Var 'z25755)))
     (Instr 'movq (list (Var 'z25755) (Var 'g25757)))
     (Instr 'negq (list (Var 'g25757)))
     (Instr 'movq (list (Var 'y25754) (Var 'g25756)))
     (Instr 'addq (list (Var 'g25757) (Var 'g25756)))
     (Instr 'movq (list (Var 'x25753) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25756) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
1


testing @ utilities.rkt:2016
test-name:
"var_test_10"

expected-result:
1


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25756 . Integer)
    (z25755 . Integer)
    (y25754 . Integer)
    (x25753 . Integer)
    (g25757 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25753) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'z25755) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'g25756) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'g25756) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25756) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 11) (Reg 'rcx)))
     (Instr 'movq (list (Imm 20) (Reg 'rbx)))
     (Instr 'movq (list (Imm 30) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rdx)))
     (Instr 'negq (list (Reg 'rdx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25756 . Integer)
    (z25755 . Integer)
    (y25754 . Integer)
    (x25753 . Integer)
    (g25757 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25753) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'z25755) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'g25756) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'g25756) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25756) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 11) (Reg 'rcx)))
     (Instr 'movq (list (Imm 20) (Reg 'rbx)))
     (Instr 'movq (list (Imm 30) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rdx)))
     (Instr 'negq (list (Reg 'rdx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
1


testing @ utilities.rkt:2016
test-name:
"var_test_10"

expected-result:
1


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25756 . Integer)
    (z25755 . Integer)
    (y25754 . Integer)
    (x25753 . Integer)
    (g25757 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25753) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'z25755) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'g25756) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'g25756) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25756) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 11) (Reg 'rcx)))
     (Instr 'movq (list (Imm 20) (Reg 'rbx)))
     (Instr 'movq (list (Imm 30) (Reg 'rdx)))
     (Instr 'negq (list (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25756 . Integer)
    (z25755 . Integer)
    (y25754 . Integer)
    (x25753 . Integer)
    (g25757 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25753) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'z25755) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'g25756) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'g25756) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25756) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 11) (Reg 'rcx)))
     (Instr 'movq (list (Imm 20) (Reg 'rbx)))
     (Instr 'movq (list (Imm 30) (Reg 'rdx)))
     (Instr 'negq (list (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
1


testing @ utilities.rkt:2016
test-name:
"var_test_10"

expected-result:
1


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25756 . Integer)
    (z25755 . Integer)
    (y25754 . Integer)
    (x25753 . Integer)
    (g25757 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25753) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'z25755) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'g25756) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'g25756) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25756) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 11) (Reg 'rcx)))
     (Instr 'movq (list (Imm 20) (Reg 'rbx)))
     (Instr 'movq (list (Imm 30) (Reg 'rdx)))
     (Instr 'negq (list (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25756 . Integer)
    (z25755 . Integer)
    (y25754 . Integer)
    (x25753 . Integer)
    (g25757 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25753) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'z25755) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'y25754) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'g25756) (Var 'g25757) (Reg 'rsp))
      (set (Var 'x25753) (Var 'g25756) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25756) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 11) (Reg 'rcx)))
     (Instr 'movq (list (Imm 20) (Reg 'rbx)))
     (Instr 'movq (list (Imm 30) (Reg 'rdx)))
     (Instr 'negq (list (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
1


testing @ utilities.rkt:2016
test-name:
"var_test_10"

expected-result:
1


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Prim
  '+
  (list
   (Prim '+ (list (Int 1) (Prim '- (list (Int 3)))))
   (Prim
    '+
    (list
     (Int 10)
     (Prim
      '+
      (list (Int 20) (Prim '+ (list (Int 40) (Prim '- (list (Int 5))))))))))))


testing @ utilities.rkt:2016
test-name:
"var_test_11"

expected-result:
63


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list
   (Prim '+ (list (Int 1) (Prim '- (list (Int 3)))))
   (Prim
    '+
    (list
     (Int 10)
     (Prim
      '+
      (list (Int 20) (Prim '+ (list (Int 40) (Prim '- (list (Int 5))))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list
   (Prim '+ (list (Int 1) (Prim '- (list (Int 3)))))
   (Prim
    '+
    (list
     (Int 10)
     (Prim
      '+
      (list (Int 20) (Prim '+ (list (Int 40) (Prim '- (list (Int 5))))))))))))


output:  @ utilities.rkt:2042
result:
63


testing @ utilities.rkt:2016
test-name:
"var_test_11"

expected-result:
63


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list
   (Prim '+ (list (Int 1) (Prim '- (list (Int 3)))))
   (Prim
    '+
    (list
     (Int 10)
     (Prim
      '+
      (list (Int 20) (Prim '+ (list (Int 40) (Prim '- (list (Int 5))))))))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list
   (Prim '+ (list (Int 1) (Prim '- (list (Int 3)))))
   (Prim
    '+
    (list
     (Int 10)
     (Prim
      '+
      (list (Int 20) (Prim '+ (list (Int 40) (Prim '- (list (Int 5))))))))))))


output:  @ utilities.rkt:2042
result:
63


testing @ utilities.rkt:2016
test-name:
"var_test_11"

expected-result:
63


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list
   (Prim '+ (list (Int 1) (Prim '- (list (Int 3)))))
   (Prim
    '+
    (list
     (Int 10)
     (Prim
      '+
      (list (Int 20) (Prim '+ (list (Int 40) (Prim '- (list (Int 5))))))))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list
   (Prim '+ (list (Int 1) (Prim '- (list (Int 3)))))
   (Prim
    '+
    (list
     (Int 10)
     (Prim
      '+
      (list (Int 20) (Prim '+ (list (Int 40) (Prim '- (list (Int 5))))))))))))


output:  @ utilities.rkt:2042
result:
63


testing @ utilities.rkt:2016
test-name:
"var_test_11"

expected-result:
63


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'g25765
  (Prim '- (list (Int 3)))
  (Let
   'g25764
   (Prim '+ (list (Int 1) (Var 'g25765)))
   (Let
    'g25769
    (Prim '- (list (Int 5)))
    (Let
     'g25768
     (Prim '+ (list (Int 40) (Var 'g25769)))
     (Let
      'g25767
      (Prim '+ (list (Int 20) (Var 'g25768)))
      (Let
       'g25766
       (Prim '+ (list (Int 10) (Var 'g25767)))
       (Prim '+ (list (Var 'g25764) (Var 'g25766))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'g25765
  (Prim '- (list (Int 3)))
  (Let
   'g25764
   (Prim '+ (list (Int 1) (Var 'g25765)))
   (Let
    'g25769
    (Prim '- (list (Int 5)))
    (Let
     'g25768
     (Prim '+ (list (Int 40) (Var 'g25769)))
     (Let
      'g25767
      (Prim '+ (list (Int 20) (Var 'g25768)))
      (Let
       'g25766
       (Prim '+ (list (Int 10) (Var 'g25767)))
       (Prim '+ (list (Var 'g25764) (Var 'g25766))))))))))


output:  @ utilities.rkt:2042
result:
63


testing @ utilities.rkt:2016
test-name:
"var_test_11"

expected-result:
63


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'g25765) (Prim '- (list (Int 3))))
    (Seq
     (Assign (Var 'g25764) (Prim '+ (list (Int 1) (Var 'g25765))))
     (Seq
      (Assign (Var 'g25769) (Prim '- (list (Int 5))))
      (Seq
       (Assign (Var 'g25768) (Prim '+ (list (Int 40) (Var 'g25769))))
       (Seq
        (Assign (Var 'g25767) (Prim '+ (list (Int 20) (Var 'g25768))))
        (Seq
         (Assign (Var 'g25766) (Prim '+ (list (Int 10) (Var 'g25767))))
         (Return (Prim '+ (list (Var 'g25764) (Var 'g25766)))))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types
    (g25764 . Integer)
    (g25769 . Integer)
    (g25768 . Integer)
    (g25767 . Integer)
    (g25766 . Integer)
    (g25765 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'g25765) (Prim '- (list (Int 3))))
    (Seq
     (Assign (Var 'g25764) (Prim '+ (list (Int 1) (Var 'g25765))))
     (Seq
      (Assign (Var 'g25769) (Prim '- (list (Int 5))))
      (Seq
       (Assign (Var 'g25768) (Prim '+ (list (Int 40) (Var 'g25769))))
       (Seq
        (Assign (Var 'g25767) (Prim '+ (list (Int 20) (Var 'g25768))))
        (Seq
         (Assign (Var 'g25766) (Prim '+ (list (Int 10) (Var 'g25767))))
         (Return (Prim '+ (list (Var 'g25764) (Var 'g25766)))))))))))))


output:  @ utilities.rkt:2042
result:
63


testing @ utilities.rkt:2016
test-name:
"var_test_11"

expected-result:
63


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (g25764 . Integer)
    (g25769 . Integer)
    (g25768 . Integer)
    (g25767 . Integer)
    (g25766 . Integer)
    (g25765 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 3) (Var 'g25765)))
     (Instr 'negq (list (Var 'g25765)))
     (Instr 'movq (list (Imm 1) (Var 'g25764)))
     (Instr 'addq (list (Var 'g25765) (Var 'g25764)))
     (Instr 'movq (list (Imm 5) (Var 'g25769)))
     (Instr 'negq (list (Var 'g25769)))
     (Instr 'movq (list (Imm 40) (Var 'g25768)))
     (Instr 'addq (list (Var 'g25769) (Var 'g25768)))
     (Instr 'movq (list (Imm 20) (Var 'g25767)))
     (Instr 'addq (list (Var 'g25768) (Var 'g25767)))
     (Instr 'movq (list (Imm 10) (Var 'g25766)))
     (Instr 'addq (list (Var 'g25767) (Var 'g25766)))
     (Instr 'movq (list (Var 'g25764) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25766) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (g25764 . Integer)
    (g25769 . Integer)
    (g25768 . Integer)
    (g25767 . Integer)
    (g25766 . Integer)
    (g25765 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 3) (Var 'g25765)))
     (Instr 'negq (list (Var 'g25765)))
     (Instr 'movq (list (Imm 1) (Var 'g25764)))
     (Instr 'addq (list (Var 'g25765) (Var 'g25764)))
     (Instr 'movq (list (Imm 5) (Var 'g25769)))
     (Instr 'negq (list (Var 'g25769)))
     (Instr 'movq (list (Imm 40) (Var 'g25768)))
     (Instr 'addq (list (Var 'g25769) (Var 'g25768)))
     (Instr 'movq (list (Imm 20) (Var 'g25767)))
     (Instr 'addq (list (Var 'g25768) (Var 'g25767)))
     (Instr 'movq (list (Imm 10) (Var 'g25766)))
     (Instr 'addq (list (Var 'g25767) (Var 'g25766)))
     (Instr 'movq (list (Var 'g25764) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25766) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
63


testing @ utilities.rkt:2016
test-name:
"var_test_11"

expected-result:
63


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25764 . Integer)
    (g25769 . Integer)
    (g25768 . Integer)
    (g25767 . Integer)
    (g25766 . Integer)
    (g25765 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25767) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25767) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25766) (Var 'g25767) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25766) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25766) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 3) (Var 'g25765)))
     (Instr 'negq (list (Var 'g25765)))
     (Instr 'movq (list (Imm 1) (Var 'g25764)))
     (Instr 'addq (list (Var 'g25765) (Var 'g25764)))
     (Instr 'movq (list (Imm 5) (Var 'g25769)))
     (Instr 'negq (list (Var 'g25769)))
     (Instr 'movq (list (Imm 40) (Var 'g25768)))
     (Instr 'addq (list (Var 'g25769) (Var 'g25768)))
     (Instr 'movq (list (Imm 20) (Var 'g25767)))
     (Instr 'addq (list (Var 'g25768) (Var 'g25767)))
     (Instr 'movq (list (Imm 10) (Var 'g25766)))
     (Instr 'addq (list (Var 'g25767) (Var 'g25766)))
     (Instr 'movq (list (Var 'g25764) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25766) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25764 . Integer)
    (g25769 . Integer)
    (g25768 . Integer)
    (g25767 . Integer)
    (g25766 . Integer)
    (g25765 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25767) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25767) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25766) (Var 'g25767) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25766) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25766) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 3) (Var 'g25765)))
     (Instr 'negq (list (Var 'g25765)))
     (Instr 'movq (list (Imm 1) (Var 'g25764)))
     (Instr 'addq (list (Var 'g25765) (Var 'g25764)))
     (Instr 'movq (list (Imm 5) (Var 'g25769)))
     (Instr 'negq (list (Var 'g25769)))
     (Instr 'movq (list (Imm 40) (Var 'g25768)))
     (Instr 'addq (list (Var 'g25769) (Var 'g25768)))
     (Instr 'movq (list (Imm 20) (Var 'g25767)))
     (Instr 'addq (list (Var 'g25768) (Var 'g25767)))
     (Instr 'movq (list (Imm 10) (Var 'g25766)))
     (Instr 'addq (list (Var 'g25767) (Var 'g25766)))
     (Instr 'movq (list (Var 'g25764) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25766) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
63


testing @ utilities.rkt:2016
test-name:
"var_test_11"

expected-result:
63


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25764 . Integer)
    (g25769 . Integer)
    (g25768 . Integer)
    (g25767 . Integer)
    (g25766 . Integer)
    (g25765 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25767) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25767) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25766) (Var 'g25767) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25766) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25766) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 3) (Var 'g25765)))
     (Instr 'negq (list (Var 'g25765)))
     (Instr 'movq (list (Imm 1) (Var 'g25764)))
     (Instr 'addq (list (Var 'g25765) (Var 'g25764)))
     (Instr 'movq (list (Imm 5) (Var 'g25769)))
     (Instr 'negq (list (Var 'g25769)))
     (Instr 'movq (list (Imm 40) (Var 'g25768)))
     (Instr 'addq (list (Var 'g25769) (Var 'g25768)))
     (Instr 'movq (list (Imm 20) (Var 'g25767)))
     (Instr 'addq (list (Var 'g25768) (Var 'g25767)))
     (Instr 'movq (list (Imm 10) (Var 'g25766)))
     (Instr 'addq (list (Var 'g25767) (Var 'g25766)))
     (Instr 'movq (list (Var 'g25764) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25766) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25764 . Integer)
    (g25769 . Integer)
    (g25768 . Integer)
    (g25767 . Integer)
    (g25766 . Integer)
    (g25765 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25767) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25767) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25766) (Var 'g25767) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25766) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25766) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 3) (Var 'g25765)))
     (Instr 'negq (list (Var 'g25765)))
     (Instr 'movq (list (Imm 1) (Var 'g25764)))
     (Instr 'addq (list (Var 'g25765) (Var 'g25764)))
     (Instr 'movq (list (Imm 5) (Var 'g25769)))
     (Instr 'negq (list (Var 'g25769)))
     (Instr 'movq (list (Imm 40) (Var 'g25768)))
     (Instr 'addq (list (Var 'g25769) (Var 'g25768)))
     (Instr 'movq (list (Imm 20) (Var 'g25767)))
     (Instr 'addq (list (Var 'g25768) (Var 'g25767)))
     (Instr 'movq (list (Imm 10) (Var 'g25766)))
     (Instr 'addq (list (Var 'g25767) (Var 'g25766)))
     (Instr 'movq (list (Var 'g25764) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25766) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
63


testing @ utilities.rkt:2016
test-name:
"var_test_11"

expected-result:
63


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25764 . Integer)
    (g25769 . Integer)
    (g25768 . Integer)
    (g25767 . Integer)
    (g25766 . Integer)
    (g25765 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25767) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25767) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25766) (Var 'g25767) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25766) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25766) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 3) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Imm 1) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rdx)))
     (Instr 'movq (list (Imm 5) (Reg 'rcx)))
     (Instr 'negq (list (Reg 'rcx)))
     (Instr 'movq (list (Imm 40) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Imm 20) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25764 . Integer)
    (g25769 . Integer)
    (g25768 . Integer)
    (g25767 . Integer)
    (g25766 . Integer)
    (g25765 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25767) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25767) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25766) (Var 'g25767) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25766) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25766) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 3) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Imm 1) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rdx)))
     (Instr 'movq (list (Imm 5) (Reg 'rcx)))
     (Instr 'negq (list (Reg 'rcx)))
     (Instr 'movq (list (Imm 40) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Imm 20) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
63


testing @ utilities.rkt:2016
test-name:
"var_test_11"

expected-result:
63


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25764 . Integer)
    (g25769 . Integer)
    (g25768 . Integer)
    (g25767 . Integer)
    (g25766 . Integer)
    (g25765 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25767) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25767) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25766) (Var 'g25767) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25766) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25766) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 3) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Imm 1) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rdx)))
     (Instr 'movq (list (Imm 5) (Reg 'rcx)))
     (Instr 'negq (list (Reg 'rcx)))
     (Instr 'movq (list (Imm 40) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Imm 20) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25764 . Integer)
    (g25769 . Integer)
    (g25768 . Integer)
    (g25767 . Integer)
    (g25766 . Integer)
    (g25765 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25767) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25767) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25766) (Var 'g25767) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25766) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25766) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 3) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Imm 1) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rdx)))
     (Instr 'movq (list (Imm 5) (Reg 'rcx)))
     (Instr 'negq (list (Reg 'rcx)))
     (Instr 'movq (list (Imm 40) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Imm 20) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
63


testing @ utilities.rkt:2016
test-name:
"var_test_11"

expected-result:
63


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25764 . Integer)
    (g25769 . Integer)
    (g25768 . Integer)
    (g25767 . Integer)
    (g25766 . Integer)
    (g25765 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25767) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25767) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25766) (Var 'g25767) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25766) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25766) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 3) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Imm 1) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rdx)))
     (Instr 'movq (list (Imm 5) (Reg 'rcx)))
     (Instr 'negq (list (Reg 'rcx)))
     (Instr 'movq (list (Imm 40) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Imm 20) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25764 . Integer)
    (g25769 . Integer)
    (g25768 . Integer)
    (g25767 . Integer)
    (g25766 . Integer)
    (g25765 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25765) (Reg 'rsp))
      (set (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Reg 'rsp))
      (set (Var 'g25769) (Var 'g25764) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25767) (Var 'g25768) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25767) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25766) (Var 'g25767) (Reg 'rsp))
      (set (Var 'g25764) (Var 'g25766) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25766) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 3) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Imm 1) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rdx)))
     (Instr 'movq (list (Imm 5) (Reg 'rcx)))
     (Instr 'negq (list (Reg 'rcx)))
     (Instr 'movq (list (Imm 40) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Imm 20) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
63


testing @ utilities.rkt:2016
test-name:
"var_test_11"

expected-result:
63


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Prim
  '+
  (list
   (Prim 'read '())
   (Let
    'x
    (Int 5)
    (Prim
     '+
     (list
      (Let 'y (Prim 'read '()) (Var 'y))
      (Prim '+ (list (Var 'x) (Int 1)))))))))


testing @ utilities.rkt:2016
test-name:
"var_test_12"

expected-result:
11


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list
   (Prim 'read '())
   (Let
    'x
    (Int 5)
    (Prim
     '+
     (list
      (Let 'y (Prim 'read '()) (Var 'y))
      (Prim '+ (list (Var 'x) (Int 1)))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list
   (Prim 'read '())
   (Let
    'x
    (Int 5)
    (Prim
     '+
     (list
      (Let 'y (Prim 'read '()) (Var 'y))
      (Prim '+ (list (Var 'x) (Int 1)))))))))


output:  @ utilities.rkt:2042
result:
11


testing @ utilities.rkt:2016
test-name:
"var_test_12"

expected-result:
11


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list
   (Prim 'read '())
   (Let
    'x25776
    (Int 5)
    (Prim
     '+
     (list
      (Let 'y25777 (Prim 'read '()) (Var 'y25777))
      (Prim '+ (list (Var 'x25776) (Int 1)))))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list
   (Prim 'read '())
   (Let
    'x25776
    (Int 5)
    (Prim
     '+
     (list
      (Let 'y25777 (Prim 'read '()) (Var 'y25777))
      (Prim '+ (list (Var 'x25776) (Int 1)))))))))


output:  @ utilities.rkt:2042
result:
11


testing @ utilities.rkt:2016
test-name:
"var_test_12"

expected-result:
11


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list
   (Prim 'read '())
   (Let
    'x25776
    (Int 5)
    (Prim
     '+
     (list
      (Let 'y25777 (Prim 'read '()) (Var 'y25777))
      (Prim '+ (list (Var 'x25776) (Int 1)))))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list
   (Prim 'read '())
   (Let
    'x25776
    (Int 5)
    (Prim
     '+
     (list
      (Let 'y25777 (Prim 'read '()) (Var 'y25777))
      (Prim '+ (list (Var 'x25776) (Int 1)))))))))


output:  @ utilities.rkt:2042
result:
11


testing @ utilities.rkt:2016
test-name:
"var_test_12"

expected-result:
11


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'g25778
  (Prim 'read '())
  (Let
   'x25776
   (Int 5)
   (Let
    'y25777
    (Prim 'read '())
    (Let
     'g25780
     (Prim '+ (list (Var 'x25776) (Int 1)))
     (Let
      'g25779
      (Prim '+ (list (Var 'y25777) (Var 'g25780)))
      (Prim '+ (list (Var 'g25778) (Var 'g25779)))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'g25778
  (Prim 'read '())
  (Let
   'x25776
   (Int 5)
   (Let
    'y25777
    (Prim 'read '())
    (Let
     'g25780
     (Prim '+ (list (Var 'x25776) (Int 1)))
     (Let
      'g25779
      (Prim '+ (list (Var 'y25777) (Var 'g25780)))
      (Prim '+ (list (Var 'g25778) (Var 'g25779)))))))))


output:  @ utilities.rkt:2042
result:
11


testing @ utilities.rkt:2016
test-name:
"var_test_12"

expected-result:
11


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'g25778) (Prim 'read '()))
    (Seq
     (Assign (Var 'x25776) (Int 5))
     (Seq
      (Assign (Var 'y25777) (Prim 'read '()))
      (Seq
       (Assign (Var 'g25780) (Prim '+ (list (Var 'x25776) (Int 1))))
       (Seq
        (Assign (Var 'g25779) (Prim '+ (list (Var 'y25777) (Var 'g25780))))
        (Return (Prim '+ (list (Var 'g25778) (Var 'g25779))))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types
    (g25780 . Integer)
    (g25779 . Integer)
    (g25778 . Integer)
    (y25777 . Integer)
    (x25776 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'g25778) (Prim 'read '()))
    (Seq
     (Assign (Var 'x25776) (Int 5))
     (Seq
      (Assign (Var 'y25777) (Prim 'read '()))
      (Seq
       (Assign (Var 'g25780) (Prim '+ (list (Var 'x25776) (Int 1))))
       (Seq
        (Assign (Var 'g25779) (Prim '+ (list (Var 'y25777) (Var 'g25780))))
        (Return (Prim '+ (list (Var 'g25778) (Var 'g25779))))))))))))


output:  @ utilities.rkt:2042
result:
11


testing @ utilities.rkt:2016
test-name:
"var_test_12"

expected-result:
11


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (g25780 . Integer)
    (g25779 . Integer)
    (g25778 . Integer)
    (y25777 . Integer)
    (x25776 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g25778)))
     (Instr 'movq (list (Imm 5) (Var 'x25776)))
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'y25777)))
     (Instr 'movq (list (Var 'x25776) (Var 'g25780)))
     (Instr 'addq (list (Imm 1) (Var 'g25780)))
     (Instr 'movq (list (Var 'y25777) (Var 'g25779)))
     (Instr 'addq (list (Var 'g25780) (Var 'g25779)))
     (Instr 'movq (list (Var 'g25778) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25779) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (g25780 . Integer)
    (g25779 . Integer)
    (g25778 . Integer)
    (y25777 . Integer)
    (x25776 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g25778)))
     (Instr 'movq (list (Imm 5) (Var 'x25776)))
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'y25777)))
     (Instr 'movq (list (Var 'x25776) (Var 'g25780)))
     (Instr 'addq (list (Imm 1) (Var 'g25780)))
     (Instr 'movq (list (Var 'y25777) (Var 'g25779)))
     (Instr 'addq (list (Var 'g25780) (Var 'g25779)))
     (Instr 'movq (list (Var 'g25778) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25779) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
11


testing @ utilities.rkt:2016
test-name:
"var_test_12"

expected-result:
11


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25780 . Integer)
    (g25779 . Integer)
    (g25778 . Integer)
    (y25777 . Integer)
    (x25776 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'g25778) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'x25776) (Var 'g25778) (Reg 'rsp))
      (set (Reg 'rax) (Var 'x25776) (Var 'g25778) (Reg 'rsp))
      (set (Var 'x25776) (Var 'y25777) (Var 'g25778) (Reg 'rsp))
      (set (Var 'y25777) (Var 'g25778) (Var 'g25780) (Reg 'rsp))
      (set (Var 'y25777) (Var 'g25778) (Var 'g25780) (Reg 'rsp))
      (set (Var 'g25778) (Var 'g25779) (Var 'g25780) (Reg 'rsp))
      (set (Var 'g25778) (Var 'g25779) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25779) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g25778)))
     (Instr 'movq (list (Imm 5) (Var 'x25776)))
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'y25777)))
     (Instr 'movq (list (Var 'x25776) (Var 'g25780)))
     (Instr 'addq (list (Imm 1) (Var 'g25780)))
     (Instr 'movq (list (Var 'y25777) (Var 'g25779)))
     (Instr 'addq (list (Var 'g25780) (Var 'g25779)))
     (Instr 'movq (list (Var 'g25778) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25779) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25780 . Integer)
    (g25779 . Integer)
    (g25778 . Integer)
    (y25777 . Integer)
    (x25776 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'g25778) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'x25776) (Var 'g25778) (Reg 'rsp))
      (set (Reg 'rax) (Var 'x25776) (Var 'g25778) (Reg 'rsp))
      (set (Var 'x25776) (Var 'y25777) (Var 'g25778) (Reg 'rsp))
      (set (Var 'y25777) (Var 'g25778) (Var 'g25780) (Reg 'rsp))
      (set (Var 'y25777) (Var 'g25778) (Var 'g25780) (Reg 'rsp))
      (set (Var 'g25778) (Var 'g25779) (Var 'g25780) (Reg 'rsp))
      (set (Var 'g25778) (Var 'g25779) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25779) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g25778)))
     (Instr 'movq (list (Imm 5) (Var 'x25776)))
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'y25777)))
     (Instr 'movq (list (Var 'x25776) (Var 'g25780)))
     (Instr 'addq (list (Imm 1) (Var 'g25780)))
     (Instr 'movq (list (Var 'y25777) (Var 'g25779)))
     (Instr 'addq (list (Var 'g25780) (Var 'g25779)))
     (Instr 'movq (list (Var 'g25778) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25779) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
11


testing @ utilities.rkt:2016
test-name:
"var_test_12"

expected-result:
11


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25780 . Integer)
    (g25779 . Integer)
    (g25778 . Integer)
    (y25777 . Integer)
    (x25776 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'g25778) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'x25776) (Var 'g25778) (Reg 'rsp))
      (set (Reg 'rax) (Var 'x25776) (Var 'g25778) (Reg 'rsp))
      (set (Var 'x25776) (Var 'y25777) (Var 'g25778) (Reg 'rsp))
      (set (Var 'y25777) (Var 'g25778) (Var 'g25780) (Reg 'rsp))
      (set (Var 'y25777) (Var 'g25778) (Var 'g25780) (Reg 'rsp))
      (set (Var 'g25778) (Var 'g25779) (Var 'g25780) (Reg 'rsp))
      (set (Var 'g25778) (Var 'g25779) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25779) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g25778)))
     (Instr 'movq (list (Imm 5) (Var 'x25776)))
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'y25777)))
     (Instr 'movq (list (Var 'x25776) (Var 'g25780)))
     (Instr 'addq (list (Imm 1) (Var 'g25780)))
     (Instr 'movq (list (Var 'y25777) (Var 'g25779)))
     (Instr 'addq (list (Var 'g25780) (Var 'g25779)))
     (Instr 'movq (list (Var 'g25778) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25779) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25780 . Integer)
    (g25779 . Integer)
    (g25778 . Integer)
    (y25777 . Integer)
    (x25776 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'g25778) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'x25776) (Var 'g25778) (Reg 'rsp))
      (set (Reg 'rax) (Var 'x25776) (Var 'g25778) (Reg 'rsp))
      (set (Var 'x25776) (Var 'y25777) (Var 'g25778) (Reg 'rsp))
      (set (Var 'y25777) (Var 'g25778) (Var 'g25780) (Reg 'rsp))
      (set (Var 'y25777) (Var 'g25778) (Var 'g25780) (Reg 'rsp))
      (set (Var 'g25778) (Var 'g25779) (Var 'g25780) (Reg 'rsp))
      (set (Var 'g25778) (Var 'g25779) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25779) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g25778)))
     (Instr 'movq (list (Imm 5) (Var 'x25776)))
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'y25777)))
     (Instr 'movq (list (Var 'x25776) (Var 'g25780)))
     (Instr 'addq (list (Imm 1) (Var 'g25780)))
     (Instr 'movq (list (Var 'y25777) (Var 'g25779)))
     (Instr 'addq (list (Var 'g25780) (Var 'g25779)))
     (Instr 'movq (list (Var 'g25778) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25779) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
11


testing @ utilities.rkt:2016
test-name:
"var_test_12"

expected-result:
11


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25780 . Integer)
    (g25779 . Integer)
    (g25778 . Integer)
    (y25777 . Integer)
    (x25776 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'r12) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'g25778) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'x25776) (Var 'g25778) (Reg 'rsp))
      (set (Reg 'rax) (Var 'x25776) (Var 'g25778) (Reg 'rsp))
      (set (Var 'x25776) (Var 'y25777) (Var 'g25778) (Reg 'rsp))
      (set (Var 'y25777) (Var 'g25778) (Var 'g25780) (Reg 'rsp))
      (set (Var 'y25777) (Var 'g25778) (Var 'g25780) (Reg 'rsp))
      (set (Var 'g25778) (Var 'g25779) (Var 'g25780) (Reg 'rsp))
      (set (Var 'g25778) (Var 'g25779) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25779) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'r12)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'addq (list (Imm 1) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'r12) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25780 . Integer)
    (g25779 . Integer)
    (g25778 . Integer)
    (y25777 . Integer)
    (x25776 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'r12) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'g25778) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'x25776) (Var 'g25778) (Reg 'rsp))
      (set (Reg 'rax) (Var 'x25776) (Var 'g25778) (Reg 'rsp))
      (set (Var 'x25776) (Var 'y25777) (Var 'g25778) (Reg 'rsp))
      (set (Var 'y25777) (Var 'g25778) (Var 'g25780) (Reg 'rsp))
      (set (Var 'y25777) (Var 'g25778) (Var 'g25780) (Reg 'rsp))
      (set (Var 'g25778) (Var 'g25779) (Var 'g25780) (Reg 'rsp))
      (set (Var 'g25778) (Var 'g25779) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25779) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'r12)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'addq (list (Imm 1) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'r12) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
11


testing @ utilities.rkt:2016
test-name:
"var_test_12"

expected-result:
11


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25780 . Integer)
    (g25779 . Integer)
    (g25778 . Integer)
    (y25777 . Integer)
    (x25776 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'r12) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'g25778) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'x25776) (Var 'g25778) (Reg 'rsp))
      (set (Reg 'rax) (Var 'x25776) (Var 'g25778) (Reg 'rsp))
      (set (Var 'x25776) (Var 'y25777) (Var 'g25778) (Reg 'rsp))
      (set (Var 'y25777) (Var 'g25778) (Var 'g25780) (Reg 'rsp))
      (set (Var 'y25777) (Var 'g25778) (Var 'g25780) (Reg 'rsp))
      (set (Var 'g25778) (Var 'g25779) (Var 'g25780) (Reg 'rsp))
      (set (Var 'g25778) (Var 'g25779) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25779) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'r12)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'addq (list (Imm 1) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'r12) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25780 . Integer)
    (g25779 . Integer)
    (g25778 . Integer)
    (y25777 . Integer)
    (x25776 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'r12) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'g25778) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'x25776) (Var 'g25778) (Reg 'rsp))
      (set (Reg 'rax) (Var 'x25776) (Var 'g25778) (Reg 'rsp))
      (set (Var 'x25776) (Var 'y25777) (Var 'g25778) (Reg 'rsp))
      (set (Var 'y25777) (Var 'g25778) (Var 'g25780) (Reg 'rsp))
      (set (Var 'y25777) (Var 'g25778) (Var 'g25780) (Reg 'rsp))
      (set (Var 'g25778) (Var 'g25779) (Var 'g25780) (Reg 'rsp))
      (set (Var 'g25778) (Var 'g25779) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25779) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'r12)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'addq (list (Imm 1) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'r12) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
11


testing @ utilities.rkt:2016
test-name:
"var_test_12"

expected-result:
11


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25780 . Integer)
    (g25779 . Integer)
    (g25778 . Integer)
    (y25777 . Integer)
    (x25776 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'r12) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'r12)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'g25778) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'x25776) (Var 'g25778) (Reg 'rsp))
      (set (Reg 'rax) (Var 'x25776) (Var 'g25778) (Reg 'rsp))
      (set (Var 'x25776) (Var 'y25777) (Var 'g25778) (Reg 'rsp))
      (set (Var 'y25777) (Var 'g25778) (Var 'g25780) (Reg 'rsp))
      (set (Var 'y25777) (Var 'g25778) (Var 'g25780) (Reg 'rsp))
      (set (Var 'g25778) (Var 'g25779) (Var 'g25780) (Reg 'rsp))
      (set (Var 'g25778) (Var 'g25779) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25779) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'r12)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'addq (list (Imm 1) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'r12) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'r12)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25780 . Integer)
    (g25779 . Integer)
    (g25778 . Integer)
    (y25777 . Integer)
    (x25776 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'r12) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'r12)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'g25778) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'x25776) (Var 'g25778) (Reg 'rsp))
      (set (Reg 'rax) (Var 'x25776) (Var 'g25778) (Reg 'rsp))
      (set (Var 'x25776) (Var 'y25777) (Var 'g25778) (Reg 'rsp))
      (set (Var 'y25777) (Var 'g25778) (Var 'g25780) (Reg 'rsp))
      (set (Var 'y25777) (Var 'g25778) (Var 'g25780) (Reg 'rsp))
      (set (Var 'g25778) (Var 'g25779) (Var 'g25780) (Reg 'rsp))
      (set (Var 'g25778) (Var 'g25779) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25779) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'r12)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'addq (list (Imm 1) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'r12) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'r12)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
11


testing @ utilities.rkt:2016
test-name:
"var_test_12"

expected-result:
11


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program '() (Prim 'read '()))


testing @ utilities.rkt:2016
test-name:
"var_test_13"

expected-result:
3


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Prim 'read '()))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Prim 'read '()))


output:  @ utilities.rkt:2042
result:
3


testing @ utilities.rkt:2016
test-name:
"var_test_13"

expected-result:
3


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Prim 'read '()))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Prim 'read '()))


output:  @ utilities.rkt:2042
result:
3


testing @ utilities.rkt:2016
test-name:
"var_test_13"

expected-result:
3


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Prim 'read '()))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Prim 'read '()))


output:  @ utilities.rkt:2042
result:
3


testing @ utilities.rkt:2016
test-name:
"var_test_13"

expected-result:
3


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Prim 'read '()))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Prim 'read '()))


output:  @ utilities.rkt:2042
result:
3


testing @ utilities.rkt:2016
test-name:
"var_test_13"

expected-result:
3


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram '() (list (cons 'start (Return (Prim 'read '())))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram '((locals-types)) (list (cons 'start (Return (Prim 'read '())))))


output:  @ utilities.rkt:2042
result:
3


testing @ utilities.rkt:2016
test-name:
"var_test_13"

expected-result:
3


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types))
 (list (cons 'start (Block '() (list (Callq 'read_int 1) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types))
 (list (cons 'start (Block '() (list (Callq 'read_int 1) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
3


testing @ utilities.rkt:2016
test-name:
"var_test_13"

expected-result:
3


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list (Callq 'read_int 1) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list (Callq 'read_int 1) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
3


testing @ utilities.rkt:2016
test-name:
"var_test_13"

expected-result:
3


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list (Callq 'read_int 1) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list (Callq 'read_int 1) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
3


testing @ utilities.rkt:2016
test-name:
"var_test_13"

expected-result:
3


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list (Callq 'read_int 1) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list (Callq 'read_int 1) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
3


testing @ utilities.rkt:2016
test-name:
"var_test_13"

expected-result:
3


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list (Callq 'read_int 1) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list (Callq 'read_int 1) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
3


testing @ utilities.rkt:2016
test-name:
"var_test_13"

expected-result:
3


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list (Callq 'read_int 1) (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list (Callq 'read_int 1) (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
3


testing @ utilities.rkt:2016
test-name:
"var_test_13"

expected-result:
3


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Prim
  '+
  (list
   (Int 2)
   (Prim
    '+
    (list (Int 2) (Prim '+ (list (Int 2) (Prim '+ (list (Int 2) (Int 2))))))))))


testing @ utilities.rkt:2016
test-name:
"var_test_14"

expected-result:
10


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list
   (Int 2)
   (Prim
    '+
    (list (Int 2) (Prim '+ (list (Int 2) (Prim '+ (list (Int 2) (Int 2))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list
   (Int 2)
   (Prim
    '+
    (list (Int 2) (Prim '+ (list (Int 2) (Prim '+ (list (Int 2) (Int 2))))))))))


output:  @ utilities.rkt:2042
result:
10


testing @ utilities.rkt:2016
test-name:
"var_test_14"

expected-result:
10


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list
   (Int 2)
   (Prim
    '+
    (list (Int 2) (Prim '+ (list (Int 2) (Prim '+ (list (Int 2) (Int 2))))))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list
   (Int 2)
   (Prim
    '+
    (list (Int 2) (Prim '+ (list (Int 2) (Prim '+ (list (Int 2) (Int 2))))))))))


output:  @ utilities.rkt:2042
result:
10


testing @ utilities.rkt:2016
test-name:
"var_test_14"

expected-result:
10


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list
   (Int 2)
   (Prim
    '+
    (list (Int 2) (Prim '+ (list (Int 2) (Prim '+ (list (Int 2) (Int 2))))))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list
   (Int 2)
   (Prim
    '+
    (list (Int 2) (Prim '+ (list (Int 2) (Prim '+ (list (Int 2) (Int 2))))))))))


output:  @ utilities.rkt:2042
result:
10


testing @ utilities.rkt:2016
test-name:
"var_test_14"

expected-result:
10


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'g25795
  (Prim '+ (list (Int 2) (Int 2)))
  (Let
   'g25794
   (Prim '+ (list (Int 2) (Var 'g25795)))
   (Let
    'g25793
    (Prim '+ (list (Int 2) (Var 'g25794)))
    (Prim '+ (list (Int 2) (Var 'g25793)))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'g25795
  (Prim '+ (list (Int 2) (Int 2)))
  (Let
   'g25794
   (Prim '+ (list (Int 2) (Var 'g25795)))
   (Let
    'g25793
    (Prim '+ (list (Int 2) (Var 'g25794)))
    (Prim '+ (list (Int 2) (Var 'g25793)))))))


output:  @ utilities.rkt:2042
result:
10


testing @ utilities.rkt:2016
test-name:
"var_test_14"

expected-result:
10


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'g25795) (Prim '+ (list (Int 2) (Int 2))))
    (Seq
     (Assign (Var 'g25794) (Prim '+ (list (Int 2) (Var 'g25795))))
     (Seq
      (Assign (Var 'g25793) (Prim '+ (list (Int 2) (Var 'g25794))))
      (Return (Prim '+ (list (Int 2) (Var 'g25793))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types (g25795 . Integer) (g25794 . Integer) (g25793 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'g25795) (Prim '+ (list (Int 2) (Int 2))))
    (Seq
     (Assign (Var 'g25794) (Prim '+ (list (Int 2) (Var 'g25795))))
     (Seq
      (Assign (Var 'g25793) (Prim '+ (list (Int 2) (Var 'g25794))))
      (Return (Prim '+ (list (Int 2) (Var 'g25793))))))))))


output:  @ utilities.rkt:2042
result:
10


testing @ utilities.rkt:2016
test-name:
"var_test_14"

expected-result:
10


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types (g25795 . Integer) (g25794 . Integer) (g25793 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 2) (Var 'g25795)))
     (Instr 'addq (list (Imm 2) (Var 'g25795)))
     (Instr 'movq (list (Imm 2) (Var 'g25794)))
     (Instr 'addq (list (Var 'g25795) (Var 'g25794)))
     (Instr 'movq (list (Imm 2) (Var 'g25793)))
     (Instr 'addq (list (Var 'g25794) (Var 'g25793)))
     (Instr 'movq (list (Imm 2) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25793) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types (g25795 . Integer) (g25794 . Integer) (g25793 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 2) (Var 'g25795)))
     (Instr 'addq (list (Imm 2) (Var 'g25795)))
     (Instr 'movq (list (Imm 2) (Var 'g25794)))
     (Instr 'addq (list (Var 'g25795) (Var 'g25794)))
     (Instr 'movq (list (Imm 2) (Var 'g25793)))
     (Instr 'addq (list (Var 'g25794) (Var 'g25793)))
     (Instr 'movq (list (Imm 2) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25793) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
10


testing @ utilities.rkt:2016
test-name:
"var_test_14"

expected-result:
10


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g25795 . Integer) (g25794 . Integer) (g25793 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25794) (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25794) (Reg 'rsp))
      (set (Var 'g25793) (Var 'g25794) (Reg 'rsp))
      (set (Var 'g25793) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25793) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Var 'g25795)))
     (Instr 'addq (list (Imm 2) (Var 'g25795)))
     (Instr 'movq (list (Imm 2) (Var 'g25794)))
     (Instr 'addq (list (Var 'g25795) (Var 'g25794)))
     (Instr 'movq (list (Imm 2) (Var 'g25793)))
     (Instr 'addq (list (Var 'g25794) (Var 'g25793)))
     (Instr 'movq (list (Imm 2) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25793) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g25795 . Integer) (g25794 . Integer) (g25793 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25794) (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25794) (Reg 'rsp))
      (set (Var 'g25793) (Var 'g25794) (Reg 'rsp))
      (set (Var 'g25793) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25793) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Var 'g25795)))
     (Instr 'addq (list (Imm 2) (Var 'g25795)))
     (Instr 'movq (list (Imm 2) (Var 'g25794)))
     (Instr 'addq (list (Var 'g25795) (Var 'g25794)))
     (Instr 'movq (list (Imm 2) (Var 'g25793)))
     (Instr 'addq (list (Var 'g25794) (Var 'g25793)))
     (Instr 'movq (list (Imm 2) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25793) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
10


testing @ utilities.rkt:2016
test-name:
"var_test_14"

expected-result:
10


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g25795 . Integer) (g25794 . Integer) (g25793 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25794) (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25794) (Reg 'rsp))
      (set (Var 'g25793) (Var 'g25794) (Reg 'rsp))
      (set (Var 'g25793) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25793) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Var 'g25795)))
     (Instr 'addq (list (Imm 2) (Var 'g25795)))
     (Instr 'movq (list (Imm 2) (Var 'g25794)))
     (Instr 'addq (list (Var 'g25795) (Var 'g25794)))
     (Instr 'movq (list (Imm 2) (Var 'g25793)))
     (Instr 'addq (list (Var 'g25794) (Var 'g25793)))
     (Instr 'movq (list (Imm 2) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25793) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g25795 . Integer) (g25794 . Integer) (g25793 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25794) (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25794) (Reg 'rsp))
      (set (Var 'g25793) (Var 'g25794) (Reg 'rsp))
      (set (Var 'g25793) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25793) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Var 'g25795)))
     (Instr 'addq (list (Imm 2) (Var 'g25795)))
     (Instr 'movq (list (Imm 2) (Var 'g25794)))
     (Instr 'addq (list (Var 'g25795) (Var 'g25794)))
     (Instr 'movq (list (Imm 2) (Var 'g25793)))
     (Instr 'addq (list (Var 'g25794) (Var 'g25793)))
     (Instr 'movq (list (Imm 2) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25793) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
10


testing @ utilities.rkt:2016
test-name:
"var_test_14"

expected-result:
10


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g25795 . Integer) (g25794 . Integer) (g25793 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25794) (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25794) (Reg 'rsp))
      (set (Var 'g25793) (Var 'g25794) (Reg 'rsp))
      (set (Var 'g25793) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25793) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rbx)))
     (Instr 'addq (list (Imm 2) (Reg 'rbx)))
     (Instr 'movq (list (Imm 2) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Imm 2) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Imm 2) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g25795 . Integer) (g25794 . Integer) (g25793 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25794) (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25794) (Reg 'rsp))
      (set (Var 'g25793) (Var 'g25794) (Reg 'rsp))
      (set (Var 'g25793) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25793) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rbx)))
     (Instr 'addq (list (Imm 2) (Reg 'rbx)))
     (Instr 'movq (list (Imm 2) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Imm 2) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Imm 2) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
10


testing @ utilities.rkt:2016
test-name:
"var_test_14"

expected-result:
10


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g25795 . Integer) (g25794 . Integer) (g25793 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25794) (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25794) (Reg 'rsp))
      (set (Var 'g25793) (Var 'g25794) (Reg 'rsp))
      (set (Var 'g25793) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25793) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rbx)))
     (Instr 'addq (list (Imm 2) (Reg 'rbx)))
     (Instr 'movq (list (Imm 2) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Imm 2) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Imm 2) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g25795 . Integer) (g25794 . Integer) (g25793 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25794) (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25794) (Reg 'rsp))
      (set (Var 'g25793) (Var 'g25794) (Reg 'rsp))
      (set (Var 'g25793) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25793) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rbx)))
     (Instr 'addq (list (Imm 2) (Reg 'rbx)))
     (Instr 'movq (list (Imm 2) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Imm 2) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Imm 2) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
10


testing @ utilities.rkt:2016
test-name:
"var_test_14"

expected-result:
10


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g25795 . Integer) (g25794 . Integer) (g25793 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25794) (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25794) (Reg 'rsp))
      (set (Var 'g25793) (Var 'g25794) (Reg 'rsp))
      (set (Var 'g25793) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25793) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rbx)))
     (Instr 'addq (list (Imm 2) (Reg 'rbx)))
     (Instr 'movq (list (Imm 2) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Imm 2) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Imm 2) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g25795 . Integer) (g25794 . Integer) (g25793 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25794) (Var 'g25795) (Reg 'rsp))
      (set (Var 'g25794) (Reg 'rsp))
      (set (Var 'g25793) (Var 'g25794) (Reg 'rsp))
      (set (Var 'g25793) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25793) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rbx)))
     (Instr 'addq (list (Imm 2) (Reg 'rbx)))
     (Instr 'movq (list (Imm 2) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Imm 2) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Imm 2) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
10


testing @ utilities.rkt:2016
test-name:
"var_test_14"

expected-result:
10


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program '() (Prim '+ (list (Int 13) (Prim '- (list (Int 12))))))


testing @ utilities.rkt:2016
test-name:
"var_test_15"

expected-result:
1


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Prim '+ (list (Int 13) (Prim '- (list (Int 12))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Prim '+ (list (Int 13) (Prim '- (list (Int 12))))))


output:  @ utilities.rkt:2042
result:
1


testing @ utilities.rkt:2016
test-name:
"var_test_15"

expected-result:
1


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Prim '+ (list (Int 13) (Prim '- (list (Int 12))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Prim '+ (list (Int 13) (Prim '- (list (Int 12))))))


output:  @ utilities.rkt:2042
result:
1


testing @ utilities.rkt:2016
test-name:
"var_test_15"

expected-result:
1


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Prim '+ (list (Int 13) (Prim '- (list (Int 12))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Prim '+ (list (Int 13) (Prim '- (list (Int 12))))))


output:  @ utilities.rkt:2042
result:
1


testing @ utilities.rkt:2016
test-name:
"var_test_15"

expected-result:
1


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'g25802
  (Prim '- (list (Int 12)))
  (Prim '+ (list (Int 13) (Var 'g25802)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'g25802
  (Prim '- (list (Int 12)))
  (Prim '+ (list (Int 13) (Var 'g25802)))))


output:  @ utilities.rkt:2042
result:
1


testing @ utilities.rkt:2016
test-name:
"var_test_15"

expected-result:
1


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'g25802) (Prim '- (list (Int 12))))
    (Return (Prim '+ (list (Int 13) (Var 'g25802))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types (g25802 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'g25802) (Prim '- (list (Int 12))))
    (Return (Prim '+ (list (Int 13) (Var 'g25802))))))))


output:  @ utilities.rkt:2042
result:
1


testing @ utilities.rkt:2016
test-name:
"var_test_15"

expected-result:
1


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types (g25802 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 12) (Var 'g25802)))
     (Instr 'negq (list (Var 'g25802)))
     (Instr 'movq (list (Imm 13) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25802) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types (g25802 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 12) (Var 'g25802)))
     (Instr 'negq (list (Var 'g25802)))
     (Instr 'movq (list (Imm 13) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25802) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
1


testing @ utilities.rkt:2016
test-name:
"var_test_15"

expected-result:
1


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g25802 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25802) (Reg 'rsp))
      (set (Var 'g25802) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25802) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Var 'g25802)))
     (Instr 'negq (list (Var 'g25802)))
     (Instr 'movq (list (Imm 13) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25802) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g25802 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25802) (Reg 'rsp))
      (set (Var 'g25802) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25802) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Var 'g25802)))
     (Instr 'negq (list (Var 'g25802)))
     (Instr 'movq (list (Imm 13) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25802) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
1


testing @ utilities.rkt:2016
test-name:
"var_test_15"

expected-result:
1


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g25802 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25802) (Reg 'rsp))
      (set (Var 'g25802) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25802) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Var 'g25802)))
     (Instr 'negq (list (Var 'g25802)))
     (Instr 'movq (list (Imm 13) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25802) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g25802 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25802) (Reg 'rsp))
      (set (Var 'g25802) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25802) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Var 'g25802)))
     (Instr 'negq (list (Var 'g25802)))
     (Instr 'movq (list (Imm 13) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25802) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
1


testing @ utilities.rkt:2016
test-name:
"var_test_15"

expected-result:
1


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g25802 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25802) (Reg 'rsp))
      (set (Var 'g25802) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25802) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Imm 13) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g25802 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25802) (Reg 'rsp))
      (set (Var 'g25802) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25802) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Imm 13) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
1


testing @ utilities.rkt:2016
test-name:
"var_test_15"

expected-result:
1


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g25802 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25802) (Reg 'rsp))
      (set (Var 'g25802) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25802) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Imm 13) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g25802 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25802) (Reg 'rsp))
      (set (Var 'g25802) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25802) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Imm 13) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
1


testing @ utilities.rkt:2016
test-name:
"var_test_15"

expected-result:
1


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g25802 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25802) (Reg 'rsp))
      (set (Var 'g25802) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25802) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Imm 13) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g25802 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'g25802) (Reg 'rsp))
      (set (Var 'g25802) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25802) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Imm 13) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
1


testing @ utilities.rkt:2016
test-name:
"var_test_15"

expected-result:
1


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Let
  'var1
  (Int 10)
  (Let
   'var2
   (Prim '+ (list (Int 10) (Var 'var1)))
   (Prim '+ (list (Var 'var1) (Var 'var2))))))


testing @ utilities.rkt:2016
test-name:
"var_test_16"

expected-result:
30


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'var1
  (Int 10)
  (Let
   'var2
   (Prim '+ (list (Int 10) (Var 'var1)))
   (Prim '+ (list (Var 'var1) (Var 'var2))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'var1
  (Int 10)
  (Let
   'var2
   (Prim '+ (list (Int 10) (Var 'var1)))
   (Prim '+ (list (Var 'var1) (Var 'var2))))))


output:  @ utilities.rkt:2042
result:
30


testing @ utilities.rkt:2016
test-name:
"var_test_16"

expected-result:
30


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'var125809
  (Int 10)
  (Let
   'var225810
   (Prim '+ (list (Int 10) (Var 'var125809)))
   (Prim '+ (list (Var 'var125809) (Var 'var225810))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'var125809
  (Int 10)
  (Let
   'var225810
   (Prim '+ (list (Int 10) (Var 'var125809)))
   (Prim '+ (list (Var 'var125809) (Var 'var225810))))))


output:  @ utilities.rkt:2042
result:
30


testing @ utilities.rkt:2016
test-name:
"var_test_16"

expected-result:
30


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'var125809
  (Int 10)
  (Let
   'var225810
   (Prim '+ (list (Int 10) (Var 'var125809)))
   (Prim '+ (list (Var 'var125809) (Var 'var225810))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'var125809
  (Int 10)
  (Let
   'var225810
   (Prim '+ (list (Int 10) (Var 'var125809)))
   (Prim '+ (list (Var 'var125809) (Var 'var225810))))))


output:  @ utilities.rkt:2042
result:
30


testing @ utilities.rkt:2016
test-name:
"var_test_16"

expected-result:
30


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'var125809
  (Int 10)
  (Let
   'var225810
   (Prim '+ (list (Int 10) (Var 'var125809)))
   (Prim '+ (list (Var 'var125809) (Var 'var225810))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'var125809
  (Int 10)
  (Let
   'var225810
   (Prim '+ (list (Int 10) (Var 'var125809)))
   (Prim '+ (list (Var 'var125809) (Var 'var225810))))))


output:  @ utilities.rkt:2042
result:
30


testing @ utilities.rkt:2016
test-name:
"var_test_16"

expected-result:
30


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'var125809) (Int 10))
    (Seq
     (Assign (Var 'var225810) (Prim '+ (list (Int 10) (Var 'var125809))))
     (Return (Prim '+ (list (Var 'var125809) (Var 'var225810)))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types (var225810 . Integer) (var125809 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'var125809) (Int 10))
    (Seq
     (Assign (Var 'var225810) (Prim '+ (list (Int 10) (Var 'var125809))))
     (Return (Prim '+ (list (Var 'var125809) (Var 'var225810)))))))))


output:  @ utilities.rkt:2042
result:
30


testing @ utilities.rkt:2016
test-name:
"var_test_16"

expected-result:
30


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types (var225810 . Integer) (var125809 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 10) (Var 'var125809)))
     (Instr 'movq (list (Imm 10) (Var 'var225810)))
     (Instr 'addq (list (Var 'var125809) (Var 'var225810)))
     (Instr 'movq (list (Var 'var125809) (Reg 'rax)))
     (Instr 'addq (list (Var 'var225810) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types (var225810 . Integer) (var125809 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 10) (Var 'var125809)))
     (Instr 'movq (list (Imm 10) (Var 'var225810)))
     (Instr 'addq (list (Var 'var125809) (Var 'var225810)))
     (Instr 'movq (list (Var 'var125809) (Reg 'rax)))
     (Instr 'addq (list (Var 'var225810) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
30


testing @ utilities.rkt:2016
test-name:
"var_test_16"

expected-result:
30


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (var225810 . Integer) (var125809 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'var125809) (Reg 'rsp))
      (set (Var 'var125809) (Var 'var225810) (Reg 'rsp))
      (set (Var 'var125809) (Var 'var225810) (Reg 'rsp))
      (set (Reg 'rax) (Var 'var225810) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Var 'var125809)))
     (Instr 'movq (list (Imm 10) (Var 'var225810)))
     (Instr 'addq (list (Var 'var125809) (Var 'var225810)))
     (Instr 'movq (list (Var 'var125809) (Reg 'rax)))
     (Instr 'addq (list (Var 'var225810) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (var225810 . Integer) (var125809 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'var125809) (Reg 'rsp))
      (set (Var 'var125809) (Var 'var225810) (Reg 'rsp))
      (set (Var 'var125809) (Var 'var225810) (Reg 'rsp))
      (set (Reg 'rax) (Var 'var225810) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Var 'var125809)))
     (Instr 'movq (list (Imm 10) (Var 'var225810)))
     (Instr 'addq (list (Var 'var125809) (Var 'var225810)))
     (Instr 'movq (list (Var 'var125809) (Reg 'rax)))
     (Instr 'addq (list (Var 'var225810) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
30


testing @ utilities.rkt:2016
test-name:
"var_test_16"

expected-result:
30


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (var225810 . Integer) (var125809 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'var125809) (Reg 'rsp))
      (set (Var 'var125809) (Var 'var225810) (Reg 'rsp))
      (set (Var 'var125809) (Var 'var225810) (Reg 'rsp))
      (set (Reg 'rax) (Var 'var225810) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Var 'var125809)))
     (Instr 'movq (list (Imm 10) (Var 'var225810)))
     (Instr 'addq (list (Var 'var125809) (Var 'var225810)))
     (Instr 'movq (list (Var 'var125809) (Reg 'rax)))
     (Instr 'addq (list (Var 'var225810) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (var225810 . Integer) (var125809 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'var125809) (Reg 'rsp))
      (set (Var 'var125809) (Var 'var225810) (Reg 'rsp))
      (set (Var 'var125809) (Var 'var225810) (Reg 'rsp))
      (set (Reg 'rax) (Var 'var225810) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Var 'var125809)))
     (Instr 'movq (list (Imm 10) (Var 'var225810)))
     (Instr 'addq (list (Var 'var125809) (Var 'var225810)))
     (Instr 'movq (list (Var 'var125809) (Reg 'rax)))
     (Instr 'addq (list (Var 'var225810) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
30


testing @ utilities.rkt:2016
test-name:
"var_test_16"

expected-result:
30


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (var225810 . Integer) (var125809 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'var125809) (Reg 'rsp))
      (set (Var 'var125809) (Var 'var225810) (Reg 'rsp))
      (set (Var 'var125809) (Var 'var225810) (Reg 'rsp))
      (set (Reg 'rax) (Var 'var225810) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (var225810 . Integer) (var125809 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'var125809) (Reg 'rsp))
      (set (Var 'var125809) (Var 'var225810) (Reg 'rsp))
      (set (Var 'var125809) (Var 'var225810) (Reg 'rsp))
      (set (Reg 'rax) (Var 'var225810) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
30


testing @ utilities.rkt:2016
test-name:
"var_test_16"

expected-result:
30


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (var225810 . Integer) (var125809 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'var125809) (Reg 'rsp))
      (set (Var 'var125809) (Var 'var225810) (Reg 'rsp))
      (set (Var 'var125809) (Var 'var225810) (Reg 'rsp))
      (set (Reg 'rax) (Var 'var225810) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (var225810 . Integer) (var125809 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'var125809) (Reg 'rsp))
      (set (Var 'var125809) (Var 'var225810) (Reg 'rsp))
      (set (Var 'var125809) (Var 'var225810) (Reg 'rsp))
      (set (Reg 'rax) (Var 'var225810) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
30


testing @ utilities.rkt:2016
test-name:
"var_test_16"

expected-result:
30


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (var225810 . Integer) (var125809 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'var125809) (Reg 'rsp))
      (set (Var 'var125809) (Var 'var225810) (Reg 'rsp))
      (set (Var 'var125809) (Var 'var225810) (Reg 'rsp))
      (set (Reg 'rax) (Var 'var225810) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (var225810 . Integer) (var125809 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'var125809) (Reg 'rsp))
      (set (Var 'var125809) (Var 'var225810) (Reg 'rsp))
      (set (Var 'var125809) (Var 'var225810) (Reg 'rsp))
      (set (Reg 'rax) (Var 'var225810) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
30


testing @ utilities.rkt:2016
test-name:
"var_test_16"

expected-result:
30


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program '() (Let 'x (Prim 'read '()) (Prim '+ (list (Int 10) (Var 'x)))))


testing @ utilities.rkt:2016
test-name:
"var_test_17"

expected-result:
40


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Let 'x (Prim 'read '()) (Prim '+ (list (Int 10) (Var 'x)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Let 'x (Prim 'read '()) (Prim '+ (list (Int 10) (Var 'x)))))


output:  @ utilities.rkt:2042
result:
40


testing @ utilities.rkt:2016
test-name:
"var_test_17"

expected-result:
40


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let 'x25817 (Prim 'read '()) (Prim '+ (list (Int 10) (Var 'x25817)))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let 'x25817 (Prim 'read '()) (Prim '+ (list (Int 10) (Var 'x25817)))))


output:  @ utilities.rkt:2042
result:
40


testing @ utilities.rkt:2016
test-name:
"var_test_17"

expected-result:
40


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let 'x25817 (Prim 'read '()) (Prim '+ (list (Int 10) (Var 'x25817)))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let 'x25817 (Prim 'read '()) (Prim '+ (list (Int 10) (Var 'x25817)))))


output:  @ utilities.rkt:2042
result:
40


testing @ utilities.rkt:2016
test-name:
"var_test_17"

expected-result:
40


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let 'x25817 (Prim 'read '()) (Prim '+ (list (Int 10) (Var 'x25817)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let 'x25817 (Prim 'read '()) (Prim '+ (list (Int 10) (Var 'x25817)))))


output:  @ utilities.rkt:2042
result:
40


testing @ utilities.rkt:2016
test-name:
"var_test_17"

expected-result:
40


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'x25817) (Prim 'read '()))
    (Return (Prim '+ (list (Int 10) (Var 'x25817))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types (x25817 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'x25817) (Prim 'read '()))
    (Return (Prim '+ (list (Int 10) (Var 'x25817))))))))


output:  @ utilities.rkt:2042
result:
40


testing @ utilities.rkt:2016
test-name:
"var_test_17"

expected-result:
40


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types (x25817 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'x25817)))
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'addq (list (Var 'x25817) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types (x25817 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'x25817)))
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'addq (list (Var 'x25817) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
40


testing @ utilities.rkt:2016
test-name:
"var_test_17"

expected-result:
40


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x25817 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'x25817) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25817))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'x25817)))
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'addq (list (Var 'x25817) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x25817 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'x25817) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25817))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'x25817)))
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'addq (list (Var 'x25817) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
40


testing @ utilities.rkt:2016
test-name:
"var_test_17"

expected-result:
40


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x25817 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'x25817) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25817))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'x25817)))
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'addq (list (Var 'x25817) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x25817 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'x25817) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25817))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'x25817)))
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'addq (list (Var 'x25817) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
40


testing @ utilities.rkt:2016
test-name:
"var_test_17"

expected-result:
40


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x25817 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'x25817) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25817))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x25817 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'x25817) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25817))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
40


testing @ utilities.rkt:2016
test-name:
"var_test_17"

expected-result:
40


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x25817 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'x25817) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25817))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x25817 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'x25817) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25817))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
40


testing @ utilities.rkt:2016
test-name:
"var_test_17"

expected-result:
40


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x25817 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'x25817) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25817))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x25817 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'x25817) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25817))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
40


testing @ utilities.rkt:2016
test-name:
"var_test_17"

expected-result:
40


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Prim
  '+
  (list
   (Int 1)
   (Let
    'a
    (Int 2)
    (Prim
     '+
     (list
      (Var 'a)
      (Let
       'b
       (Int 2)
       (Prim
        '+
        (list
         (Var 'b)
         (Let
          'c
          (Int 2)
          (Prim
           '+
           (list
            (Var 'c)
            (Let
             'd
             (Int 2)
             (Prim
              '+
              (list
               (Var 'd)
               (Let
                'e
                (Int 2)
                (Prim
                 '+
                 (list
                  (Var 'e)
                  (Let
                   'f
                   (Int 2)
                   (Prim
                    '+
                    (list
                     (Var 'f)
                     (Let
                      'g
                      (Int 2)
                      (Prim
                       '+
                       (list
                        (Var 'g)
                        (Let
                         'h
                         (Int 2)
                         (Prim
                          '+
                          (list
                           (Var 'h)
                           (Let
                            'i
                            (Int 2)
                            (Prim
                             '+
                             (list
                              (Var 'i)
                              (Let
                               'j
                               (Int 2)
                               (Prim
                                '+
                                (list
                                 (Var 'j)
                                 (Let
                                  'k
                                  (Int 2)
                                  (Prim
                                   '+
                                   (list
                                    (Var 'k)
                                    (Let
                                     'l
                                     (Int 2)
                                     (Prim
                                      '+
                                      (list
                                       (Var 'l)
                                       (Let
                                        'm
                                        (Int 2)
                                        (Prim
                                         '+
                                         (list
                                          (Var 'm)
                                          (Let
                                           'n
                                           (Int 2)
                                           (Prim
                                            '+
                                            (list
                                             (Var 'n)
                                             (Let
                                              'o
                                              (Int 2)
                                              (Prim
                                               '+
                                               (list
                                                (Var 'o)
                                                (Let 'p (Int 2) (Var 'p))))))))))))))))))))))))))))))))))))))))))))))))))


testing @ utilities.rkt:2016
test-name:
"var_test_18"

expected-result:
33


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list
   (Int 1)
   (Let
    'a
    (Int 2)
    (Prim
     '+
     (list
      (Var 'a)
      (Let
       'b
       (Int 2)
       (Prim
        '+
        (list
         (Var 'b)
         (Let
          'c
          (Int 2)
          (Prim
           '+
           (list
            (Var 'c)
            (Let
             'd
             (Int 2)
             (Prim
              '+
              (list
               (Var 'd)
               (Let
                'e
                (Int 2)
                (Prim
                 '+
                 (list
                  (Var 'e)
                  (Let
                   'f
                   (Int 2)
                   (Prim
                    '+
                    (list
                     (Var 'f)
                     (Let
                      'g
                      (Int 2)
                      (Prim
                       '+
                       (list
                        (Var 'g)
                        (Let
                         'h
                         (Int 2)
                         (Prim
                          '+
                          (list
                           (Var 'h)
                           (Let
                            'i
                            (Int 2)
                            (Prim
                             '+
                             (list
                              (Var 'i)
                              (Let
                               'j
                               (Int 2)
                               (Prim
                                '+
                                (list
                                 (Var 'j)
                                 (Let
                                  'k
                                  (Int 2)
                                  (Prim
                                   '+
                                   (list
                                    (Var 'k)
                                    (Let
                                     'l
                                     (Int 2)
                                     (Prim
                                      '+
                                      (list
                                       (Var 'l)
                                       (Let
                                        'm
                                        (Int 2)
                                        (Prim
                                         '+
                                         (list
                                          (Var 'm)
                                          (Let
                                           'n
                                           (Int 2)
                                           (Prim
                                            '+
                                            (list
                                             (Var 'n)
                                             (Let
                                              'o
                                              (Int 2)
                                              (Prim
                                               '+
                                               (list
                                                (Var 'o)
                                                (Let 'p (Int 2) (Var 'p))))))))))))))))))))))))))))))))))))))))))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list
   (Int 1)
   (Let
    'a
    (Int 2)
    (Prim
     '+
     (list
      (Var 'a)
      (Let
       'b
       (Int 2)
       (Prim
        '+
        (list
         (Var 'b)
         (Let
          'c
          (Int 2)
          (Prim
           '+
           (list
            (Var 'c)
            (Let
             'd
             (Int 2)
             (Prim
              '+
              (list
               (Var 'd)
               (Let
                'e
                (Int 2)
                (Prim
                 '+
                 (list
                  (Var 'e)
                  (Let
                   'f
                   (Int 2)
                   (Prim
                    '+
                    (list
                     (Var 'f)
                     (Let
                      'g
                      (Int 2)
                      (Prim
                       '+
                       (list
                        (Var 'g)
                        (Let
                         'h
                         (Int 2)
                         (Prim
                          '+
                          (list
                           (Var 'h)
                           (Let
                            'i
                            (Int 2)
                            (Prim
                             '+
                             (list
                              (Var 'i)
                              (Let
                               'j
                               (Int 2)
                               (Prim
                                '+
                                (list
                                 (Var 'j)
                                 (Let
                                  'k
                                  (Int 2)
                                  (Prim
                                   '+
                                   (list
                                    (Var 'k)
                                    (Let
                                     'l
                                     (Int 2)
                                     (Prim
                                      '+
                                      (list
                                       (Var 'l)
                                       (Let
                                        'm
                                        (Int 2)
                                        (Prim
                                         '+
                                         (list
                                          (Var 'm)
                                          (Let
                                           'n
                                           (Int 2)
                                           (Prim
                                            '+
                                            (list
                                             (Var 'n)
                                             (Let
                                              'o
                                              (Int 2)
                                              (Prim
                                               '+
                                               (list
                                                (Var 'o)
                                                (Let 'p (Int 2) (Var 'p))))))))))))))))))))))))))))))))))))))))))))))))))


output:  @ utilities.rkt:2042
result:
33


testing @ utilities.rkt:2016
test-name:
"var_test_18"

expected-result:
33


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list
   (Int 1)
   (Let
    'a25824
    (Int 2)
    (Prim
     '+
     (list
      (Var 'a25824)
      (Let
       'b25825
       (Int 2)
       (Prim
        '+
        (list
         (Var 'b25825)
         (Let
          'c25826
          (Int 2)
          (Prim
           '+
           (list
            (Var 'c25826)
            (Let
             'd25827
             (Int 2)
             (Prim
              '+
              (list
               (Var 'd25827)
               (Let
                'e25828
                (Int 2)
                (Prim
                 '+
                 (list
                  (Var 'e25828)
                  (Let
                   'f25829
                   (Int 2)
                   (Prim
                    '+
                    (list
                     (Var 'f25829)
                     (Let
                      'g25830
                      (Int 2)
                      (Prim
                       '+
                       (list
                        (Var 'g25830)
                        (Let
                         'h25831
                         (Int 2)
                         (Prim
                          '+
                          (list
                           (Var 'h25831)
                           (Let
                            'i25832
                            (Int 2)
                            (Prim
                             '+
                             (list
                              (Var 'i25832)
                              (Let
                               'j25833
                               (Int 2)
                               (Prim
                                '+
                                (list
                                 (Var 'j25833)
                                 (Let
                                  'k25834
                                  (Int 2)
                                  (Prim
                                   '+
                                   (list
                                    (Var 'k25834)
                                    (Let
                                     'l25835
                                     (Int 2)
                                     (Prim
                                      '+
                                      (list
                                       (Var 'l25835)
                                       (Let
                                        'm25836
                                        (Int 2)
                                        (Prim
                                         '+
                                         (list
                                          (Var 'm25836)
                                          (Let
                                           'n25837
                                           (Int 2)
                                           (Prim
                                            '+
                                            (list
                                             (Var 'n25837)
                                             (Let
                                              'o25838
                                              (Int 2)
                                              (Prim
                                               '+
                                               (list
                                                (Var 'o25838)
                                                (Let
                                                 'p25839
                                                 (Int 2)
                                                 (Var 'p25839))))))))))))))))))))))))))))))))))))))))))))))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list
   (Int 1)
   (Let
    'a25824
    (Int 2)
    (Prim
     '+
     (list
      (Var 'a25824)
      (Let
       'b25825
       (Int 2)
       (Prim
        '+
        (list
         (Var 'b25825)
         (Let
          'c25826
          (Int 2)
          (Prim
           '+
           (list
            (Var 'c25826)
            (Let
             'd25827
             (Int 2)
             (Prim
              '+
              (list
               (Var 'd25827)
               (Let
                'e25828
                (Int 2)
                (Prim
                 '+
                 (list
                  (Var 'e25828)
                  (Let
                   'f25829
                   (Int 2)
                   (Prim
                    '+
                    (list
                     (Var 'f25829)
                     (Let
                      'g25830
                      (Int 2)
                      (Prim
                       '+
                       (list
                        (Var 'g25830)
                        (Let
                         'h25831
                         (Int 2)
                         (Prim
                          '+
                          (list
                           (Var 'h25831)
                           (Let
                            'i25832
                            (Int 2)
                            (Prim
                             '+
                             (list
                              (Var 'i25832)
                              (Let
                               'j25833
                               (Int 2)
                               (Prim
                                '+
                                (list
                                 (Var 'j25833)
                                 (Let
                                  'k25834
                                  (Int 2)
                                  (Prim
                                   '+
                                   (list
                                    (Var 'k25834)
                                    (Let
                                     'l25835
                                     (Int 2)
                                     (Prim
                                      '+
                                      (list
                                       (Var 'l25835)
                                       (Let
                                        'm25836
                                        (Int 2)
                                        (Prim
                                         '+
                                         (list
                                          (Var 'm25836)
                                          (Let
                                           'n25837
                                           (Int 2)
                                           (Prim
                                            '+
                                            (list
                                             (Var 'n25837)
                                             (Let
                                              'o25838
                                              (Int 2)
                                              (Prim
                                               '+
                                               (list
                                                (Var 'o25838)
                                                (Let
                                                 'p25839
                                                 (Int 2)
                                                 (Var 'p25839))))))))))))))))))))))))))))))))))))))))))))))))))


output:  @ utilities.rkt:2042
result:
33


testing @ utilities.rkt:2016
test-name:
"var_test_18"

expected-result:
33


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list
   (Int 1)
   (Let
    'a25824
    (Int 2)
    (Prim
     '+
     (list
      (Var 'a25824)
      (Let
       'b25825
       (Int 2)
       (Prim
        '+
        (list
         (Var 'b25825)
         (Let
          'c25826
          (Int 2)
          (Prim
           '+
           (list
            (Var 'c25826)
            (Let
             'd25827
             (Int 2)
             (Prim
              '+
              (list
               (Var 'd25827)
               (Let
                'e25828
                (Int 2)
                (Prim
                 '+
                 (list
                  (Var 'e25828)
                  (Let
                   'f25829
                   (Int 2)
                   (Prim
                    '+
                    (list
                     (Var 'f25829)
                     (Let
                      'g25830
                      (Int 2)
                      (Prim
                       '+
                       (list
                        (Var 'g25830)
                        (Let
                         'h25831
                         (Int 2)
                         (Prim
                          '+
                          (list
                           (Var 'h25831)
                           (Let
                            'i25832
                            (Int 2)
                            (Prim
                             '+
                             (list
                              (Var 'i25832)
                              (Let
                               'j25833
                               (Int 2)
                               (Prim
                                '+
                                (list
                                 (Var 'j25833)
                                 (Let
                                  'k25834
                                  (Int 2)
                                  (Prim
                                   '+
                                   (list
                                    (Var 'k25834)
                                    (Let
                                     'l25835
                                     (Int 2)
                                     (Prim
                                      '+
                                      (list
                                       (Var 'l25835)
                                       (Let
                                        'm25836
                                        (Int 2)
                                        (Prim
                                         '+
                                         (list
                                          (Var 'm25836)
                                          (Let
                                           'n25837
                                           (Int 2)
                                           (Prim
                                            '+
                                            (list
                                             (Var 'n25837)
                                             (Let
                                              'o25838
                                              (Int 2)
                                              (Prim
                                               '+
                                               (list
                                                (Var 'o25838)
                                                (Let
                                                 'p25839
                                                 (Int 2)
                                                 (Var 'p25839))))))))))))))))))))))))))))))))))))))))))))))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list
   (Int 1)
   (Let
    'a25824
    (Int 2)
    (Prim
     '+
     (list
      (Var 'a25824)
      (Let
       'b25825
       (Int 2)
       (Prim
        '+
        (list
         (Var 'b25825)
         (Let
          'c25826
          (Int 2)
          (Prim
           '+
           (list
            (Var 'c25826)
            (Let
             'd25827
             (Int 2)
             (Prim
              '+
              (list
               (Var 'd25827)
               (Let
                'e25828
                (Int 2)
                (Prim
                 '+
                 (list
                  (Var 'e25828)
                  (Let
                   'f25829
                   (Int 2)
                   (Prim
                    '+
                    (list
                     (Var 'f25829)
                     (Let
                      'g25830
                      (Int 2)
                      (Prim
                       '+
                       (list
                        (Var 'g25830)
                        (Let
                         'h25831
                         (Int 2)
                         (Prim
                          '+
                          (list
                           (Var 'h25831)
                           (Let
                            'i25832
                            (Int 2)
                            (Prim
                             '+
                             (list
                              (Var 'i25832)
                              (Let
                               'j25833
                               (Int 2)
                               (Prim
                                '+
                                (list
                                 (Var 'j25833)
                                 (Let
                                  'k25834
                                  (Int 2)
                                  (Prim
                                   '+
                                   (list
                                    (Var 'k25834)
                                    (Let
                                     'l25835
                                     (Int 2)
                                     (Prim
                                      '+
                                      (list
                                       (Var 'l25835)
                                       (Let
                                        'm25836
                                        (Int 2)
                                        (Prim
                                         '+
                                         (list
                                          (Var 'm25836)
                                          (Let
                                           'n25837
                                           (Int 2)
                                           (Prim
                                            '+
                                            (list
                                             (Var 'n25837)
                                             (Let
                                              'o25838
                                              (Int 2)
                                              (Prim
                                               '+
                                               (list
                                                (Var 'o25838)
                                                (Let
                                                 'p25839
                                                 (Int 2)
                                                 (Var 'p25839))))))))))))))))))))))))))))))))))))))))))))))))))


output:  @ utilities.rkt:2042
result:
33


testing @ utilities.rkt:2016
test-name:
"var_test_18"

expected-result:
33


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'a25824
  (Int 2)
  (Let
   'b25825
   (Int 2)
   (Let
    'c25826
    (Int 2)
    (Let
     'd25827
     (Int 2)
     (Let
      'e25828
      (Int 2)
      (Let
       'f25829
       (Int 2)
       (Let
        'g25830
        (Int 2)
        (Let
         'h25831
         (Int 2)
         (Let
          'i25832
          (Int 2)
          (Let
           'j25833
           (Int 2)
           (Let
            'k25834
            (Int 2)
            (Let
             'l25835
             (Int 2)
             (Let
              'm25836
              (Int 2)
              (Let
               'n25837
               (Int 2)
               (Let
                'o25838
                (Int 2)
                (Let
                 'p25839
                 (Int 2)
                 (Let
                  'g25854
                  (Prim '+ (list (Var 'o25838) (Var 'p25839)))
                  (Let
                   'g25853
                   (Prim '+ (list (Var 'n25837) (Var 'g25854)))
                   (Let
                    'g25852
                    (Prim '+ (list (Var 'm25836) (Var 'g25853)))
                    (Let
                     'g25851
                     (Prim '+ (list (Var 'l25835) (Var 'g25852)))
                     (Let
                      'g25850
                      (Prim '+ (list (Var 'k25834) (Var 'g25851)))
                      (Let
                       'g25849
                       (Prim '+ (list (Var 'j25833) (Var 'g25850)))
                       (Let
                        'g25848
                        (Prim '+ (list (Var 'i25832) (Var 'g25849)))
                        (Let
                         'g25847
                         (Prim '+ (list (Var 'h25831) (Var 'g25848)))
                         (Let
                          'g25846
                          (Prim '+ (list (Var 'g25830) (Var 'g25847)))
                          (Let
                           'g25845
                           (Prim '+ (list (Var 'f25829) (Var 'g25846)))
                           (Let
                            'g25844
                            (Prim '+ (list (Var 'e25828) (Var 'g25845)))
                            (Let
                             'g25843
                             (Prim '+ (list (Var 'd25827) (Var 'g25844)))
                             (Let
                              'g25842
                              (Prim '+ (list (Var 'c25826) (Var 'g25843)))
                              (Let
                               'g25841
                               (Prim '+ (list (Var 'b25825) (Var 'g25842)))
                               (Let
                                'g25840
                                (Prim '+ (list (Var 'a25824) (Var 'g25841)))
                                (Prim '+ (list (Int 1) (Var 'g25840)))))))))))))))))))))))))))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'a25824
  (Int 2)
  (Let
   'b25825
   (Int 2)
   (Let
    'c25826
    (Int 2)
    (Let
     'd25827
     (Int 2)
     (Let
      'e25828
      (Int 2)
      (Let
       'f25829
       (Int 2)
       (Let
        'g25830
        (Int 2)
        (Let
         'h25831
         (Int 2)
         (Let
          'i25832
          (Int 2)
          (Let
           'j25833
           (Int 2)
           (Let
            'k25834
            (Int 2)
            (Let
             'l25835
             (Int 2)
             (Let
              'm25836
              (Int 2)
              (Let
               'n25837
               (Int 2)
               (Let
                'o25838
                (Int 2)
                (Let
                 'p25839
                 (Int 2)
                 (Let
                  'g25854
                  (Prim '+ (list (Var 'o25838) (Var 'p25839)))
                  (Let
                   'g25853
                   (Prim '+ (list (Var 'n25837) (Var 'g25854)))
                   (Let
                    'g25852
                    (Prim '+ (list (Var 'm25836) (Var 'g25853)))
                    (Let
                     'g25851
                     (Prim '+ (list (Var 'l25835) (Var 'g25852)))
                     (Let
                      'g25850
                      (Prim '+ (list (Var 'k25834) (Var 'g25851)))
                      (Let
                       'g25849
                       (Prim '+ (list (Var 'j25833) (Var 'g25850)))
                       (Let
                        'g25848
                        (Prim '+ (list (Var 'i25832) (Var 'g25849)))
                        (Let
                         'g25847
                         (Prim '+ (list (Var 'h25831) (Var 'g25848)))
                         (Let
                          'g25846
                          (Prim '+ (list (Var 'g25830) (Var 'g25847)))
                          (Let
                           'g25845
                           (Prim '+ (list (Var 'f25829) (Var 'g25846)))
                           (Let
                            'g25844
                            (Prim '+ (list (Var 'e25828) (Var 'g25845)))
                            (Let
                             'g25843
                             (Prim '+ (list (Var 'd25827) (Var 'g25844)))
                             (Let
                              'g25842
                              (Prim '+ (list (Var 'c25826) (Var 'g25843)))
                              (Let
                               'g25841
                               (Prim '+ (list (Var 'b25825) (Var 'g25842)))
                               (Let
                                'g25840
                                (Prim '+ (list (Var 'a25824) (Var 'g25841)))
                                (Prim '+ (list (Int 1) (Var 'g25840)))))))))))))))))))))))))))))))))))


output:  @ utilities.rkt:2042
result:
33


testing @ utilities.rkt:2016
test-name:
"var_test_18"

expected-result:
33


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'a25824) (Int 2))
    (Seq
     (Assign (Var 'b25825) (Int 2))
     (Seq
      (Assign (Var 'c25826) (Int 2))
      (Seq
       (Assign (Var 'd25827) (Int 2))
       (Seq
        (Assign (Var 'e25828) (Int 2))
        (Seq
         (Assign (Var 'f25829) (Int 2))
         (Seq
          (Assign (Var 'g25830) (Int 2))
          (Seq
           (Assign (Var 'h25831) (Int 2))
           (Seq
            (Assign (Var 'i25832) (Int 2))
            (Seq
             (Assign (Var 'j25833) (Int 2))
             (Seq
              (Assign (Var 'k25834) (Int 2))
              (Seq
               (Assign (Var 'l25835) (Int 2))
               (Seq
                (Assign (Var 'm25836) (Int 2))
                (Seq
                 (Assign (Var 'n25837) (Int 2))
                 (Seq
                  (Assign (Var 'o25838) (Int 2))
                  (Seq
                   (Assign (Var 'p25839) (Int 2))
                   (Seq
                    (Assign
                     (Var 'g25854)
                     (Prim '+ (list (Var 'o25838) (Var 'p25839))))
                    (Seq
                     (Assign
                      (Var 'g25853)
                      (Prim '+ (list (Var 'n25837) (Var 'g25854))))
                     (Seq
                      (Assign
                       (Var 'g25852)
                       (Prim '+ (list (Var 'm25836) (Var 'g25853))))
                      (Seq
                       (Assign
                        (Var 'g25851)
                        (Prim '+ (list (Var 'l25835) (Var 'g25852))))
                       (Seq
                        (Assign
                         (Var 'g25850)
                         (Prim '+ (list (Var 'k25834) (Var 'g25851))))
                        (Seq
                         (Assign
                          (Var 'g25849)
                          (Prim '+ (list (Var 'j25833) (Var 'g25850))))
                         (Seq
                          (Assign
                           (Var 'g25848)
                           (Prim '+ (list (Var 'i25832) (Var 'g25849))))
                          (Seq
                           (Assign
                            (Var 'g25847)
                            (Prim '+ (list (Var 'h25831) (Var 'g25848))))
                           (Seq
                            (Assign
                             (Var 'g25846)
                             (Prim '+ (list (Var 'g25830) (Var 'g25847))))
                            (Seq
                             (Assign
                              (Var 'g25845)
                              (Prim '+ (list (Var 'f25829) (Var 'g25846))))
                             (Seq
                              (Assign
                               (Var 'g25844)
                               (Prim '+ (list (Var 'e25828) (Var 'g25845))))
                              (Seq
                               (Assign
                                (Var 'g25843)
                                (Prim '+ (list (Var 'd25827) (Var 'g25844))))
                               (Seq
                                (Assign
                                 (Var 'g25842)
                                 (Prim '+ (list (Var 'c25826) (Var 'g25843))))
                                (Seq
                                 (Assign
                                  (Var 'g25841)
                                  (Prim '+ (list (Var 'b25825) (Var 'g25842))))
                                 (Seq
                                  (Assign
                                   (Var 'g25840)
                                   (Prim '+ (list (Var 'a25824) (Var 'g25841))))
                                  (Return
                                   (Prim '+ (list (Int 1) (Var 'g25840))))))))))))))))))))))))))))))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types
    (g25844 . Integer)
    (g25843 . Integer)
    (g25842 . Integer)
    (g25841 . Integer)
    (g25848 . Integer)
    (g25847 . Integer)
    (g25846 . Integer)
    (g25845 . Integer)
    (m25836 . Integer)
    (l25835 . Integer)
    (k25834 . Integer)
    (j25833 . Integer)
    (g25840 . Integer)
    (p25839 . Integer)
    (o25838 . Integer)
    (n25837 . Integer)
    (e25828 . Integer)
    (d25827 . Integer)
    (c25826 . Integer)
    (b25825 . Integer)
    (i25832 . Integer)
    (h25831 . Integer)
    (g25830 . Integer)
    (f25829 . Integer)
    (g25852 . Integer)
    (g25851 . Integer)
    (g25850 . Integer)
    (g25849 . Integer)
    (a25824 . Integer)
    (g25854 . Integer)
    (g25853 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'a25824) (Int 2))
    (Seq
     (Assign (Var 'b25825) (Int 2))
     (Seq
      (Assign (Var 'c25826) (Int 2))
      (Seq
       (Assign (Var 'd25827) (Int 2))
       (Seq
        (Assign (Var 'e25828) (Int 2))
        (Seq
         (Assign (Var 'f25829) (Int 2))
         (Seq
          (Assign (Var 'g25830) (Int 2))
          (Seq
           (Assign (Var 'h25831) (Int 2))
           (Seq
            (Assign (Var 'i25832) (Int 2))
            (Seq
             (Assign (Var 'j25833) (Int 2))
             (Seq
              (Assign (Var 'k25834) (Int 2))
              (Seq
               (Assign (Var 'l25835) (Int 2))
               (Seq
                (Assign (Var 'm25836) (Int 2))
                (Seq
                 (Assign (Var 'n25837) (Int 2))
                 (Seq
                  (Assign (Var 'o25838) (Int 2))
                  (Seq
                   (Assign (Var 'p25839) (Int 2))
                   (Seq
                    (Assign
                     (Var 'g25854)
                     (Prim '+ (list (Var 'o25838) (Var 'p25839))))
                    (Seq
                     (Assign
                      (Var 'g25853)
                      (Prim '+ (list (Var 'n25837) (Var 'g25854))))
                     (Seq
                      (Assign
                       (Var 'g25852)
                       (Prim '+ (list (Var 'm25836) (Var 'g25853))))
                      (Seq
                       (Assign
                        (Var 'g25851)
                        (Prim '+ (list (Var 'l25835) (Var 'g25852))))
                       (Seq
                        (Assign
                         (Var 'g25850)
                         (Prim '+ (list (Var 'k25834) (Var 'g25851))))
                        (Seq
                         (Assign
                          (Var 'g25849)
                          (Prim '+ (list (Var 'j25833) (Var 'g25850))))
                         (Seq
                          (Assign
                           (Var 'g25848)
                           (Prim '+ (list (Var 'i25832) (Var 'g25849))))
                          (Seq
                           (Assign
                            (Var 'g25847)
                            (Prim '+ (list (Var 'h25831) (Var 'g25848))))
                           (Seq
                            (Assign
                             (Var 'g25846)
                             (Prim '+ (list (Var 'g25830) (Var 'g25847))))
                            (Seq
                             (Assign
                              (Var 'g25845)
                              (Prim '+ (list (Var 'f25829) (Var 'g25846))))
                             (Seq
                              (Assign
                               (Var 'g25844)
                               (Prim '+ (list (Var 'e25828) (Var 'g25845))))
                              (Seq
                               (Assign
                                (Var 'g25843)
                                (Prim '+ (list (Var 'd25827) (Var 'g25844))))
                               (Seq
                                (Assign
                                 (Var 'g25842)
                                 (Prim '+ (list (Var 'c25826) (Var 'g25843))))
                                (Seq
                                 (Assign
                                  (Var 'g25841)
                                  (Prim '+ (list (Var 'b25825) (Var 'g25842))))
                                 (Seq
                                  (Assign
                                   (Var 'g25840)
                                   (Prim '+ (list (Var 'a25824) (Var 'g25841))))
                                  (Return
                                   (Prim '+ (list (Int 1) (Var 'g25840))))))))))))))))))))))))))))))))))))))


output:  @ utilities.rkt:2042
result:
33


testing @ utilities.rkt:2016
test-name:
"var_test_18"

expected-result:
33


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (g25844 . Integer)
    (g25843 . Integer)
    (g25842 . Integer)
    (g25841 . Integer)
    (g25848 . Integer)
    (g25847 . Integer)
    (g25846 . Integer)
    (g25845 . Integer)
    (m25836 . Integer)
    (l25835 . Integer)
    (k25834 . Integer)
    (j25833 . Integer)
    (g25840 . Integer)
    (p25839 . Integer)
    (o25838 . Integer)
    (n25837 . Integer)
    (e25828 . Integer)
    (d25827 . Integer)
    (c25826 . Integer)
    (b25825 . Integer)
    (i25832 . Integer)
    (h25831 . Integer)
    (g25830 . Integer)
    (f25829 . Integer)
    (g25852 . Integer)
    (g25851 . Integer)
    (g25850 . Integer)
    (g25849 . Integer)
    (a25824 . Integer)
    (g25854 . Integer)
    (g25853 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 2) (Var 'a25824)))
     (Instr 'movq (list (Imm 2) (Var 'b25825)))
     (Instr 'movq (list (Imm 2) (Var 'c25826)))
     (Instr 'movq (list (Imm 2) (Var 'd25827)))
     (Instr 'movq (list (Imm 2) (Var 'e25828)))
     (Instr 'movq (list (Imm 2) (Var 'f25829)))
     (Instr 'movq (list (Imm 2) (Var 'g25830)))
     (Instr 'movq (list (Imm 2) (Var 'h25831)))
     (Instr 'movq (list (Imm 2) (Var 'i25832)))
     (Instr 'movq (list (Imm 2) (Var 'j25833)))
     (Instr 'movq (list (Imm 2) (Var 'k25834)))
     (Instr 'movq (list (Imm 2) (Var 'l25835)))
     (Instr 'movq (list (Imm 2) (Var 'm25836)))
     (Instr 'movq (list (Imm 2) (Var 'n25837)))
     (Instr 'movq (list (Imm 2) (Var 'o25838)))
     (Instr 'movq (list (Imm 2) (Var 'p25839)))
     (Instr 'movq (list (Var 'o25838) (Var 'g25854)))
     (Instr 'addq (list (Var 'p25839) (Var 'g25854)))
     (Instr 'movq (list (Var 'n25837) (Var 'g25853)))
     (Instr 'addq (list (Var 'g25854) (Var 'g25853)))
     (Instr 'movq (list (Var 'm25836) (Var 'g25852)))
     (Instr 'addq (list (Var 'g25853) (Var 'g25852)))
     (Instr 'movq (list (Var 'l25835) (Var 'g25851)))
     (Instr 'addq (list (Var 'g25852) (Var 'g25851)))
     (Instr 'movq (list (Var 'k25834) (Var 'g25850)))
     (Instr 'addq (list (Var 'g25851) (Var 'g25850)))
     (Instr 'movq (list (Var 'j25833) (Var 'g25849)))
     (Instr 'addq (list (Var 'g25850) (Var 'g25849)))
     (Instr 'movq (list (Var 'i25832) (Var 'g25848)))
     (Instr 'addq (list (Var 'g25849) (Var 'g25848)))
     (Instr 'movq (list (Var 'h25831) (Var 'g25847)))
     (Instr 'addq (list (Var 'g25848) (Var 'g25847)))
     (Instr 'movq (list (Var 'g25830) (Var 'g25846)))
     (Instr 'addq (list (Var 'g25847) (Var 'g25846)))
     (Instr 'movq (list (Var 'f25829) (Var 'g25845)))
     (Instr 'addq (list (Var 'g25846) (Var 'g25845)))
     (Instr 'movq (list (Var 'e25828) (Var 'g25844)))
     (Instr 'addq (list (Var 'g25845) (Var 'g25844)))
     (Instr 'movq (list (Var 'd25827) (Var 'g25843)))
     (Instr 'addq (list (Var 'g25844) (Var 'g25843)))
     (Instr 'movq (list (Var 'c25826) (Var 'g25842)))
     (Instr 'addq (list (Var 'g25843) (Var 'g25842)))
     (Instr 'movq (list (Var 'b25825) (Var 'g25841)))
     (Instr 'addq (list (Var 'g25842) (Var 'g25841)))
     (Instr 'movq (list (Var 'a25824) (Var 'g25840)))
     (Instr 'addq (list (Var 'g25841) (Var 'g25840)))
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25840) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (g25844 . Integer)
    (g25843 . Integer)
    (g25842 . Integer)
    (g25841 . Integer)
    (g25848 . Integer)
    (g25847 . Integer)
    (g25846 . Integer)
    (g25845 . Integer)
    (m25836 . Integer)
    (l25835 . Integer)
    (k25834 . Integer)
    (j25833 . Integer)
    (g25840 . Integer)
    (p25839 . Integer)
    (o25838 . Integer)
    (n25837 . Integer)
    (e25828 . Integer)
    (d25827 . Integer)
    (c25826 . Integer)
    (b25825 . Integer)
    (i25832 . Integer)
    (h25831 . Integer)
    (g25830 . Integer)
    (f25829 . Integer)
    (g25852 . Integer)
    (g25851 . Integer)
    (g25850 . Integer)
    (g25849 . Integer)
    (a25824 . Integer)
    (g25854 . Integer)
    (g25853 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 2) (Var 'a25824)))
     (Instr 'movq (list (Imm 2) (Var 'b25825)))
     (Instr 'movq (list (Imm 2) (Var 'c25826)))
     (Instr 'movq (list (Imm 2) (Var 'd25827)))
     (Instr 'movq (list (Imm 2) (Var 'e25828)))
     (Instr 'movq (list (Imm 2) (Var 'f25829)))
     (Instr 'movq (list (Imm 2) (Var 'g25830)))
     (Instr 'movq (list (Imm 2) (Var 'h25831)))
     (Instr 'movq (list (Imm 2) (Var 'i25832)))
     (Instr 'movq (list (Imm 2) (Var 'j25833)))
     (Instr 'movq (list (Imm 2) (Var 'k25834)))
     (Instr 'movq (list (Imm 2) (Var 'l25835)))
     (Instr 'movq (list (Imm 2) (Var 'm25836)))
     (Instr 'movq (list (Imm 2) (Var 'n25837)))
     (Instr 'movq (list (Imm 2) (Var 'o25838)))
     (Instr 'movq (list (Imm 2) (Var 'p25839)))
     (Instr 'movq (list (Var 'o25838) (Var 'g25854)))
     (Instr 'addq (list (Var 'p25839) (Var 'g25854)))
     (Instr 'movq (list (Var 'n25837) (Var 'g25853)))
     (Instr 'addq (list (Var 'g25854) (Var 'g25853)))
     (Instr 'movq (list (Var 'm25836) (Var 'g25852)))
     (Instr 'addq (list (Var 'g25853) (Var 'g25852)))
     (Instr 'movq (list (Var 'l25835) (Var 'g25851)))
     (Instr 'addq (list (Var 'g25852) (Var 'g25851)))
     (Instr 'movq (list (Var 'k25834) (Var 'g25850)))
     (Instr 'addq (list (Var 'g25851) (Var 'g25850)))
     (Instr 'movq (list (Var 'j25833) (Var 'g25849)))
     (Instr 'addq (list (Var 'g25850) (Var 'g25849)))
     (Instr 'movq (list (Var 'i25832) (Var 'g25848)))
     (Instr 'addq (list (Var 'g25849) (Var 'g25848)))
     (Instr 'movq (list (Var 'h25831) (Var 'g25847)))
     (Instr 'addq (list (Var 'g25848) (Var 'g25847)))
     (Instr 'movq (list (Var 'g25830) (Var 'g25846)))
     (Instr 'addq (list (Var 'g25847) (Var 'g25846)))
     (Instr 'movq (list (Var 'f25829) (Var 'g25845)))
     (Instr 'addq (list (Var 'g25846) (Var 'g25845)))
     (Instr 'movq (list (Var 'e25828) (Var 'g25844)))
     (Instr 'addq (list (Var 'g25845) (Var 'g25844)))
     (Instr 'movq (list (Var 'd25827) (Var 'g25843)))
     (Instr 'addq (list (Var 'g25844) (Var 'g25843)))
     (Instr 'movq (list (Var 'c25826) (Var 'g25842)))
     (Instr 'addq (list (Var 'g25843) (Var 'g25842)))
     (Instr 'movq (list (Var 'b25825) (Var 'g25841)))
     (Instr 'addq (list (Var 'g25842) (Var 'g25841)))
     (Instr 'movq (list (Var 'a25824) (Var 'g25840)))
     (Instr 'addq (list (Var 'g25841) (Var 'g25840)))
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25840) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
33


testing @ utilities.rkt:2016
test-name:
"var_test_18"

expected-result:
33


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25844 . Integer)
    (g25843 . Integer)
    (g25842 . Integer)
    (g25841 . Integer)
    (g25848 . Integer)
    (g25847 . Integer)
    (g25846 . Integer)
    (g25845 . Integer)
    (m25836 . Integer)
    (l25835 . Integer)
    (k25834 . Integer)
    (j25833 . Integer)
    (g25840 . Integer)
    (p25839 . Integer)
    (o25838 . Integer)
    (n25837 . Integer)
    (e25828 . Integer)
    (d25827 . Integer)
    (c25826 . Integer)
    (b25825 . Integer)
    (i25832 . Integer)
    (h25831 . Integer)
    (g25830 . Integer)
    (f25829 . Integer)
    (g25852 . Integer)
    (g25851 . Integer)
    (g25850 . Integer)
    (g25849 . Integer)
    (a25824 . Integer)
    (g25854 . Integer)
    (g25853 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'a25824) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Var 'd25827) (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'o25838)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'o25838)
       (Var 'p25839)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'g25854)
       (Var 'p25839)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'g25854)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'g25853)
       (Var 'g25854)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'g25853)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'g25852)
       (Var 'g25853)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'g25852)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'g25851)
       (Var 'g25852)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'g25851)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'g25850)
       (Var 'g25851)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'g25850)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'g25850)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'g25847)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'g25847)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25846)
       (Var 'g25847)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25846)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'g25845)
       (Var 'g25846)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'g25845)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'g25844)
       (Var 'g25845)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'g25844)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'g25843)
       (Var 'g25844)
       (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Var 'g25843) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'g25842) (Var 'g25843) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'g25842) (Reg 'rsp))
      (set (Var 'a25824) (Var 'g25841) (Var 'g25842) (Reg 'rsp))
      (set (Var 'a25824) (Var 'g25841) (Reg 'rsp))
      (set (Var 'g25840) (Var 'g25841) (Reg 'rsp))
      (set (Var 'g25840) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25840) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Var 'a25824)))
     (Instr 'movq (list (Imm 2) (Var 'b25825)))
     (Instr 'movq (list (Imm 2) (Var 'c25826)))
     (Instr 'movq (list (Imm 2) (Var 'd25827)))
     (Instr 'movq (list (Imm 2) (Var 'e25828)))
     (Instr 'movq (list (Imm 2) (Var 'f25829)))
     (Instr 'movq (list (Imm 2) (Var 'g25830)))
     (Instr 'movq (list (Imm 2) (Var 'h25831)))
     (Instr 'movq (list (Imm 2) (Var 'i25832)))
     (Instr 'movq (list (Imm 2) (Var 'j25833)))
     (Instr 'movq (list (Imm 2) (Var 'k25834)))
     (Instr 'movq (list (Imm 2) (Var 'l25835)))
     (Instr 'movq (list (Imm 2) (Var 'm25836)))
     (Instr 'movq (list (Imm 2) (Var 'n25837)))
     (Instr 'movq (list (Imm 2) (Var 'o25838)))
     (Instr 'movq (list (Imm 2) (Var 'p25839)))
     (Instr 'movq (list (Var 'o25838) (Var 'g25854)))
     (Instr 'addq (list (Var 'p25839) (Var 'g25854)))
     (Instr 'movq (list (Var 'n25837) (Var 'g25853)))
     (Instr 'addq (list (Var 'g25854) (Var 'g25853)))
     (Instr 'movq (list (Var 'm25836) (Var 'g25852)))
     (Instr 'addq (list (Var 'g25853) (Var 'g25852)))
     (Instr 'movq (list (Var 'l25835) (Var 'g25851)))
     (Instr 'addq (list (Var 'g25852) (Var 'g25851)))
     (Instr 'movq (list (Var 'k25834) (Var 'g25850)))
     (Instr 'addq (list (Var 'g25851) (Var 'g25850)))
     (Instr 'movq (list (Var 'j25833) (Var 'g25849)))
     (Instr 'addq (list (Var 'g25850) (Var 'g25849)))
     (Instr 'movq (list (Var 'i25832) (Var 'g25848)))
     (Instr 'addq (list (Var 'g25849) (Var 'g25848)))
     (Instr 'movq (list (Var 'h25831) (Var 'g25847)))
     (Instr 'addq (list (Var 'g25848) (Var 'g25847)))
     (Instr 'movq (list (Var 'g25830) (Var 'g25846)))
     (Instr 'addq (list (Var 'g25847) (Var 'g25846)))
     (Instr 'movq (list (Var 'f25829) (Var 'g25845)))
     (Instr 'addq (list (Var 'g25846) (Var 'g25845)))
     (Instr 'movq (list (Var 'e25828) (Var 'g25844)))
     (Instr 'addq (list (Var 'g25845) (Var 'g25844)))
     (Instr 'movq (list (Var 'd25827) (Var 'g25843)))
     (Instr 'addq (list (Var 'g25844) (Var 'g25843)))
     (Instr 'movq (list (Var 'c25826) (Var 'g25842)))
     (Instr 'addq (list (Var 'g25843) (Var 'g25842)))
     (Instr 'movq (list (Var 'b25825) (Var 'g25841)))
     (Instr 'addq (list (Var 'g25842) (Var 'g25841)))
     (Instr 'movq (list (Var 'a25824) (Var 'g25840)))
     (Instr 'addq (list (Var 'g25841) (Var 'g25840)))
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25840) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25844 . Integer)
    (g25843 . Integer)
    (g25842 . Integer)
    (g25841 . Integer)
    (g25848 . Integer)
    (g25847 . Integer)
    (g25846 . Integer)
    (g25845 . Integer)
    (m25836 . Integer)
    (l25835 . Integer)
    (k25834 . Integer)
    (j25833 . Integer)
    (g25840 . Integer)
    (p25839 . Integer)
    (o25838 . Integer)
    (n25837 . Integer)
    (e25828 . Integer)
    (d25827 . Integer)
    (c25826 . Integer)
    (b25825 . Integer)
    (i25832 . Integer)
    (h25831 . Integer)
    (g25830 . Integer)
    (f25829 . Integer)
    (g25852 . Integer)
    (g25851 . Integer)
    (g25850 . Integer)
    (g25849 . Integer)
    (a25824 . Integer)
    (g25854 . Integer)
    (g25853 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'a25824) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Var 'd25827) (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'o25838)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'o25838)
       (Var 'p25839)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'g25854)
       (Var 'p25839)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'g25854)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'g25853)
       (Var 'g25854)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'g25853)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'g25852)
       (Var 'g25853)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'g25852)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'g25851)
       (Var 'g25852)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'g25851)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'g25850)
       (Var 'g25851)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'g25850)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'g25850)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'g25847)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'g25847)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25846)
       (Var 'g25847)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25846)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'g25845)
       (Var 'g25846)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'g25845)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'g25844)
       (Var 'g25845)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'g25844)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'g25843)
       (Var 'g25844)
       (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Var 'g25843) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'g25842) (Var 'g25843) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'g25842) (Reg 'rsp))
      (set (Var 'a25824) (Var 'g25841) (Var 'g25842) (Reg 'rsp))
      (set (Var 'a25824) (Var 'g25841) (Reg 'rsp))
      (set (Var 'g25840) (Var 'g25841) (Reg 'rsp))
      (set (Var 'g25840) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25840) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Var 'a25824)))
     (Instr 'movq (list (Imm 2) (Var 'b25825)))
     (Instr 'movq (list (Imm 2) (Var 'c25826)))
     (Instr 'movq (list (Imm 2) (Var 'd25827)))
     (Instr 'movq (list (Imm 2) (Var 'e25828)))
     (Instr 'movq (list (Imm 2) (Var 'f25829)))
     (Instr 'movq (list (Imm 2) (Var 'g25830)))
     (Instr 'movq (list (Imm 2) (Var 'h25831)))
     (Instr 'movq (list (Imm 2) (Var 'i25832)))
     (Instr 'movq (list (Imm 2) (Var 'j25833)))
     (Instr 'movq (list (Imm 2) (Var 'k25834)))
     (Instr 'movq (list (Imm 2) (Var 'l25835)))
     (Instr 'movq (list (Imm 2) (Var 'm25836)))
     (Instr 'movq (list (Imm 2) (Var 'n25837)))
     (Instr 'movq (list (Imm 2) (Var 'o25838)))
     (Instr 'movq (list (Imm 2) (Var 'p25839)))
     (Instr 'movq (list (Var 'o25838) (Var 'g25854)))
     (Instr 'addq (list (Var 'p25839) (Var 'g25854)))
     (Instr 'movq (list (Var 'n25837) (Var 'g25853)))
     (Instr 'addq (list (Var 'g25854) (Var 'g25853)))
     (Instr 'movq (list (Var 'm25836) (Var 'g25852)))
     (Instr 'addq (list (Var 'g25853) (Var 'g25852)))
     (Instr 'movq (list (Var 'l25835) (Var 'g25851)))
     (Instr 'addq (list (Var 'g25852) (Var 'g25851)))
     (Instr 'movq (list (Var 'k25834) (Var 'g25850)))
     (Instr 'addq (list (Var 'g25851) (Var 'g25850)))
     (Instr 'movq (list (Var 'j25833) (Var 'g25849)))
     (Instr 'addq (list (Var 'g25850) (Var 'g25849)))
     (Instr 'movq (list (Var 'i25832) (Var 'g25848)))
     (Instr 'addq (list (Var 'g25849) (Var 'g25848)))
     (Instr 'movq (list (Var 'h25831) (Var 'g25847)))
     (Instr 'addq (list (Var 'g25848) (Var 'g25847)))
     (Instr 'movq (list (Var 'g25830) (Var 'g25846)))
     (Instr 'addq (list (Var 'g25847) (Var 'g25846)))
     (Instr 'movq (list (Var 'f25829) (Var 'g25845)))
     (Instr 'addq (list (Var 'g25846) (Var 'g25845)))
     (Instr 'movq (list (Var 'e25828) (Var 'g25844)))
     (Instr 'addq (list (Var 'g25845) (Var 'g25844)))
     (Instr 'movq (list (Var 'd25827) (Var 'g25843)))
     (Instr 'addq (list (Var 'g25844) (Var 'g25843)))
     (Instr 'movq (list (Var 'c25826) (Var 'g25842)))
     (Instr 'addq (list (Var 'g25843) (Var 'g25842)))
     (Instr 'movq (list (Var 'b25825) (Var 'g25841)))
     (Instr 'addq (list (Var 'g25842) (Var 'g25841)))
     (Instr 'movq (list (Var 'a25824) (Var 'g25840)))
     (Instr 'addq (list (Var 'g25841) (Var 'g25840)))
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25840) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
33


testing @ utilities.rkt:2016
test-name:
"var_test_18"

expected-result:
33


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25844 . Integer)
    (g25843 . Integer)
    (g25842 . Integer)
    (g25841 . Integer)
    (g25848 . Integer)
    (g25847 . Integer)
    (g25846 . Integer)
    (g25845 . Integer)
    (m25836 . Integer)
    (l25835 . Integer)
    (k25834 . Integer)
    (j25833 . Integer)
    (g25840 . Integer)
    (p25839 . Integer)
    (o25838 . Integer)
    (n25837 . Integer)
    (e25828 . Integer)
    (d25827 . Integer)
    (c25826 . Integer)
    (b25825 . Integer)
    (i25832 . Integer)
    (h25831 . Integer)
    (g25830 . Integer)
    (f25829 . Integer)
    (g25852 . Integer)
    (g25851 . Integer)
    (g25850 . Integer)
    (g25849 . Integer)
    (a25824 . Integer)
    (g25854 . Integer)
    (g25853 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'a25824) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Var 'd25827) (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'o25838)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'o25838)
       (Var 'p25839)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'g25854)
       (Var 'p25839)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'g25854)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'g25853)
       (Var 'g25854)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'g25853)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'g25852)
       (Var 'g25853)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'g25852)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'g25851)
       (Var 'g25852)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'g25851)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'g25850)
       (Var 'g25851)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'g25850)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'g25850)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'g25847)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'g25847)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25846)
       (Var 'g25847)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25846)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'g25845)
       (Var 'g25846)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'g25845)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'g25844)
       (Var 'g25845)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'g25844)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'g25843)
       (Var 'g25844)
       (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Var 'g25843) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'g25842) (Var 'g25843) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'g25842) (Reg 'rsp))
      (set (Var 'a25824) (Var 'g25841) (Var 'g25842) (Reg 'rsp))
      (set (Var 'a25824) (Var 'g25841) (Reg 'rsp))
      (set (Var 'g25840) (Var 'g25841) (Reg 'rsp))
      (set (Var 'g25840) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25840) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Var 'a25824)))
     (Instr 'movq (list (Imm 2) (Var 'b25825)))
     (Instr 'movq (list (Imm 2) (Var 'c25826)))
     (Instr 'movq (list (Imm 2) (Var 'd25827)))
     (Instr 'movq (list (Imm 2) (Var 'e25828)))
     (Instr 'movq (list (Imm 2) (Var 'f25829)))
     (Instr 'movq (list (Imm 2) (Var 'g25830)))
     (Instr 'movq (list (Imm 2) (Var 'h25831)))
     (Instr 'movq (list (Imm 2) (Var 'i25832)))
     (Instr 'movq (list (Imm 2) (Var 'j25833)))
     (Instr 'movq (list (Imm 2) (Var 'k25834)))
     (Instr 'movq (list (Imm 2) (Var 'l25835)))
     (Instr 'movq (list (Imm 2) (Var 'm25836)))
     (Instr 'movq (list (Imm 2) (Var 'n25837)))
     (Instr 'movq (list (Imm 2) (Var 'o25838)))
     (Instr 'movq (list (Imm 2) (Var 'p25839)))
     (Instr 'movq (list (Var 'o25838) (Var 'g25854)))
     (Instr 'addq (list (Var 'p25839) (Var 'g25854)))
     (Instr 'movq (list (Var 'n25837) (Var 'g25853)))
     (Instr 'addq (list (Var 'g25854) (Var 'g25853)))
     (Instr 'movq (list (Var 'm25836) (Var 'g25852)))
     (Instr 'addq (list (Var 'g25853) (Var 'g25852)))
     (Instr 'movq (list (Var 'l25835) (Var 'g25851)))
     (Instr 'addq (list (Var 'g25852) (Var 'g25851)))
     (Instr 'movq (list (Var 'k25834) (Var 'g25850)))
     (Instr 'addq (list (Var 'g25851) (Var 'g25850)))
     (Instr 'movq (list (Var 'j25833) (Var 'g25849)))
     (Instr 'addq (list (Var 'g25850) (Var 'g25849)))
     (Instr 'movq (list (Var 'i25832) (Var 'g25848)))
     (Instr 'addq (list (Var 'g25849) (Var 'g25848)))
     (Instr 'movq (list (Var 'h25831) (Var 'g25847)))
     (Instr 'addq (list (Var 'g25848) (Var 'g25847)))
     (Instr 'movq (list (Var 'g25830) (Var 'g25846)))
     (Instr 'addq (list (Var 'g25847) (Var 'g25846)))
     (Instr 'movq (list (Var 'f25829) (Var 'g25845)))
     (Instr 'addq (list (Var 'g25846) (Var 'g25845)))
     (Instr 'movq (list (Var 'e25828) (Var 'g25844)))
     (Instr 'addq (list (Var 'g25845) (Var 'g25844)))
     (Instr 'movq (list (Var 'd25827) (Var 'g25843)))
     (Instr 'addq (list (Var 'g25844) (Var 'g25843)))
     (Instr 'movq (list (Var 'c25826) (Var 'g25842)))
     (Instr 'addq (list (Var 'g25843) (Var 'g25842)))
     (Instr 'movq (list (Var 'b25825) (Var 'g25841)))
     (Instr 'addq (list (Var 'g25842) (Var 'g25841)))
     (Instr 'movq (list (Var 'a25824) (Var 'g25840)))
     (Instr 'addq (list (Var 'g25841) (Var 'g25840)))
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25840) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25844 . Integer)
    (g25843 . Integer)
    (g25842 . Integer)
    (g25841 . Integer)
    (g25848 . Integer)
    (g25847 . Integer)
    (g25846 . Integer)
    (g25845 . Integer)
    (m25836 . Integer)
    (l25835 . Integer)
    (k25834 . Integer)
    (j25833 . Integer)
    (g25840 . Integer)
    (p25839 . Integer)
    (o25838 . Integer)
    (n25837 . Integer)
    (e25828 . Integer)
    (d25827 . Integer)
    (c25826 . Integer)
    (b25825 . Integer)
    (i25832 . Integer)
    (h25831 . Integer)
    (g25830 . Integer)
    (f25829 . Integer)
    (g25852 . Integer)
    (g25851 . Integer)
    (g25850 . Integer)
    (g25849 . Integer)
    (a25824 . Integer)
    (g25854 . Integer)
    (g25853 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'a25824) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Var 'd25827) (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'o25838)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'o25838)
       (Var 'p25839)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'g25854)
       (Var 'p25839)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'g25854)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'g25853)
       (Var 'g25854)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'g25853)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'g25852)
       (Var 'g25853)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'g25852)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'g25851)
       (Var 'g25852)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'g25851)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'g25850)
       (Var 'g25851)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'g25850)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'g25850)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'g25847)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'g25847)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25846)
       (Var 'g25847)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25846)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'g25845)
       (Var 'g25846)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'g25845)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'g25844)
       (Var 'g25845)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'g25844)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'g25843)
       (Var 'g25844)
       (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Var 'g25843) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'g25842) (Var 'g25843) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'g25842) (Reg 'rsp))
      (set (Var 'a25824) (Var 'g25841) (Var 'g25842) (Reg 'rsp))
      (set (Var 'a25824) (Var 'g25841) (Reg 'rsp))
      (set (Var 'g25840) (Var 'g25841) (Reg 'rsp))
      (set (Var 'g25840) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25840) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Var 'a25824)))
     (Instr 'movq (list (Imm 2) (Var 'b25825)))
     (Instr 'movq (list (Imm 2) (Var 'c25826)))
     (Instr 'movq (list (Imm 2) (Var 'd25827)))
     (Instr 'movq (list (Imm 2) (Var 'e25828)))
     (Instr 'movq (list (Imm 2) (Var 'f25829)))
     (Instr 'movq (list (Imm 2) (Var 'g25830)))
     (Instr 'movq (list (Imm 2) (Var 'h25831)))
     (Instr 'movq (list (Imm 2) (Var 'i25832)))
     (Instr 'movq (list (Imm 2) (Var 'j25833)))
     (Instr 'movq (list (Imm 2) (Var 'k25834)))
     (Instr 'movq (list (Imm 2) (Var 'l25835)))
     (Instr 'movq (list (Imm 2) (Var 'm25836)))
     (Instr 'movq (list (Imm 2) (Var 'n25837)))
     (Instr 'movq (list (Imm 2) (Var 'o25838)))
     (Instr 'movq (list (Imm 2) (Var 'p25839)))
     (Instr 'movq (list (Var 'o25838) (Var 'g25854)))
     (Instr 'addq (list (Var 'p25839) (Var 'g25854)))
     (Instr 'movq (list (Var 'n25837) (Var 'g25853)))
     (Instr 'addq (list (Var 'g25854) (Var 'g25853)))
     (Instr 'movq (list (Var 'm25836) (Var 'g25852)))
     (Instr 'addq (list (Var 'g25853) (Var 'g25852)))
     (Instr 'movq (list (Var 'l25835) (Var 'g25851)))
     (Instr 'addq (list (Var 'g25852) (Var 'g25851)))
     (Instr 'movq (list (Var 'k25834) (Var 'g25850)))
     (Instr 'addq (list (Var 'g25851) (Var 'g25850)))
     (Instr 'movq (list (Var 'j25833) (Var 'g25849)))
     (Instr 'addq (list (Var 'g25850) (Var 'g25849)))
     (Instr 'movq (list (Var 'i25832) (Var 'g25848)))
     (Instr 'addq (list (Var 'g25849) (Var 'g25848)))
     (Instr 'movq (list (Var 'h25831) (Var 'g25847)))
     (Instr 'addq (list (Var 'g25848) (Var 'g25847)))
     (Instr 'movq (list (Var 'g25830) (Var 'g25846)))
     (Instr 'addq (list (Var 'g25847) (Var 'g25846)))
     (Instr 'movq (list (Var 'f25829) (Var 'g25845)))
     (Instr 'addq (list (Var 'g25846) (Var 'g25845)))
     (Instr 'movq (list (Var 'e25828) (Var 'g25844)))
     (Instr 'addq (list (Var 'g25845) (Var 'g25844)))
     (Instr 'movq (list (Var 'd25827) (Var 'g25843)))
     (Instr 'addq (list (Var 'g25844) (Var 'g25843)))
     (Instr 'movq (list (Var 'c25826) (Var 'g25842)))
     (Instr 'addq (list (Var 'g25843) (Var 'g25842)))
     (Instr 'movq (list (Var 'b25825) (Var 'g25841)))
     (Instr 'addq (list (Var 'g25842) (Var 'g25841)))
     (Instr 'movq (list (Var 'a25824) (Var 'g25840)))
     (Instr 'addq (list (Var 'g25841) (Var 'g25840)))
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25840) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
33


testing @ utilities.rkt:2016
test-name:
"var_test_18"

expected-result:
33


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25844 . Integer)
    (g25843 . Integer)
    (g25842 . Integer)
    (g25841 . Integer)
    (g25848 . Integer)
    (g25847 . Integer)
    (g25846 . Integer)
    (g25845 . Integer)
    (m25836 . Integer)
    (l25835 . Integer)
    (k25834 . Integer)
    (j25833 . Integer)
    (g25840 . Integer)
    (p25839 . Integer)
    (o25838 . Integer)
    (n25837 . Integer)
    (e25828 . Integer)
    (d25827 . Integer)
    (c25826 . Integer)
    (b25825 . Integer)
    (i25832 . Integer)
    (h25831 . Integer)
    (g25830 . Integer)
    (f25829 . Integer)
    (g25852 . Integer)
    (g25851 . Integer)
    (g25850 . Integer)
    (g25849 . Integer)
    (a25824 . Integer)
    (g25854 . Integer)
    (g25853 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 32)
  (list
   'used-callee
   (Reg 'r15)
   (Reg 'r13)
   (Reg 'rbx)
   (Reg 'rbx)
   (Reg 'r14)
   (Reg 'r12)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'a25824) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Var 'd25827) (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'o25838)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'o25838)
       (Var 'p25839)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'g25854)
       (Var 'p25839)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'g25854)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'g25853)
       (Var 'g25854)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'g25853)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'g25852)
       (Var 'g25853)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'g25852)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'g25851)
       (Var 'g25852)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'g25851)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'g25850)
       (Var 'g25851)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'g25850)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'g25850)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'g25847)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'g25847)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25846)
       (Var 'g25847)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25846)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'g25845)
       (Var 'g25846)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'g25845)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'g25844)
       (Var 'g25845)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'g25844)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'g25843)
       (Var 'g25844)
       (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Var 'g25843) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'g25842) (Var 'g25843) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'g25842) (Reg 'rsp))
      (set (Var 'a25824) (Var 'g25841) (Var 'g25842) (Reg 'rsp))
      (set (Var 'a25824) (Var 'g25841) (Reg 'rsp))
      (set (Var 'g25840) (Var 'g25841) (Reg 'rsp))
      (set (Var 'g25840) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25840) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rbx)))
     (Instr 'movq (list (Imm 2) (Reg 'rdi)))
     (Instr 'movq (list (Imm 2) (Deref 'rbp -64)))
     (Instr 'movq (list (Imm 2) (Reg 'r14)))
     (Instr 'movq (list (Imm 2) (Reg 'r12)))
     (Instr 'movq (list (Imm 2) (Reg 'r10)))
     (Instr 'movq (list (Imm 2) (Reg 'r9)))
     (Instr 'movq (list (Imm 2) (Reg 'r8)))
     (Instr 'movq (list (Imm 2) (Reg 'rcx)))
     (Instr 'movq (list (Imm 2) (Deref 'rbp -72)))
     (Instr 'movq (list (Imm 2) (Reg 'r15)))
     (Instr 'movq (list (Imm 2) (Reg 'r13)))
     (Instr 'movq (list (Imm 2) (Reg 'r11)))
     (Instr 'movq (list (Imm 2) (Reg 'rsi)))
     (Instr 'movq (list (Imm 2) (Reg 'rdx)))
     (Instr 'movq (list (Imm 2) (Deref 'rbp -80)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rdx)))
     (Instr 'addq (list (Deref 'rbp -80) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'rsi) (Reg 'rsi)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rsi)))
     (Instr 'movq (list (Reg 'r11) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'r13) (Reg 'rsi)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rsi)))
     (Instr 'movq (list (Reg 'r15) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rdx)))
     (Instr 'movq (list (Deref 'rbp -72) (Reg 'rsi)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rsi)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'r8) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'r9) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'r10) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'r12) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'r14) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'movq (list (Deref 'rbp -64) (Reg 'rsi)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rsi)))
     (Instr 'movq (list (Reg 'rdi) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25844 . Integer)
    (g25843 . Integer)
    (g25842 . Integer)
    (g25841 . Integer)
    (g25848 . Integer)
    (g25847 . Integer)
    (g25846 . Integer)
    (g25845 . Integer)
    (m25836 . Integer)
    (l25835 . Integer)
    (k25834 . Integer)
    (j25833 . Integer)
    (g25840 . Integer)
    (p25839 . Integer)
    (o25838 . Integer)
    (n25837 . Integer)
    (e25828 . Integer)
    (d25827 . Integer)
    (c25826 . Integer)
    (b25825 . Integer)
    (i25832 . Integer)
    (h25831 . Integer)
    (g25830 . Integer)
    (f25829 . Integer)
    (g25852 . Integer)
    (g25851 . Integer)
    (g25850 . Integer)
    (g25849 . Integer)
    (a25824 . Integer)
    (g25854 . Integer)
    (g25853 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 32)
  (list
   'used-callee
   (Reg 'r15)
   (Reg 'r13)
   (Reg 'rbx)
   (Reg 'rbx)
   (Reg 'r14)
   (Reg 'r12)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'a25824) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Var 'd25827) (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'o25838)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'o25838)
       (Var 'p25839)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'g25854)
       (Var 'p25839)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'g25854)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'g25853)
       (Var 'g25854)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'g25853)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'g25852)
       (Var 'g25853)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'g25852)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'g25851)
       (Var 'g25852)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'g25851)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'g25850)
       (Var 'g25851)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'g25850)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'g25850)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'g25847)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'g25847)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25846)
       (Var 'g25847)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25846)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'g25845)
       (Var 'g25846)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'g25845)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'g25844)
       (Var 'g25845)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'g25844)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'g25843)
       (Var 'g25844)
       (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Var 'g25843) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'g25842) (Var 'g25843) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'g25842) (Reg 'rsp))
      (set (Var 'a25824) (Var 'g25841) (Var 'g25842) (Reg 'rsp))
      (set (Var 'a25824) (Var 'g25841) (Reg 'rsp))
      (set (Var 'g25840) (Var 'g25841) (Reg 'rsp))
      (set (Var 'g25840) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25840) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rbx)))
     (Instr 'movq (list (Imm 2) (Reg 'rdi)))
     (Instr 'movq (list (Imm 2) (Deref 'rbp -64)))
     (Instr 'movq (list (Imm 2) (Reg 'r14)))
     (Instr 'movq (list (Imm 2) (Reg 'r12)))
     (Instr 'movq (list (Imm 2) (Reg 'r10)))
     (Instr 'movq (list (Imm 2) (Reg 'r9)))
     (Instr 'movq (list (Imm 2) (Reg 'r8)))
     (Instr 'movq (list (Imm 2) (Reg 'rcx)))
     (Instr 'movq (list (Imm 2) (Deref 'rbp -72)))
     (Instr 'movq (list (Imm 2) (Reg 'r15)))
     (Instr 'movq (list (Imm 2) (Reg 'r13)))
     (Instr 'movq (list (Imm 2) (Reg 'r11)))
     (Instr 'movq (list (Imm 2) (Reg 'rsi)))
     (Instr 'movq (list (Imm 2) (Reg 'rdx)))
     (Instr 'movq (list (Imm 2) (Deref 'rbp -80)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rdx)))
     (Instr 'addq (list (Deref 'rbp -80) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'rsi) (Reg 'rsi)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rsi)))
     (Instr 'movq (list (Reg 'r11) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'r13) (Reg 'rsi)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rsi)))
     (Instr 'movq (list (Reg 'r15) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rdx)))
     (Instr 'movq (list (Deref 'rbp -72) (Reg 'rsi)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rsi)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'r8) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'r9) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'r10) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'r12) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'r14) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'movq (list (Deref 'rbp -64) (Reg 'rsi)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rsi)))
     (Instr 'movq (list (Reg 'rdi) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
33


testing @ utilities.rkt:2016
test-name:
"var_test_18"

expected-result:
33


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25844 . Integer)
    (g25843 . Integer)
    (g25842 . Integer)
    (g25841 . Integer)
    (g25848 . Integer)
    (g25847 . Integer)
    (g25846 . Integer)
    (g25845 . Integer)
    (m25836 . Integer)
    (l25835 . Integer)
    (k25834 . Integer)
    (j25833 . Integer)
    (g25840 . Integer)
    (p25839 . Integer)
    (o25838 . Integer)
    (n25837 . Integer)
    (e25828 . Integer)
    (d25827 . Integer)
    (c25826 . Integer)
    (b25825 . Integer)
    (i25832 . Integer)
    (h25831 . Integer)
    (g25830 . Integer)
    (f25829 . Integer)
    (g25852 . Integer)
    (g25851 . Integer)
    (g25850 . Integer)
    (g25849 . Integer)
    (a25824 . Integer)
    (g25854 . Integer)
    (g25853 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 32)
  (list
   'used-callee
   (Reg 'r15)
   (Reg 'r13)
   (Reg 'rbx)
   (Reg 'rbx)
   (Reg 'r14)
   (Reg 'r12)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'a25824) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Var 'd25827) (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'o25838)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'o25838)
       (Var 'p25839)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'g25854)
       (Var 'p25839)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'g25854)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'g25853)
       (Var 'g25854)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'g25853)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'g25852)
       (Var 'g25853)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'g25852)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'g25851)
       (Var 'g25852)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'g25851)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'g25850)
       (Var 'g25851)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'g25850)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'g25850)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'g25847)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'g25847)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25846)
       (Var 'g25847)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25846)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'g25845)
       (Var 'g25846)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'g25845)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'g25844)
       (Var 'g25845)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'g25844)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'g25843)
       (Var 'g25844)
       (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Var 'g25843) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'g25842) (Var 'g25843) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'g25842) (Reg 'rsp))
      (set (Var 'a25824) (Var 'g25841) (Var 'g25842) (Reg 'rsp))
      (set (Var 'a25824) (Var 'g25841) (Reg 'rsp))
      (set (Var 'g25840) (Var 'g25841) (Reg 'rsp))
      (set (Var 'g25840) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25840) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rbx)))
     (Instr 'movq (list (Imm 2) (Reg 'rdi)))
     (Instr 'movq (list (Imm 2) (Deref 'rbp -64)))
     (Instr 'movq (list (Imm 2) (Reg 'r14)))
     (Instr 'movq (list (Imm 2) (Reg 'r12)))
     (Instr 'movq (list (Imm 2) (Reg 'r10)))
     (Instr 'movq (list (Imm 2) (Reg 'r9)))
     (Instr 'movq (list (Imm 2) (Reg 'r8)))
     (Instr 'movq (list (Imm 2) (Reg 'rcx)))
     (Instr 'movq (list (Imm 2) (Deref 'rbp -72)))
     (Instr 'movq (list (Imm 2) (Reg 'r15)))
     (Instr 'movq (list (Imm 2) (Reg 'r13)))
     (Instr 'movq (list (Imm 2) (Reg 'r11)))
     (Instr 'movq (list (Imm 2) (Reg 'rsi)))
     (Instr 'movq (list (Imm 2) (Reg 'rdx)))
     (Instr 'movq (list (Imm 2) (Deref 'rbp -80)))
     (Instr 'addq (list (Deref 'rbp -80) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rsi)))
     (Instr 'movq (list (Reg 'r11) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'r13) (Reg 'rsi)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rsi)))
     (Instr 'movq (list (Reg 'r15) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rdx)))
     (Instr 'movq (list (Deref 'rbp -72) (Reg 'rsi)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rsi)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'r8) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'r9) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'r10) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'r12) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'r14) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'movq (list (Deref 'rbp -64) (Reg 'rsi)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rsi)))
     (Instr 'movq (list (Reg 'rdi) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25844 . Integer)
    (g25843 . Integer)
    (g25842 . Integer)
    (g25841 . Integer)
    (g25848 . Integer)
    (g25847 . Integer)
    (g25846 . Integer)
    (g25845 . Integer)
    (m25836 . Integer)
    (l25835 . Integer)
    (k25834 . Integer)
    (j25833 . Integer)
    (g25840 . Integer)
    (p25839 . Integer)
    (o25838 . Integer)
    (n25837 . Integer)
    (e25828 . Integer)
    (d25827 . Integer)
    (c25826 . Integer)
    (b25825 . Integer)
    (i25832 . Integer)
    (h25831 . Integer)
    (g25830 . Integer)
    (f25829 . Integer)
    (g25852 . Integer)
    (g25851 . Integer)
    (g25850 . Integer)
    (g25849 . Integer)
    (a25824 . Integer)
    (g25854 . Integer)
    (g25853 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 32)
  (list
   'used-callee
   (Reg 'r15)
   (Reg 'r13)
   (Reg 'rbx)
   (Reg 'rbx)
   (Reg 'r14)
   (Reg 'r12)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'a25824) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Var 'd25827) (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'o25838)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'o25838)
       (Var 'p25839)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'g25854)
       (Var 'p25839)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'g25854)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'g25853)
       (Var 'g25854)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'g25853)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'g25852)
       (Var 'g25853)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'g25852)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'g25851)
       (Var 'g25852)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'g25851)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'g25850)
       (Var 'g25851)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'g25850)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'g25850)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'g25847)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'g25847)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25846)
       (Var 'g25847)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25846)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'g25845)
       (Var 'g25846)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'g25845)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'g25844)
       (Var 'g25845)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'g25844)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'g25843)
       (Var 'g25844)
       (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Var 'g25843) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'g25842) (Var 'g25843) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'g25842) (Reg 'rsp))
      (set (Var 'a25824) (Var 'g25841) (Var 'g25842) (Reg 'rsp))
      (set (Var 'a25824) (Var 'g25841) (Reg 'rsp))
      (set (Var 'g25840) (Var 'g25841) (Reg 'rsp))
      (set (Var 'g25840) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25840) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rbx)))
     (Instr 'movq (list (Imm 2) (Reg 'rdi)))
     (Instr 'movq (list (Imm 2) (Deref 'rbp -64)))
     (Instr 'movq (list (Imm 2) (Reg 'r14)))
     (Instr 'movq (list (Imm 2) (Reg 'r12)))
     (Instr 'movq (list (Imm 2) (Reg 'r10)))
     (Instr 'movq (list (Imm 2) (Reg 'r9)))
     (Instr 'movq (list (Imm 2) (Reg 'r8)))
     (Instr 'movq (list (Imm 2) (Reg 'rcx)))
     (Instr 'movq (list (Imm 2) (Deref 'rbp -72)))
     (Instr 'movq (list (Imm 2) (Reg 'r15)))
     (Instr 'movq (list (Imm 2) (Reg 'r13)))
     (Instr 'movq (list (Imm 2) (Reg 'r11)))
     (Instr 'movq (list (Imm 2) (Reg 'rsi)))
     (Instr 'movq (list (Imm 2) (Reg 'rdx)))
     (Instr 'movq (list (Imm 2) (Deref 'rbp -80)))
     (Instr 'addq (list (Deref 'rbp -80) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rsi)))
     (Instr 'movq (list (Reg 'r11) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'r13) (Reg 'rsi)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rsi)))
     (Instr 'movq (list (Reg 'r15) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rdx)))
     (Instr 'movq (list (Deref 'rbp -72) (Reg 'rsi)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rsi)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'r8) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'r9) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'r10) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'r12) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'r14) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'movq (list (Deref 'rbp -64) (Reg 'rsi)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rsi)))
     (Instr 'movq (list (Reg 'rdi) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
33


testing @ utilities.rkt:2016
test-name:
"var_test_18"

expected-result:
33


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25844 . Integer)
    (g25843 . Integer)
    (g25842 . Integer)
    (g25841 . Integer)
    (g25848 . Integer)
    (g25847 . Integer)
    (g25846 . Integer)
    (g25845 . Integer)
    (m25836 . Integer)
    (l25835 . Integer)
    (k25834 . Integer)
    (j25833 . Integer)
    (g25840 . Integer)
    (p25839 . Integer)
    (o25838 . Integer)
    (n25837 . Integer)
    (e25828 . Integer)
    (d25827 . Integer)
    (c25826 . Integer)
    (b25825 . Integer)
    (i25832 . Integer)
    (h25831 . Integer)
    (g25830 . Integer)
    (f25829 . Integer)
    (g25852 . Integer)
    (g25851 . Integer)
    (g25850 . Integer)
    (g25849 . Integer)
    (a25824 . Integer)
    (g25854 . Integer)
    (g25853 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 32)
  (list
   'used-callee
   (Reg 'r15)
   (Reg 'r13)
   (Reg 'rbx)
   (Reg 'rbx)
   (Reg 'r14)
   (Reg 'r12)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'r15)))
     (Instr 'pushq (list (Reg 'r13)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'r14)))
     (Instr 'pushq (list (Reg 'r12)))
     (Instr 'subq (list (Imm 32) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'a25824) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Var 'd25827) (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'o25838)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'o25838)
       (Var 'p25839)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'g25854)
       (Var 'p25839)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'g25854)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'g25853)
       (Var 'g25854)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'g25853)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'g25852)
       (Var 'g25853)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'g25852)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'g25851)
       (Var 'g25852)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'g25851)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'g25850)
       (Var 'g25851)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'g25850)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'g25850)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'g25847)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'g25847)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25846)
       (Var 'g25847)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25846)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'g25845)
       (Var 'g25846)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'g25845)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'g25844)
       (Var 'g25845)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'g25844)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'g25843)
       (Var 'g25844)
       (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Var 'g25843) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'g25842) (Var 'g25843) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'g25842) (Reg 'rsp))
      (set (Var 'a25824) (Var 'g25841) (Var 'g25842) (Reg 'rsp))
      (set (Var 'a25824) (Var 'g25841) (Reg 'rsp))
      (set (Var 'g25840) (Var 'g25841) (Reg 'rsp))
      (set (Var 'g25840) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25840) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rbx)))
     (Instr 'movq (list (Imm 2) (Reg 'rdi)))
     (Instr 'movq (list (Imm 2) (Deref 'rbp -64)))
     (Instr 'movq (list (Imm 2) (Reg 'r14)))
     (Instr 'movq (list (Imm 2) (Reg 'r12)))
     (Instr 'movq (list (Imm 2) (Reg 'r10)))
     (Instr 'movq (list (Imm 2) (Reg 'r9)))
     (Instr 'movq (list (Imm 2) (Reg 'r8)))
     (Instr 'movq (list (Imm 2) (Reg 'rcx)))
     (Instr 'movq (list (Imm 2) (Deref 'rbp -72)))
     (Instr 'movq (list (Imm 2) (Reg 'r15)))
     (Instr 'movq (list (Imm 2) (Reg 'r13)))
     (Instr 'movq (list (Imm 2) (Reg 'r11)))
     (Instr 'movq (list (Imm 2) (Reg 'rsi)))
     (Instr 'movq (list (Imm 2) (Reg 'rdx)))
     (Instr 'movq (list (Imm 2) (Deref 'rbp -80)))
     (Instr 'addq (list (Deref 'rbp -80) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rsi)))
     (Instr 'movq (list (Reg 'r11) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'r13) (Reg 'rsi)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rsi)))
     (Instr 'movq (list (Reg 'r15) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rdx)))
     (Instr 'movq (list (Deref 'rbp -72) (Reg 'rsi)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rsi)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'r8) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'r9) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'r10) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'r12) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'r14) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'movq (list (Deref 'rbp -64) (Reg 'rsi)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rsi)))
     (Instr 'movq (list (Reg 'rdi) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 32) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'r15)))
     (Instr 'popq (list (Reg 'r13)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'r14)))
     (Instr 'popq (list (Reg 'r12)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25844 . Integer)
    (g25843 . Integer)
    (g25842 . Integer)
    (g25841 . Integer)
    (g25848 . Integer)
    (g25847 . Integer)
    (g25846 . Integer)
    (g25845 . Integer)
    (m25836 . Integer)
    (l25835 . Integer)
    (k25834 . Integer)
    (j25833 . Integer)
    (g25840 . Integer)
    (p25839 . Integer)
    (o25838 . Integer)
    (n25837 . Integer)
    (e25828 . Integer)
    (d25827 . Integer)
    (c25826 . Integer)
    (b25825 . Integer)
    (i25832 . Integer)
    (h25831 . Integer)
    (g25830 . Integer)
    (f25829 . Integer)
    (g25852 . Integer)
    (g25851 . Integer)
    (g25850 . Integer)
    (g25849 . Integer)
    (a25824 . Integer)
    (g25854 . Integer)
    (g25853 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 32)
  (list
   'used-callee
   (Reg 'r15)
   (Reg 'r13)
   (Reg 'rbx)
   (Reg 'rbx)
   (Reg 'r14)
   (Reg 'r12)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'r15)))
     (Instr 'pushq (list (Reg 'r13)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'r14)))
     (Instr 'pushq (list (Reg 'r12)))
     (Instr 'subq (list (Imm 32) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'a25824) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Var 'd25827) (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'o25838)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'o25838)
       (Var 'p25839)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'g25854)
       (Var 'p25839)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'n25837)
       (Var 'g25854)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'g25853)
       (Var 'g25854)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'm25836)
       (Var 'g25853)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'g25852)
       (Var 'g25853)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'l25835)
       (Var 'g25852)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'g25851)
       (Var 'g25852)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'k25834)
       (Var 'g25851)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'g25850)
       (Var 'g25851)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'j25833)
       (Var 'g25850)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'g25850)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Var 'i25832)
       (Reg 'rsp))
      (set
       (Var 'g25849)
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'h25831)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'g25847)
       (Reg 'rsp)
       (Var 'g25848))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25830)
       (Var 'g25847)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25846)
       (Var 'g25847)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'f25829)
       (Var 'g25846)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'g25845)
       (Var 'g25846)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'e25828)
       (Var 'g25845)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'g25844)
       (Var 'g25845)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'd25827)
       (Var 'g25844)
       (Reg 'rsp))
      (set
       (Var 'a25824)
       (Var 'b25825)
       (Var 'c25826)
       (Var 'g25843)
       (Var 'g25844)
       (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'c25826) (Var 'g25843) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'g25842) (Var 'g25843) (Reg 'rsp))
      (set (Var 'a25824) (Var 'b25825) (Var 'g25842) (Reg 'rsp))
      (set (Var 'a25824) (Var 'g25841) (Var 'g25842) (Reg 'rsp))
      (set (Var 'a25824) (Var 'g25841) (Reg 'rsp))
      (set (Var 'g25840) (Var 'g25841) (Reg 'rsp))
      (set (Var 'g25840) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25840) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rbx)))
     (Instr 'movq (list (Imm 2) (Reg 'rdi)))
     (Instr 'movq (list (Imm 2) (Deref 'rbp -64)))
     (Instr 'movq (list (Imm 2) (Reg 'r14)))
     (Instr 'movq (list (Imm 2) (Reg 'r12)))
     (Instr 'movq (list (Imm 2) (Reg 'r10)))
     (Instr 'movq (list (Imm 2) (Reg 'r9)))
     (Instr 'movq (list (Imm 2) (Reg 'r8)))
     (Instr 'movq (list (Imm 2) (Reg 'rcx)))
     (Instr 'movq (list (Imm 2) (Deref 'rbp -72)))
     (Instr 'movq (list (Imm 2) (Reg 'r15)))
     (Instr 'movq (list (Imm 2) (Reg 'r13)))
     (Instr 'movq (list (Imm 2) (Reg 'r11)))
     (Instr 'movq (list (Imm 2) (Reg 'rsi)))
     (Instr 'movq (list (Imm 2) (Reg 'rdx)))
     (Instr 'movq (list (Imm 2) (Deref 'rbp -80)))
     (Instr 'addq (list (Deref 'rbp -80) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rsi)))
     (Instr 'movq (list (Reg 'r11) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'r13) (Reg 'rsi)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rsi)))
     (Instr 'movq (list (Reg 'r15) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rdx)))
     (Instr 'movq (list (Deref 'rbp -72) (Reg 'rsi)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rsi)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'r8) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'r9) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'r10) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'r12) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'r14) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'movq (list (Deref 'rbp -64) (Reg 'rsi)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rsi)))
     (Instr 'movq (list (Reg 'rdi) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 32) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'r15)))
     (Instr 'popq (list (Reg 'r13)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'r14)))
     (Instr 'popq (list (Reg 'r12)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
33


testing @ utilities.rkt:2016
test-name:
"var_test_18"

expected-result:
33


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Prim
  '+
  (list
   (Let
    'x
    (Int 10)
    (Let 'y (Int 10) (Prim '+ (list (Let 'z (Int 10) (Var 'z)) (Var 'y)))))
   (Int 0))))


testing @ utilities.rkt:2016
test-name:
"var_test_19"

expected-result:
20


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list
   (Let
    'x
    (Int 10)
    (Let 'y (Int 10) (Prim '+ (list (Let 'z (Int 10) (Var 'z)) (Var 'y)))))
   (Int 0))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list
   (Let
    'x
    (Int 10)
    (Let 'y (Int 10) (Prim '+ (list (Let 'z (Int 10) (Var 'z)) (Var 'y)))))
   (Int 0))))


output:  @ utilities.rkt:2042
result:
20


testing @ utilities.rkt:2016
test-name:
"var_test_19"

expected-result:
20


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list
   (Let
    'x25861
    (Int 10)
    (Let
     'y25862
     (Int 10)
     (Prim '+ (list (Let 'z25863 (Int 10) (Var 'z25863)) (Var 'y25862)))))
   (Int 0))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list
   (Let
    'x25861
    (Int 10)
    (Let
     'y25862
     (Int 10)
     (Prim '+ (list (Let 'z25863 (Int 10) (Var 'z25863)) (Var 'y25862)))))
   (Int 0))))


output:  @ utilities.rkt:2042
result:
20


testing @ utilities.rkt:2016
test-name:
"var_test_19"

expected-result:
20


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list
   (Let
    'x25861
    (Int 10)
    (Let
     'y25862
     (Int 10)
     (Prim '+ (list (Let 'z25863 (Int 10) (Var 'z25863)) (Var 'y25862)))))
   (Int 0))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list
   (Let
    'x25861
    (Int 10)
    (Let
     'y25862
     (Int 10)
     (Prim '+ (list (Let 'z25863 (Int 10) (Var 'z25863)) (Var 'y25862)))))
   (Int 0))))


output:  @ utilities.rkt:2042
result:
20


testing @ utilities.rkt:2016
test-name:
"var_test_19"

expected-result:
20


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x25861
  (Int 10)
  (Let
   'y25862
   (Int 10)
   (Let
    'z25863
    (Int 10)
    (Let
     'g25864
     (Prim '+ (list (Var 'z25863) (Var 'y25862)))
     (Prim '+ (list (Var 'g25864) (Int 0))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x25861
  (Int 10)
  (Let
   'y25862
   (Int 10)
   (Let
    'z25863
    (Int 10)
    (Let
     'g25864
     (Prim '+ (list (Var 'z25863) (Var 'y25862)))
     (Prim '+ (list (Var 'g25864) (Int 0))))))))


output:  @ utilities.rkt:2042
result:
20


testing @ utilities.rkt:2016
test-name:
"var_test_19"

expected-result:
20


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'x25861) (Int 10))
    (Seq
     (Assign (Var 'y25862) (Int 10))
     (Seq
      (Assign (Var 'z25863) (Int 10))
      (Seq
       (Assign (Var 'g25864) (Prim '+ (list (Var 'z25863) (Var 'y25862))))
       (Return (Prim '+ (list (Var 'g25864) (Int 0)))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types
    (g25864 . Integer)
    (z25863 . Integer)
    (y25862 . Integer)
    (x25861 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'x25861) (Int 10))
    (Seq
     (Assign (Var 'y25862) (Int 10))
     (Seq
      (Assign (Var 'z25863) (Int 10))
      (Seq
       (Assign (Var 'g25864) (Prim '+ (list (Var 'z25863) (Var 'y25862))))
       (Return (Prim '+ (list (Var 'g25864) (Int 0)))))))))))


output:  @ utilities.rkt:2042
result:
20


testing @ utilities.rkt:2016
test-name:
"var_test_19"

expected-result:
20


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (g25864 . Integer)
    (z25863 . Integer)
    (y25862 . Integer)
    (x25861 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 10) (Var 'x25861)))
     (Instr 'movq (list (Imm 10) (Var 'y25862)))
     (Instr 'movq (list (Imm 10) (Var 'z25863)))
     (Instr 'movq (list (Var 'z25863) (Var 'g25864)))
     (Instr 'addq (list (Var 'y25862) (Var 'g25864)))
     (Instr 'movq (list (Var 'g25864) (Reg 'rax)))
     (Instr 'addq (list (Imm 0) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (g25864 . Integer)
    (z25863 . Integer)
    (y25862 . Integer)
    (x25861 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 10) (Var 'x25861)))
     (Instr 'movq (list (Imm 10) (Var 'y25862)))
     (Instr 'movq (list (Imm 10) (Var 'z25863)))
     (Instr 'movq (list (Var 'z25863) (Var 'g25864)))
     (Instr 'addq (list (Var 'y25862) (Var 'g25864)))
     (Instr 'movq (list (Var 'g25864) (Reg 'rax)))
     (Instr 'addq (list (Imm 0) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
20


testing @ utilities.rkt:2016
test-name:
"var_test_19"

expected-result:
20


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25864 . Integer)
    (z25863 . Integer)
    (y25862 . Integer)
    (x25861 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Var 'y25862) (Reg 'rsp))
      (set (Var 'y25862) (Var 'z25863) (Reg 'rsp))
      (set (Var 'y25862) (Reg 'rsp) (Var 'g25864))
      (set (Reg 'rsp) (Var 'g25864))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Var 'x25861)))
     (Instr 'movq (list (Imm 10) (Var 'y25862)))
     (Instr 'movq (list (Imm 10) (Var 'z25863)))
     (Instr 'movq (list (Var 'z25863) (Var 'g25864)))
     (Instr 'addq (list (Var 'y25862) (Var 'g25864)))
     (Instr 'movq (list (Var 'g25864) (Reg 'rax)))
     (Instr 'addq (list (Imm 0) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25864 . Integer)
    (z25863 . Integer)
    (y25862 . Integer)
    (x25861 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Var 'y25862) (Reg 'rsp))
      (set (Var 'y25862) (Var 'z25863) (Reg 'rsp))
      (set (Var 'y25862) (Reg 'rsp) (Var 'g25864))
      (set (Reg 'rsp) (Var 'g25864))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Var 'x25861)))
     (Instr 'movq (list (Imm 10) (Var 'y25862)))
     (Instr 'movq (list (Imm 10) (Var 'z25863)))
     (Instr 'movq (list (Var 'z25863) (Var 'g25864)))
     (Instr 'addq (list (Var 'y25862) (Var 'g25864)))
     (Instr 'movq (list (Var 'g25864) (Reg 'rax)))
     (Instr 'addq (list (Imm 0) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
20


testing @ utilities.rkt:2016
test-name:
"var_test_19"

expected-result:
20


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25864 . Integer)
    (z25863 . Integer)
    (y25862 . Integer)
    (x25861 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Var 'y25862) (Reg 'rsp))
      (set (Var 'y25862) (Var 'z25863) (Reg 'rsp))
      (set (Var 'y25862) (Reg 'rsp) (Var 'g25864))
      (set (Reg 'rsp) (Var 'g25864))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Var 'x25861)))
     (Instr 'movq (list (Imm 10) (Var 'y25862)))
     (Instr 'movq (list (Imm 10) (Var 'z25863)))
     (Instr 'movq (list (Var 'z25863) (Var 'g25864)))
     (Instr 'addq (list (Var 'y25862) (Var 'g25864)))
     (Instr 'movq (list (Var 'g25864) (Reg 'rax)))
     (Instr 'addq (list (Imm 0) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25864 . Integer)
    (z25863 . Integer)
    (y25862 . Integer)
    (x25861 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Var 'y25862) (Reg 'rsp))
      (set (Var 'y25862) (Var 'z25863) (Reg 'rsp))
      (set (Var 'y25862) (Reg 'rsp) (Var 'g25864))
      (set (Reg 'rsp) (Var 'g25864))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Var 'x25861)))
     (Instr 'movq (list (Imm 10) (Var 'y25862)))
     (Instr 'movq (list (Imm 10) (Var 'z25863)))
     (Instr 'movq (list (Var 'z25863) (Var 'g25864)))
     (Instr 'addq (list (Var 'y25862) (Var 'g25864)))
     (Instr 'movq (list (Var 'g25864) (Reg 'rax)))
     (Instr 'addq (list (Imm 0) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
20


testing @ utilities.rkt:2016
test-name:
"var_test_19"

expected-result:
20


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25864 . Integer)
    (z25863 . Integer)
    (y25862 . Integer)
    (x25861 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Var 'y25862) (Reg 'rsp))
      (set (Var 'y25862) (Var 'z25863) (Reg 'rsp))
      (set (Var 'y25862) (Reg 'rsp) (Var 'g25864))
      (set (Reg 'rsp) (Var 'g25864))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 0) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25864 . Integer)
    (z25863 . Integer)
    (y25862 . Integer)
    (x25861 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Var 'y25862) (Reg 'rsp))
      (set (Var 'y25862) (Var 'z25863) (Reg 'rsp))
      (set (Var 'y25862) (Reg 'rsp) (Var 'g25864))
      (set (Reg 'rsp) (Var 'g25864))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 0) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
20


testing @ utilities.rkt:2016
test-name:
"var_test_19"

expected-result:
20


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25864 . Integer)
    (z25863 . Integer)
    (y25862 . Integer)
    (x25861 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Var 'y25862) (Reg 'rsp))
      (set (Var 'y25862) (Var 'z25863) (Reg 'rsp))
      (set (Var 'y25862) (Reg 'rsp) (Var 'g25864))
      (set (Reg 'rsp) (Var 'g25864))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 0) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25864 . Integer)
    (z25863 . Integer)
    (y25862 . Integer)
    (x25861 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Var 'y25862) (Reg 'rsp))
      (set (Var 'y25862) (Var 'z25863) (Reg 'rsp))
      (set (Var 'y25862) (Reg 'rsp) (Var 'g25864))
      (set (Reg 'rsp) (Var 'g25864))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 0) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
20


testing @ utilities.rkt:2016
test-name:
"var_test_19"

expected-result:
20


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25864 . Integer)
    (z25863 . Integer)
    (y25862 . Integer)
    (x25861 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Var 'y25862) (Reg 'rsp))
      (set (Var 'y25862) (Var 'z25863) (Reg 'rsp))
      (set (Var 'y25862) (Reg 'rsp) (Var 'g25864))
      (set (Reg 'rsp) (Var 'g25864))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 0) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25864 . Integer)
    (z25863 . Integer)
    (y25862 . Integer)
    (x25861 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Var 'y25862) (Reg 'rsp))
      (set (Var 'y25862) (Var 'z25863) (Reg 'rsp))
      (set (Var 'y25862) (Reg 'rsp) (Var 'g25864))
      (set (Reg 'rsp) (Var 'g25864))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 0) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
20


testing @ utilities.rkt:2016
test-name:
"var_test_19"

expected-result:
20


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program '() (Prim '+ (list (Int 20) (Int 22))))


testing @ utilities.rkt:2016
test-name:
"var_test_2"

expected-result:
42


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Prim '+ (list (Int 20) (Int 22))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Prim '+ (list (Int 20) (Int 22))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_2"

expected-result:
42


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Prim '+ (list (Int 20) (Int 22))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Prim '+ (list (Int 20) (Int 22))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_2"

expected-result:
42


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Prim '+ (list (Int 20) (Int 22))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Prim '+ (list (Int 20) (Int 22))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_2"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Prim '+ (list (Int 20) (Int 22))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Prim '+ (list (Int 20) (Int 22))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_2"

expected-result:
42


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram '() (list (cons 'start (Return (Prim '+ (list (Int 20) (Int 22)))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types))
 (list (cons 'start (Return (Prim '+ (list (Int 20) (Int 22)))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_2"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 20) (Reg 'rax)))
     (Instr 'addq (list (Imm 22) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 20) (Reg 'rax)))
     (Instr 'addq (list (Imm 22) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_2"

expected-result:
42


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 20) (Reg 'rax)))
     (Instr 'addq (list (Imm 22) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 20) (Reg 'rax)))
     (Instr 'addq (list (Imm 22) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_2"

expected-result:
42


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 20) (Reg 'rax)))
     (Instr 'addq (list (Imm 22) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 20) (Reg 'rax)))
     (Instr 'addq (list (Imm 22) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_2"

expected-result:
42


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 20) (Reg 'rax)))
     (Instr 'addq (list (Imm 22) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 20) (Reg 'rax)))
     (Instr 'addq (list (Imm 22) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_2"

expected-result:
42


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 20) (Reg 'rax)))
     (Instr 'addq (list (Imm 22) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 20) (Reg 'rax)))
     (Instr 'addq (list (Imm 22) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_2"

expected-result:
42


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 20) (Reg 'rax)))
     (Instr 'addq (list (Imm 22) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 20) (Reg 'rax)))
     (Instr 'addq (list (Imm 22) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_2"

expected-result:
42


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Prim '+ (list (Let 'a (Int 10) (Var 'a)) (Let 'b (Int 32) (Var 'b)))))


testing @ utilities.rkt:2016
test-name:
"var_test_20"

expected-result:
42


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim '+ (list (Let 'a (Int 10) (Var 'a)) (Let 'b (Int 32) (Var 'b)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim '+ (list (Let 'a (Int 10) (Var 'a)) (Let 'b (Int 32) (Var 'b)))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_20"

expected-result:
42


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list
   (Let 'a25877 (Int 10) (Var 'a25877))
   (Let 'b25878 (Int 32) (Var 'b25878)))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list
   (Let 'a25877 (Int 10) (Var 'a25877))
   (Let 'b25878 (Int 32) (Var 'b25878)))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_20"

expected-result:
42


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list
   (Let 'a25877 (Int 10) (Var 'a25877))
   (Let 'b25878 (Int 32) (Var 'b25878)))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list
   (Let 'a25877 (Int 10) (Var 'a25877))
   (Let 'b25878 (Int 32) (Var 'b25878)))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_20"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'a25877
  (Int 10)
  (Let 'b25878 (Int 32) (Prim '+ (list (Var 'a25877) (Var 'b25878))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'a25877
  (Int 10)
  (Let 'b25878 (Int 32) (Prim '+ (list (Var 'a25877) (Var 'b25878))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_20"

expected-result:
42


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'a25877) (Int 10))
    (Seq
     (Assign (Var 'b25878) (Int 32))
     (Return (Prim '+ (list (Var 'a25877) (Var 'b25878)))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types (b25878 . Integer) (a25877 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'a25877) (Int 10))
    (Seq
     (Assign (Var 'b25878) (Int 32))
     (Return (Prim '+ (list (Var 'a25877) (Var 'b25878)))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_20"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types (b25878 . Integer) (a25877 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 10) (Var 'a25877)))
     (Instr 'movq (list (Imm 32) (Var 'b25878)))
     (Instr 'movq (list (Var 'a25877) (Reg 'rax)))
     (Instr 'addq (list (Var 'b25878) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types (b25878 . Integer) (a25877 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 10) (Var 'a25877)))
     (Instr 'movq (list (Imm 32) (Var 'b25878)))
     (Instr 'movq (list (Var 'a25877) (Reg 'rax)))
     (Instr 'addq (list (Var 'b25878) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_20"

expected-result:
42


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (b25878 . Integer) (a25877 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'a25877) (Reg 'rsp))
      (set (Var 'a25877) (Var 'b25878) (Reg 'rsp))
      (set (Reg 'rax) (Var 'b25878) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Var 'a25877)))
     (Instr 'movq (list (Imm 32) (Var 'b25878)))
     (Instr 'movq (list (Var 'a25877) (Reg 'rax)))
     (Instr 'addq (list (Var 'b25878) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (b25878 . Integer) (a25877 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'a25877) (Reg 'rsp))
      (set (Var 'a25877) (Var 'b25878) (Reg 'rsp))
      (set (Reg 'rax) (Var 'b25878) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Var 'a25877)))
     (Instr 'movq (list (Imm 32) (Var 'b25878)))
     (Instr 'movq (list (Var 'a25877) (Reg 'rax)))
     (Instr 'addq (list (Var 'b25878) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_20"

expected-result:
42


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (b25878 . Integer) (a25877 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'a25877) (Reg 'rsp))
      (set (Var 'a25877) (Var 'b25878) (Reg 'rsp))
      (set (Reg 'rax) (Var 'b25878) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Var 'a25877)))
     (Instr 'movq (list (Imm 32) (Var 'b25878)))
     (Instr 'movq (list (Var 'a25877) (Reg 'rax)))
     (Instr 'addq (list (Var 'b25878) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (b25878 . Integer) (a25877 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'a25877) (Reg 'rsp))
      (set (Var 'a25877) (Var 'b25878) (Reg 'rsp))
      (set (Reg 'rax) (Var 'b25878) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Var 'a25877)))
     (Instr 'movq (list (Imm 32) (Var 'b25878)))
     (Instr 'movq (list (Var 'a25877) (Reg 'rax)))
     (Instr 'addq (list (Var 'b25878) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_20"

expected-result:
42


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (b25878 . Integer) (a25877 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'a25877) (Reg 'rsp))
      (set (Var 'a25877) (Var 'b25878) (Reg 'rsp))
      (set (Reg 'rax) (Var 'b25878) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'movq (list (Imm 32) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (b25878 . Integer) (a25877 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'a25877) (Reg 'rsp))
      (set (Var 'a25877) (Var 'b25878) (Reg 'rsp))
      (set (Reg 'rax) (Var 'b25878) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'movq (list (Imm 32) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_20"

expected-result:
42


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (b25878 . Integer) (a25877 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'a25877) (Reg 'rsp))
      (set (Var 'a25877) (Var 'b25878) (Reg 'rsp))
      (set (Reg 'rax) (Var 'b25878) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'movq (list (Imm 32) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (b25878 . Integer) (a25877 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'a25877) (Reg 'rsp))
      (set (Var 'a25877) (Var 'b25878) (Reg 'rsp))
      (set (Reg 'rax) (Var 'b25878) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'movq (list (Imm 32) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_20"

expected-result:
42


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (b25878 . Integer) (a25877 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'a25877) (Reg 'rsp))
      (set (Var 'a25877) (Var 'b25878) (Reg 'rsp))
      (set (Reg 'rax) (Var 'b25878) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'movq (list (Imm 32) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (b25878 . Integer) (a25877 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'a25877) (Reg 'rsp))
      (set (Var 'a25877) (Var 'b25878) (Reg 'rsp))
      (set (Reg 'rax) (Var 'b25878) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'movq (list (Imm 32) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_20"

expected-result:
42


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Prim
  '+
  (list
   (Let 'x (Int 10) (Let 'y (Int 32) (Prim '+ (list (Var 'x) (Var 'y)))))
   (Let
    'z
    (Int 10)
    (Let
     'c
     (Int 7)
     (Prim '+ (list (Var 'z) (Prim '+ (list (Var 'c) (Var 'c))))))))))


testing @ utilities.rkt:2016
test-name:
"var_test_21"

expected-result:
66


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list
   (Let 'x (Int 10) (Let 'y (Int 32) (Prim '+ (list (Var 'x) (Var 'y)))))
   (Let
    'z
    (Int 10)
    (Let
     'c
     (Int 7)
     (Prim '+ (list (Var 'z) (Prim '+ (list (Var 'c) (Var 'c))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list
   (Let 'x (Int 10) (Let 'y (Int 32) (Prim '+ (list (Var 'x) (Var 'y)))))
   (Let
    'z
    (Int 10)
    (Let
     'c
     (Int 7)
     (Prim '+ (list (Var 'z) (Prim '+ (list (Var 'c) (Var 'c))))))))))


output:  @ utilities.rkt:2042
result:
66


testing @ utilities.rkt:2016
test-name:
"var_test_21"

expected-result:
66


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list
   (Let
    'x25885
    (Int 10)
    (Let 'y25886 (Int 32) (Prim '+ (list (Var 'x25885) (Var 'y25886)))))
   (Let
    'z25887
    (Int 10)
    (Let
     'c25888
     (Int 7)
     (Prim
      '+
      (list (Var 'z25887) (Prim '+ (list (Var 'c25888) (Var 'c25888))))))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list
   (Let
    'x25885
    (Int 10)
    (Let 'y25886 (Int 32) (Prim '+ (list (Var 'x25885) (Var 'y25886)))))
   (Let
    'z25887
    (Int 10)
    (Let
     'c25888
     (Int 7)
     (Prim
      '+
      (list (Var 'z25887) (Prim '+ (list (Var 'c25888) (Var 'c25888))))))))))


output:  @ utilities.rkt:2042
result:
66


testing @ utilities.rkt:2016
test-name:
"var_test_21"

expected-result:
66


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list
   (Let
    'x25885
    (Int 10)
    (Let 'y25886 (Int 32) (Prim '+ (list (Var 'x25885) (Var 'y25886)))))
   (Let
    'z25887
    (Int 10)
    (Let
     'c25888
     (Int 7)
     (Prim
      '+
      (list (Var 'z25887) (Prim '+ (list (Var 'c25888) (Var 'c25888))))))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list
   (Let
    'x25885
    (Int 10)
    (Let 'y25886 (Int 32) (Prim '+ (list (Var 'x25885) (Var 'y25886)))))
   (Let
    'z25887
    (Int 10)
    (Let
     'c25888
     (Int 7)
     (Prim
      '+
      (list (Var 'z25887) (Prim '+ (list (Var 'c25888) (Var 'c25888))))))))))


output:  @ utilities.rkt:2042
result:
66


testing @ utilities.rkt:2016
test-name:
"var_test_21"

expected-result:
66


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x25885
  (Int 10)
  (Let
   'y25886
   (Int 32)
   (Let
    'g25889
    (Prim '+ (list (Var 'x25885) (Var 'y25886)))
    (Let
     'z25887
     (Int 10)
     (Let
      'c25888
      (Int 7)
      (Let
       'g25891
       (Prim '+ (list (Var 'c25888) (Var 'c25888)))
       (Let
        'g25890
        (Prim '+ (list (Var 'z25887) (Var 'g25891)))
        (Prim '+ (list (Var 'g25889) (Var 'g25890)))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x25885
  (Int 10)
  (Let
   'y25886
   (Int 32)
   (Let
    'g25889
    (Prim '+ (list (Var 'x25885) (Var 'y25886)))
    (Let
     'z25887
     (Int 10)
     (Let
      'c25888
      (Int 7)
      (Let
       'g25891
       (Prim '+ (list (Var 'c25888) (Var 'c25888)))
       (Let
        'g25890
        (Prim '+ (list (Var 'z25887) (Var 'g25891)))
        (Prim '+ (list (Var 'g25889) (Var 'g25890)))))))))))


output:  @ utilities.rkt:2042
result:
66


testing @ utilities.rkt:2016
test-name:
"var_test_21"

expected-result:
66


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'x25885) (Int 10))
    (Seq
     (Assign (Var 'y25886) (Int 32))
     (Seq
      (Assign (Var 'g25889) (Prim '+ (list (Var 'x25885) (Var 'y25886))))
      (Seq
       (Assign (Var 'z25887) (Int 10))
       (Seq
        (Assign (Var 'c25888) (Int 7))
        (Seq
         (Assign (Var 'g25891) (Prim '+ (list (Var 'c25888) (Var 'c25888))))
         (Seq
          (Assign (Var 'g25890) (Prim '+ (list (Var 'z25887) (Var 'g25891))))
          (Return (Prim '+ (list (Var 'g25889) (Var 'g25890))))))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types
    (g25891 . Integer)
    (g25890 . Integer)
    (g25889 . Integer)
    (c25888 . Integer)
    (z25887 . Integer)
    (y25886 . Integer)
    (x25885 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'x25885) (Int 10))
    (Seq
     (Assign (Var 'y25886) (Int 32))
     (Seq
      (Assign (Var 'g25889) (Prim '+ (list (Var 'x25885) (Var 'y25886))))
      (Seq
       (Assign (Var 'z25887) (Int 10))
       (Seq
        (Assign (Var 'c25888) (Int 7))
        (Seq
         (Assign (Var 'g25891) (Prim '+ (list (Var 'c25888) (Var 'c25888))))
         (Seq
          (Assign (Var 'g25890) (Prim '+ (list (Var 'z25887) (Var 'g25891))))
          (Return (Prim '+ (list (Var 'g25889) (Var 'g25890))))))))))))))


output:  @ utilities.rkt:2042
result:
66


testing @ utilities.rkt:2016
test-name:
"var_test_21"

expected-result:
66


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (g25891 . Integer)
    (g25890 . Integer)
    (g25889 . Integer)
    (c25888 . Integer)
    (z25887 . Integer)
    (y25886 . Integer)
    (x25885 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 10) (Var 'x25885)))
     (Instr 'movq (list (Imm 32) (Var 'y25886)))
     (Instr 'movq (list (Var 'x25885) (Var 'g25889)))
     (Instr 'addq (list (Var 'y25886) (Var 'g25889)))
     (Instr 'movq (list (Imm 10) (Var 'z25887)))
     (Instr 'movq (list (Imm 7) (Var 'c25888)))
     (Instr 'movq (list (Var 'c25888) (Var 'g25891)))
     (Instr 'addq (list (Var 'c25888) (Var 'g25891)))
     (Instr 'movq (list (Var 'z25887) (Var 'g25890)))
     (Instr 'addq (list (Var 'g25891) (Var 'g25890)))
     (Instr 'movq (list (Var 'g25889) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25890) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (g25891 . Integer)
    (g25890 . Integer)
    (g25889 . Integer)
    (c25888 . Integer)
    (z25887 . Integer)
    (y25886 . Integer)
    (x25885 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 10) (Var 'x25885)))
     (Instr 'movq (list (Imm 32) (Var 'y25886)))
     (Instr 'movq (list (Var 'x25885) (Var 'g25889)))
     (Instr 'addq (list (Var 'y25886) (Var 'g25889)))
     (Instr 'movq (list (Imm 10) (Var 'z25887)))
     (Instr 'movq (list (Imm 7) (Var 'c25888)))
     (Instr 'movq (list (Var 'c25888) (Var 'g25891)))
     (Instr 'addq (list (Var 'c25888) (Var 'g25891)))
     (Instr 'movq (list (Var 'z25887) (Var 'g25890)))
     (Instr 'addq (list (Var 'g25891) (Var 'g25890)))
     (Instr 'movq (list (Var 'g25889) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25890) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
66


testing @ utilities.rkt:2016
test-name:
"var_test_21"

expected-result:
66


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25891 . Integer)
    (g25890 . Integer)
    (g25889 . Integer)
    (c25888 . Integer)
    (z25887 . Integer)
    (y25886 . Integer)
    (x25885 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25885) (Reg 'rsp))
      (set (Var 'x25885) (Var 'y25886) (Reg 'rsp))
      (set (Var 'y25886) (Var 'g25889) (Reg 'rsp))
      (set (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'c25888) (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'c25888) (Var 'g25889) (Var 'g25891) (Reg 'rsp))
      (set (Var 'z25887) (Var 'g25889) (Var 'g25891) (Reg 'rsp))
      (set (Var 'g25889) (Var 'g25890) (Var 'g25891) (Reg 'rsp))
      (set (Var 'g25889) (Var 'g25890) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25890) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Var 'x25885)))
     (Instr 'movq (list (Imm 32) (Var 'y25886)))
     (Instr 'movq (list (Var 'x25885) (Var 'g25889)))
     (Instr 'addq (list (Var 'y25886) (Var 'g25889)))
     (Instr 'movq (list (Imm 10) (Var 'z25887)))
     (Instr 'movq (list (Imm 7) (Var 'c25888)))
     (Instr 'movq (list (Var 'c25888) (Var 'g25891)))
     (Instr 'addq (list (Var 'c25888) (Var 'g25891)))
     (Instr 'movq (list (Var 'z25887) (Var 'g25890)))
     (Instr 'addq (list (Var 'g25891) (Var 'g25890)))
     (Instr 'movq (list (Var 'g25889) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25890) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25891 . Integer)
    (g25890 . Integer)
    (g25889 . Integer)
    (c25888 . Integer)
    (z25887 . Integer)
    (y25886 . Integer)
    (x25885 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25885) (Reg 'rsp))
      (set (Var 'x25885) (Var 'y25886) (Reg 'rsp))
      (set (Var 'y25886) (Var 'g25889) (Reg 'rsp))
      (set (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'c25888) (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'c25888) (Var 'g25889) (Var 'g25891) (Reg 'rsp))
      (set (Var 'z25887) (Var 'g25889) (Var 'g25891) (Reg 'rsp))
      (set (Var 'g25889) (Var 'g25890) (Var 'g25891) (Reg 'rsp))
      (set (Var 'g25889) (Var 'g25890) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25890) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Var 'x25885)))
     (Instr 'movq (list (Imm 32) (Var 'y25886)))
     (Instr 'movq (list (Var 'x25885) (Var 'g25889)))
     (Instr 'addq (list (Var 'y25886) (Var 'g25889)))
     (Instr 'movq (list (Imm 10) (Var 'z25887)))
     (Instr 'movq (list (Imm 7) (Var 'c25888)))
     (Instr 'movq (list (Var 'c25888) (Var 'g25891)))
     (Instr 'addq (list (Var 'c25888) (Var 'g25891)))
     (Instr 'movq (list (Var 'z25887) (Var 'g25890)))
     (Instr 'addq (list (Var 'g25891) (Var 'g25890)))
     (Instr 'movq (list (Var 'g25889) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25890) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
66


testing @ utilities.rkt:2016
test-name:
"var_test_21"

expected-result:
66


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25891 . Integer)
    (g25890 . Integer)
    (g25889 . Integer)
    (c25888 . Integer)
    (z25887 . Integer)
    (y25886 . Integer)
    (x25885 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25885) (Reg 'rsp))
      (set (Var 'x25885) (Var 'y25886) (Reg 'rsp))
      (set (Var 'y25886) (Var 'g25889) (Reg 'rsp))
      (set (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'c25888) (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'c25888) (Var 'g25889) (Var 'g25891) (Reg 'rsp))
      (set (Var 'z25887) (Var 'g25889) (Var 'g25891) (Reg 'rsp))
      (set (Var 'g25889) (Var 'g25890) (Var 'g25891) (Reg 'rsp))
      (set (Var 'g25889) (Var 'g25890) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25890) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Var 'x25885)))
     (Instr 'movq (list (Imm 32) (Var 'y25886)))
     (Instr 'movq (list (Var 'x25885) (Var 'g25889)))
     (Instr 'addq (list (Var 'y25886) (Var 'g25889)))
     (Instr 'movq (list (Imm 10) (Var 'z25887)))
     (Instr 'movq (list (Imm 7) (Var 'c25888)))
     (Instr 'movq (list (Var 'c25888) (Var 'g25891)))
     (Instr 'addq (list (Var 'c25888) (Var 'g25891)))
     (Instr 'movq (list (Var 'z25887) (Var 'g25890)))
     (Instr 'addq (list (Var 'g25891) (Var 'g25890)))
     (Instr 'movq (list (Var 'g25889) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25890) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25891 . Integer)
    (g25890 . Integer)
    (g25889 . Integer)
    (c25888 . Integer)
    (z25887 . Integer)
    (y25886 . Integer)
    (x25885 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25885) (Reg 'rsp))
      (set (Var 'x25885) (Var 'y25886) (Reg 'rsp))
      (set (Var 'y25886) (Var 'g25889) (Reg 'rsp))
      (set (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'c25888) (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'c25888) (Var 'g25889) (Var 'g25891) (Reg 'rsp))
      (set (Var 'z25887) (Var 'g25889) (Var 'g25891) (Reg 'rsp))
      (set (Var 'g25889) (Var 'g25890) (Var 'g25891) (Reg 'rsp))
      (set (Var 'g25889) (Var 'g25890) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25890) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Var 'x25885)))
     (Instr 'movq (list (Imm 32) (Var 'y25886)))
     (Instr 'movq (list (Var 'x25885) (Var 'g25889)))
     (Instr 'addq (list (Var 'y25886) (Var 'g25889)))
     (Instr 'movq (list (Imm 10) (Var 'z25887)))
     (Instr 'movq (list (Imm 7) (Var 'c25888)))
     (Instr 'movq (list (Var 'c25888) (Var 'g25891)))
     (Instr 'addq (list (Var 'c25888) (Var 'g25891)))
     (Instr 'movq (list (Var 'z25887) (Var 'g25890)))
     (Instr 'addq (list (Var 'g25891) (Var 'g25890)))
     (Instr 'movq (list (Var 'g25889) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25890) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
66


testing @ utilities.rkt:2016
test-name:
"var_test_21"

expected-result:
66


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25891 . Integer)
    (g25890 . Integer)
    (g25889 . Integer)
    (c25888 . Integer)
    (z25887 . Integer)
    (y25886 . Integer)
    (x25885 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25885) (Reg 'rsp))
      (set (Var 'x25885) (Var 'y25886) (Reg 'rsp))
      (set (Var 'y25886) (Var 'g25889) (Reg 'rsp))
      (set (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'c25888) (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'c25888) (Var 'g25889) (Var 'g25891) (Reg 'rsp))
      (set (Var 'z25887) (Var 'g25889) (Var 'g25891) (Reg 'rsp))
      (set (Var 'g25889) (Var 'g25890) (Var 'g25891) (Reg 'rsp))
      (set (Var 'g25889) (Var 'g25890) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25890) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'movq (list (Imm 32) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rdx)))
     (Instr 'movq (list (Imm 10) (Reg 'rsi)))
     (Instr 'movq (list (Imm 7) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rsi) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25891 . Integer)
    (g25890 . Integer)
    (g25889 . Integer)
    (c25888 . Integer)
    (z25887 . Integer)
    (y25886 . Integer)
    (x25885 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25885) (Reg 'rsp))
      (set (Var 'x25885) (Var 'y25886) (Reg 'rsp))
      (set (Var 'y25886) (Var 'g25889) (Reg 'rsp))
      (set (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'c25888) (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'c25888) (Var 'g25889) (Var 'g25891) (Reg 'rsp))
      (set (Var 'z25887) (Var 'g25889) (Var 'g25891) (Reg 'rsp))
      (set (Var 'g25889) (Var 'g25890) (Var 'g25891) (Reg 'rsp))
      (set (Var 'g25889) (Var 'g25890) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25890) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'movq (list (Imm 32) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rdx)))
     (Instr 'movq (list (Imm 10) (Reg 'rsi)))
     (Instr 'movq (list (Imm 7) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rsi) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
66


testing @ utilities.rkt:2016
test-name:
"var_test_21"

expected-result:
66


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25891 . Integer)
    (g25890 . Integer)
    (g25889 . Integer)
    (c25888 . Integer)
    (z25887 . Integer)
    (y25886 . Integer)
    (x25885 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25885) (Reg 'rsp))
      (set (Var 'x25885) (Var 'y25886) (Reg 'rsp))
      (set (Var 'y25886) (Var 'g25889) (Reg 'rsp))
      (set (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'c25888) (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'c25888) (Var 'g25889) (Var 'g25891) (Reg 'rsp))
      (set (Var 'z25887) (Var 'g25889) (Var 'g25891) (Reg 'rsp))
      (set (Var 'g25889) (Var 'g25890) (Var 'g25891) (Reg 'rsp))
      (set (Var 'g25889) (Var 'g25890) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25890) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'movq (list (Imm 32) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rdx)))
     (Instr 'movq (list (Imm 10) (Reg 'rsi)))
     (Instr 'movq (list (Imm 7) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rsi) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25891 . Integer)
    (g25890 . Integer)
    (g25889 . Integer)
    (c25888 . Integer)
    (z25887 . Integer)
    (y25886 . Integer)
    (x25885 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25885) (Reg 'rsp))
      (set (Var 'x25885) (Var 'y25886) (Reg 'rsp))
      (set (Var 'y25886) (Var 'g25889) (Reg 'rsp))
      (set (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'c25888) (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'c25888) (Var 'g25889) (Var 'g25891) (Reg 'rsp))
      (set (Var 'z25887) (Var 'g25889) (Var 'g25891) (Reg 'rsp))
      (set (Var 'g25889) (Var 'g25890) (Var 'g25891) (Reg 'rsp))
      (set (Var 'g25889) (Var 'g25890) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25890) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'movq (list (Imm 32) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rdx)))
     (Instr 'movq (list (Imm 10) (Reg 'rsi)))
     (Instr 'movq (list (Imm 7) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rsi) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
66


testing @ utilities.rkt:2016
test-name:
"var_test_21"

expected-result:
66


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25891 . Integer)
    (g25890 . Integer)
    (g25889 . Integer)
    (c25888 . Integer)
    (z25887 . Integer)
    (y25886 . Integer)
    (x25885 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25885) (Reg 'rsp))
      (set (Var 'x25885) (Var 'y25886) (Reg 'rsp))
      (set (Var 'y25886) (Var 'g25889) (Reg 'rsp))
      (set (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'c25888) (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'c25888) (Var 'g25889) (Var 'g25891) (Reg 'rsp))
      (set (Var 'z25887) (Var 'g25889) (Var 'g25891) (Reg 'rsp))
      (set (Var 'g25889) (Var 'g25890) (Var 'g25891) (Reg 'rsp))
      (set (Var 'g25889) (Var 'g25890) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25890) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'movq (list (Imm 32) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rdx)))
     (Instr 'movq (list (Imm 10) (Reg 'rsi)))
     (Instr 'movq (list (Imm 7) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rsi) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25891 . Integer)
    (g25890 . Integer)
    (g25889 . Integer)
    (c25888 . Integer)
    (z25887 . Integer)
    (y25886 . Integer)
    (x25885 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25885) (Reg 'rsp))
      (set (Var 'x25885) (Var 'y25886) (Reg 'rsp))
      (set (Var 'y25886) (Var 'g25889) (Reg 'rsp))
      (set (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'c25888) (Var 'g25889) (Reg 'rsp))
      (set (Var 'z25887) (Var 'c25888) (Var 'g25889) (Var 'g25891) (Reg 'rsp))
      (set (Var 'z25887) (Var 'g25889) (Var 'g25891) (Reg 'rsp))
      (set (Var 'g25889) (Var 'g25890) (Var 'g25891) (Reg 'rsp))
      (set (Var 'g25889) (Var 'g25890) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25890) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'movq (list (Imm 32) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rdx)))
     (Instr 'movq (list (Imm 10) (Reg 'rsi)))
     (Instr 'movq (list (Imm 7) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rsi) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
66


testing @ utilities.rkt:2016
test-name:
"var_test_21"

expected-result:
66


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Begin
  (list (Let 'x (Int 20) (Var 'x)) (Prim '+ (list (Int 1) (Int 2))))
  (If (Bool #t) (Int 42) (Int 41))))


testing @ utilities.rkt:2016
test-name:
"var_test_22"

expected-result:
42


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Begin
  (list (Let 'x (Int 20) (Var 'x)) (Prim '+ (list (Int 1) (Int 2))))
  (If (Bool #t) (Int 42) (Int 41))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Begin
  (list (Let 'x (Int 20) (Var 'x)) (Prim '+ (list (Int 1) (Int 2))))
  (If (Bool #t) (Int 42) (Int 41))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_22"

expected-result:
42


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Begin
  (list (Let 'x25898 (Int 20) (Var 'x25898)) (Prim '+ (list (Int 1) (Int 2))))
  (If (Bool #t) (Int 42) (Int 41))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Begin
  (list (Let 'x25898 (Int 20) (Var 'x25898)) (Prim '+ (list (Int 1) (Int 2))))
  (If (Bool #t) (Int 42) (Int 41))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_22"

expected-result:
42


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Begin
  (list (Let 'x25898 (Int 20) (Var 'x25898)) (Prim '+ (list (Int 1) (Int 2))))
  (If (Bool #t) (Int 42) (Int 41))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Begin
  (list (Let 'x25898 (Int 20) (Var 'x25898)) (Prim '+ (list (Int 1) (Int 2))))
  (If (Bool #t) (Int 42) (Int 41))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_22"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Begin
  (list (Let 'x25898 (Int 20) (Var 'x25898)) (Prim '+ (list (Int 1) (Int 2))))
  (If (Bool #t) (Int 42) (Int 41))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Begin
  (list (Let 'x25898 (Int 20) (Var 'x25898)) (Prim '+ (list (Int 1) (Int 2))))
  (If (Bool #t) (Int 42) (Int 41))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_22"

expected-result:
42


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons 'start (Seq (Assign (Var 'x25898) (Int 20)) (Goto 'block25899)))
  (cons 'block25899 (Return (Int 42)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types (x25898 . Integer)))
 (list
  (cons 'start (Seq (Assign (Var 'x25898) (Int 20)) (Goto 'block25899)))
  (cons 'block25899 (Return (Int 42)))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_22"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types (x25898 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list (Instr 'movq (list (Imm 20) (Var 'x25898))) (Jmp 'block25899))))
  (cons
   'block25899
   (Block
    '()
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types (x25898 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list (Instr 'movq (list (Imm 20) (Var 'x25898))) (Jmp 'block25899))))
  (cons
   'block25899
   (Block
    '()
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_22"

expected-result:
42


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x25898 . Integer))
  (cons
   'label->live
   (hash
    'block25899
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 20) (Var 'x25898))) (Jmp 'block25899))))
  (cons
   'block25899
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x25898 . Integer))
  (cons
   'label->live
   (hash
    'block25899
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 20) (Var 'x25898))) (Jmp 'block25899))))
  (cons
   'block25899
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_22"

expected-result:
42


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x25898 . Integer))
  (cons
   'label->live
   (hash
    'block25899
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 20) (Var 'x25898))) (Jmp 'block25899))))
  (cons
   'block25899
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x25898 . Integer))
  (cons
   'label->live
   (hash
    'block25899
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 20) (Var 'x25898))) (Jmp 'block25899))))
  (cons
   'block25899
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_22"

expected-result:
42


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x25898 . Integer))
  (cons
   'label->live
   (hash
    'block25899
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 20) (Reg 'rbx))) (Jmp 'block25899))))
  (cons
   'block25899
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x25898 . Integer))
  (cons
   'label->live
   (hash
    'block25899
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 20) (Reg 'rbx))) (Jmp 'block25899))))
  (cons
   'block25899
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_22"

expected-result:
42


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x25898 . Integer))
  (cons
   'label->live
   (hash
    'block25899
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 20) (Reg 'rbx))) (Jmp 'block25899))))
  (cons
   'block25899
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x25898 . Integer))
  (cons
   'label->live
   (hash
    'block25899
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 20) (Reg 'rbx))) (Jmp 'block25899))))
  (cons
   'block25899
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_22"

expected-result:
42


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x25898 . Integer))
  (cons
   'label->live
   (hash
    'block25899
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 20) (Reg 'rbx))) (Jmp 'block25899))))
  (cons
   'block25899
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x25898 . Integer))
  (cons
   'label->live
   (hash
    'block25899
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 20) (Reg 'rbx))) (Jmp 'block25899))))
  (cons
   'block25899
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_22"

expected-result:
42


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program '() (Let 'x (Int 41) (Prim '+ (list (Var 'x) (Int 1)))))


testing @ utilities.rkt:2016
test-name:
"var_test_3"

expected-result:
42


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Let 'x (Int 41) (Prim '+ (list (Var 'x) (Int 1)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Let 'x (Int 41) (Prim '+ (list (Var 'x) (Int 1)))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_3"

expected-result:
42


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Let 'x25906 (Int 41) (Prim '+ (list (Var 'x25906) (Int 1)))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Let 'x25906 (Int 41) (Prim '+ (list (Var 'x25906) (Int 1)))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_3"

expected-result:
42


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Let 'x25906 (Int 41) (Prim '+ (list (Var 'x25906) (Int 1)))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Let 'x25906 (Int 41) (Prim '+ (list (Var 'x25906) (Int 1)))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_3"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Let 'x25906 (Int 41) (Prim '+ (list (Var 'x25906) (Int 1)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Let 'x25906 (Int 41) (Prim '+ (list (Var 'x25906) (Int 1)))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_3"

expected-result:
42


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'x25906) (Int 41))
    (Return (Prim '+ (list (Var 'x25906) (Int 1))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types (x25906 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'x25906) (Int 41))
    (Return (Prim '+ (list (Var 'x25906) (Int 1))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_3"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types (x25906 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 41) (Var 'x25906)))
     (Instr 'movq (list (Var 'x25906) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types (x25906 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 41) (Var 'x25906)))
     (Instr 'movq (list (Var 'x25906) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_3"

expected-result:
42


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x25906 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25906) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 41) (Var 'x25906)))
     (Instr 'movq (list (Var 'x25906) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x25906 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25906) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 41) (Var 'x25906)))
     (Instr 'movq (list (Var 'x25906) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_3"

expected-result:
42


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x25906 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25906) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 41) (Var 'x25906)))
     (Instr 'movq (list (Var 'x25906) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x25906 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25906) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 41) (Var 'x25906)))
     (Instr 'movq (list (Var 'x25906) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_3"

expected-result:
42


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x25906 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25906) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 41) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x25906 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25906) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 41) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_3"

expected-result:
42


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x25906 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25906) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 41) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x25906 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25906) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 41) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_3"

expected-result:
42


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x25906 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25906) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 41) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x25906 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25906) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 41) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_3"

expected-result:
42


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Let 'x (Int 10) (Prim '+ (list (Let 'x (Int 42) (Var 'x)) (Var 'x)))))


testing @ utilities.rkt:2016
test-name:
"var_test_4"

expected-result:
52


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let 'x (Int 10) (Prim '+ (list (Let 'x (Int 42) (Var 'x)) (Var 'x)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let 'x (Int 10) (Prim '+ (list (Let 'x (Int 42) (Var 'x)) (Var 'x)))))


output:  @ utilities.rkt:2042
result:
52


testing @ utilities.rkt:2016
test-name:
"var_test_4"

expected-result:
52


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x25913
  (Int 10)
  (Prim '+ (list (Let 'x25914 (Int 42) (Var 'x25914)) (Var 'x25913)))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x25913
  (Int 10)
  (Prim '+ (list (Let 'x25914 (Int 42) (Var 'x25914)) (Var 'x25913)))))


output:  @ utilities.rkt:2042
result:
52


testing @ utilities.rkt:2016
test-name:
"var_test_4"

expected-result:
52


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x25913
  (Int 10)
  (Prim '+ (list (Let 'x25914 (Int 42) (Var 'x25914)) (Var 'x25913)))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x25913
  (Int 10)
  (Prim '+ (list (Let 'x25914 (Int 42) (Var 'x25914)) (Var 'x25913)))))


output:  @ utilities.rkt:2042
result:
52


testing @ utilities.rkt:2016
test-name:
"var_test_4"

expected-result:
52


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x25913
  (Int 10)
  (Let 'x25914 (Int 42) (Prim '+ (list (Var 'x25914) (Var 'x25913))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x25913
  (Int 10)
  (Let 'x25914 (Int 42) (Prim '+ (list (Var 'x25914) (Var 'x25913))))))


output:  @ utilities.rkt:2042
result:
52


testing @ utilities.rkt:2016
test-name:
"var_test_4"

expected-result:
52


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'x25913) (Int 10))
    (Seq
     (Assign (Var 'x25914) (Int 42))
     (Return (Prim '+ (list (Var 'x25914) (Var 'x25913)))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types (x25914 . Integer) (x25913 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'x25913) (Int 10))
    (Seq
     (Assign (Var 'x25914) (Int 42))
     (Return (Prim '+ (list (Var 'x25914) (Var 'x25913)))))))))


output:  @ utilities.rkt:2042
result:
52


testing @ utilities.rkt:2016
test-name:
"var_test_4"

expected-result:
52


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types (x25914 . Integer) (x25913 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 10) (Var 'x25913)))
     (Instr 'movq (list (Imm 42) (Var 'x25914)))
     (Instr 'movq (list (Var 'x25914) (Reg 'rax)))
     (Instr 'addq (list (Var 'x25913) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types (x25914 . Integer) (x25913 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 10) (Var 'x25913)))
     (Instr 'movq (list (Imm 42) (Var 'x25914)))
     (Instr 'movq (list (Var 'x25914) (Reg 'rax)))
     (Instr 'addq (list (Var 'x25913) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
52


testing @ utilities.rkt:2016
test-name:
"var_test_4"

expected-result:
52


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x25914 . Integer) (x25913 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25913) (Reg 'rsp))
      (set (Var 'x25913) (Var 'x25914) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25913))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Var 'x25913)))
     (Instr 'movq (list (Imm 42) (Var 'x25914)))
     (Instr 'movq (list (Var 'x25914) (Reg 'rax)))
     (Instr 'addq (list (Var 'x25913) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x25914 . Integer) (x25913 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25913) (Reg 'rsp))
      (set (Var 'x25913) (Var 'x25914) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25913))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Var 'x25913)))
     (Instr 'movq (list (Imm 42) (Var 'x25914)))
     (Instr 'movq (list (Var 'x25914) (Reg 'rax)))
     (Instr 'addq (list (Var 'x25913) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
52


testing @ utilities.rkt:2016
test-name:
"var_test_4"

expected-result:
52


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x25914 . Integer) (x25913 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25913) (Reg 'rsp))
      (set (Var 'x25913) (Var 'x25914) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25913))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Var 'x25913)))
     (Instr 'movq (list (Imm 42) (Var 'x25914)))
     (Instr 'movq (list (Var 'x25914) (Reg 'rax)))
     (Instr 'addq (list (Var 'x25913) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x25914 . Integer) (x25913 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25913) (Reg 'rsp))
      (set (Var 'x25913) (Var 'x25914) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25913))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Var 'x25913)))
     (Instr 'movq (list (Imm 42) (Var 'x25914)))
     (Instr 'movq (list (Var 'x25914) (Reg 'rax)))
     (Instr 'addq (list (Var 'x25913) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
52


testing @ utilities.rkt:2016
test-name:
"var_test_4"

expected-result:
52


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x25914 . Integer) (x25913 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25913) (Reg 'rsp))
      (set (Var 'x25913) (Var 'x25914) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25913))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'movq (list (Imm 42) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x25914 . Integer) (x25913 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25913) (Reg 'rsp))
      (set (Var 'x25913) (Var 'x25914) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25913))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'movq (list (Imm 42) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
52


testing @ utilities.rkt:2016
test-name:
"var_test_4"

expected-result:
52


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x25914 . Integer) (x25913 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25913) (Reg 'rsp))
      (set (Var 'x25913) (Var 'x25914) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25913))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'movq (list (Imm 42) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x25914 . Integer) (x25913 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25913) (Reg 'rsp))
      (set (Var 'x25913) (Var 'x25914) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25913))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'movq (list (Imm 42) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
52


testing @ utilities.rkt:2016
test-name:
"var_test_4"

expected-result:
52


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x25914 . Integer) (x25913 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25913) (Reg 'rsp))
      (set (Var 'x25913) (Var 'x25914) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25913))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'movq (list (Imm 42) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x25914 . Integer) (x25913 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25913) (Reg 'rsp))
      (set (Var 'x25913) (Var 'x25914) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25913))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rbx)))
     (Instr 'movq (list (Imm 42) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
52


testing @ utilities.rkt:2016
test-name:
"var_test_4"

expected-result:
52


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Let 'x (Let 'y (Prim '- (list (Int 42))) (Var 'y)) (Prim '- (list (Var 'x)))))


testing @ utilities.rkt:2016
test-name:
"var_test_5"

expected-result:
42


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let 'x (Let 'y (Prim '- (list (Int 42))) (Var 'y)) (Prim '- (list (Var 'x)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let 'x (Let 'y (Prim '- (list (Int 42))) (Var 'y)) (Prim '- (list (Var 'x)))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_5"

expected-result:
42


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x25921
  (Let 'y25922 (Prim '- (list (Int 42))) (Var 'y25922))
  (Prim '- (list (Var 'x25921)))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x25921
  (Let 'y25922 (Prim '- (list (Int 42))) (Var 'y25922))
  (Prim '- (list (Var 'x25921)))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_5"

expected-result:
42


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x25921
  (Let 'y25922 (Prim '- (list (Int 42))) (Var 'y25922))
  (Prim '- (list (Var 'x25921)))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x25921
  (Let 'y25922 (Prim '- (list (Int 42))) (Var 'y25922))
  (Prim '- (list (Var 'x25921)))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_5"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x25921
  (Let 'y25922 (Prim '- (list (Int 42))) (Var 'y25922))
  (Prim '- (list (Var 'x25921)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x25921
  (Let 'y25922 (Prim '- (list (Int 42))) (Var 'y25922))
  (Prim '- (list (Var 'x25921)))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_5"

expected-result:
42


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'y25922) (Prim '- (list (Int 42))))
    (Seq
     (Assign (Var 'x25921) (Var 'y25922))
     (Return (Prim '- (list (Var 'x25921)))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types (y25922 . Integer) (x25921 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'y25922) (Prim '- (list (Int 42))))
    (Seq
     (Assign (Var 'x25921) (Var 'y25922))
     (Return (Prim '- (list (Var 'x25921)))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_5"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types (y25922 . Integer) (x25921 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 42) (Var 'y25922)))
     (Instr 'negq (list (Var 'y25922)))
     (Instr 'movq (list (Var 'y25922) (Var 'x25921)))
     (Instr 'movq (list (Var 'x25921) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types (y25922 . Integer) (x25921 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 42) (Var 'y25922)))
     (Instr 'negq (list (Var 'y25922)))
     (Instr 'movq (list (Var 'y25922) (Var 'x25921)))
     (Instr 'movq (list (Var 'x25921) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_5"

expected-result:
42


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (y25922 . Integer) (x25921 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'y25922) (Reg 'rsp))
      (set (Var 'y25922) (Reg 'rsp))
      (set (Var 'x25921) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Var 'y25922)))
     (Instr 'negq (list (Var 'y25922)))
     (Instr 'movq (list (Var 'y25922) (Var 'x25921)))
     (Instr 'movq (list (Var 'x25921) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (y25922 . Integer) (x25921 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'y25922) (Reg 'rsp))
      (set (Var 'y25922) (Reg 'rsp))
      (set (Var 'x25921) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Var 'y25922)))
     (Instr 'negq (list (Var 'y25922)))
     (Instr 'movq (list (Var 'y25922) (Var 'x25921)))
     (Instr 'movq (list (Var 'x25921) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_5"

expected-result:
42


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (y25922 . Integer) (x25921 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'y25922) (Reg 'rsp))
      (set (Var 'y25922) (Reg 'rsp))
      (set (Var 'x25921) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Var 'y25922)))
     (Instr 'negq (list (Var 'y25922)))
     (Instr 'movq (list (Var 'y25922) (Var 'x25921)))
     (Instr 'movq (list (Var 'x25921) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (y25922 . Integer) (x25921 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'y25922) (Reg 'rsp))
      (set (Var 'y25922) (Reg 'rsp))
      (set (Var 'x25921) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Var 'y25922)))
     (Instr 'negq (list (Var 'y25922)))
     (Instr 'movq (list (Var 'y25922) (Var 'x25921)))
     (Instr 'movq (list (Var 'x25921) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_5"

expected-result:
42


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (y25922 . Integer) (x25921 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'y25922) (Reg 'rsp))
      (set (Var 'y25922) (Reg 'rsp))
      (set (Var 'x25921) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (y25922 . Integer) (x25921 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'y25922) (Reg 'rsp))
      (set (Var 'y25922) (Reg 'rsp))
      (set (Var 'x25921) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_5"

expected-result:
42


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (y25922 . Integer) (x25921 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'y25922) (Reg 'rsp))
      (set (Var 'y25922) (Reg 'rsp))
      (set (Var 'x25921) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (y25922 . Integer) (x25921 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'y25922) (Reg 'rsp))
      (set (Var 'y25922) (Reg 'rsp))
      (set (Var 'x25921) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_5"

expected-result:
42


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (y25922 . Integer) (x25921 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'y25922) (Reg 'rsp))
      (set (Var 'y25922) (Reg 'rsp))
      (set (Var 'x25921) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (y25922 . Integer) (x25921 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'y25922) (Reg 'rsp))
      (set (Var 'y25922) (Reg 'rsp))
      (set (Var 'x25921) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"var_test_5"

expected-result:
42


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Let
  'x
  (Int 100)
  (Prim
   '+
   (list
    (Prim
     '-
     (list
      (Let 'x (Int 23) (Prim '+ (list (Let 'x (Int 13) (Var 'x)) (Var 'x))))))
    (Var 'x)))))


testing @ utilities.rkt:2016
test-name:
"var_test_6"

expected-result:
64


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x
  (Int 100)
  (Prim
   '+
   (list
    (Prim
     '-
     (list
      (Let 'x (Int 23) (Prim '+ (list (Let 'x (Int 13) (Var 'x)) (Var 'x))))))
    (Var 'x)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x
  (Int 100)
  (Prim
   '+
   (list
    (Prim
     '-
     (list
      (Let 'x (Int 23) (Prim '+ (list (Let 'x (Int 13) (Var 'x)) (Var 'x))))))
    (Var 'x)))))


output:  @ utilities.rkt:2042
result:
64


testing @ utilities.rkt:2016
test-name:
"var_test_6"

expected-result:
64


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x25929
  (Int 100)
  (Prim
   '+
   (list
    (Prim
     '-
     (list
      (Let
       'x25930
       (Int 23)
       (Prim '+ (list (Let 'x25931 (Int 13) (Var 'x25931)) (Var 'x25930))))))
    (Var 'x25929)))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x25929
  (Int 100)
  (Prim
   '+
   (list
    (Prim
     '-
     (list
      (Let
       'x25930
       (Int 23)
       (Prim '+ (list (Let 'x25931 (Int 13) (Var 'x25931)) (Var 'x25930))))))
    (Var 'x25929)))))


output:  @ utilities.rkt:2042
result:
64


testing @ utilities.rkt:2016
test-name:
"var_test_6"

expected-result:
64


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x25929
  (Int 100)
  (Prim
   '+
   (list
    (Prim
     '-
     (list
      (Let
       'x25930
       (Int 23)
       (Prim '+ (list (Let 'x25931 (Int 13) (Var 'x25931)) (Var 'x25930))))))
    (Var 'x25929)))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x25929
  (Int 100)
  (Prim
   '+
   (list
    (Prim
     '-
     (list
      (Let
       'x25930
       (Int 23)
       (Prim '+ (list (Let 'x25931 (Int 13) (Var 'x25931)) (Var 'x25930))))))
    (Var 'x25929)))))


output:  @ utilities.rkt:2042
result:
64


testing @ utilities.rkt:2016
test-name:
"var_test_6"

expected-result:
64


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x25929
  (Int 100)
  (Let
   'x25930
   (Int 23)
   (Let
    'x25931
    (Int 13)
    (Let
     'g25933
     (Prim '+ (list (Var 'x25931) (Var 'x25930)))
     (Let
      'g25932
      (Prim '- (list (Var 'g25933)))
      (Prim '+ (list (Var 'g25932) (Var 'x25929)))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x25929
  (Int 100)
  (Let
   'x25930
   (Int 23)
   (Let
    'x25931
    (Int 13)
    (Let
     'g25933
     (Prim '+ (list (Var 'x25931) (Var 'x25930)))
     (Let
      'g25932
      (Prim '- (list (Var 'g25933)))
      (Prim '+ (list (Var 'g25932) (Var 'x25929)))))))))


output:  @ utilities.rkt:2042
result:
64


testing @ utilities.rkt:2016
test-name:
"var_test_6"

expected-result:
64


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'x25929) (Int 100))
    (Seq
     (Assign (Var 'x25930) (Int 23))
     (Seq
      (Assign (Var 'x25931) (Int 13))
      (Seq
       (Assign (Var 'g25933) (Prim '+ (list (Var 'x25931) (Var 'x25930))))
       (Seq
        (Assign (Var 'g25932) (Prim '- (list (Var 'g25933))))
        (Return (Prim '+ (list (Var 'g25932) (Var 'x25929))))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types
    (g25932 . Integer)
    (x25931 . Integer)
    (x25930 . Integer)
    (x25929 . Integer)
    (g25933 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'x25929) (Int 100))
    (Seq
     (Assign (Var 'x25930) (Int 23))
     (Seq
      (Assign (Var 'x25931) (Int 13))
      (Seq
       (Assign (Var 'g25933) (Prim '+ (list (Var 'x25931) (Var 'x25930))))
       (Seq
        (Assign (Var 'g25932) (Prim '- (list (Var 'g25933))))
        (Return (Prim '+ (list (Var 'g25932) (Var 'x25929))))))))))))


output:  @ utilities.rkt:2042
result:
64


testing @ utilities.rkt:2016
test-name:
"var_test_6"

expected-result:
64


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (g25932 . Integer)
    (x25931 . Integer)
    (x25930 . Integer)
    (x25929 . Integer)
    (g25933 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 100) (Var 'x25929)))
     (Instr 'movq (list (Imm 23) (Var 'x25930)))
     (Instr 'movq (list (Imm 13) (Var 'x25931)))
     (Instr 'movq (list (Var 'x25931) (Var 'g25933)))
     (Instr 'addq (list (Var 'x25930) (Var 'g25933)))
     (Instr 'movq (list (Var 'g25933) (Var 'g25932)))
     (Instr 'negq (list (Var 'g25932)))
     (Instr 'movq (list (Var 'g25932) (Reg 'rax)))
     (Instr 'addq (list (Var 'x25929) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (g25932 . Integer)
    (x25931 . Integer)
    (x25930 . Integer)
    (x25929 . Integer)
    (g25933 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 100) (Var 'x25929)))
     (Instr 'movq (list (Imm 23) (Var 'x25930)))
     (Instr 'movq (list (Imm 13) (Var 'x25931)))
     (Instr 'movq (list (Var 'x25931) (Var 'g25933)))
     (Instr 'addq (list (Var 'x25930) (Var 'g25933)))
     (Instr 'movq (list (Var 'g25933) (Var 'g25932)))
     (Instr 'negq (list (Var 'g25932)))
     (Instr 'movq (list (Var 'g25932) (Reg 'rax)))
     (Instr 'addq (list (Var 'x25929) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
64


testing @ utilities.rkt:2016
test-name:
"var_test_6"

expected-result:
64


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25932 . Integer)
    (x25931 . Integer)
    (x25930 . Integer)
    (x25929 . Integer)
    (g25933 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25929) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Var 'x25931) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Var 'g25933) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25933) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25932) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25932) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25929))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 100) (Var 'x25929)))
     (Instr 'movq (list (Imm 23) (Var 'x25930)))
     (Instr 'movq (list (Imm 13) (Var 'x25931)))
     (Instr 'movq (list (Var 'x25931) (Var 'g25933)))
     (Instr 'addq (list (Var 'x25930) (Var 'g25933)))
     (Instr 'movq (list (Var 'g25933) (Var 'g25932)))
     (Instr 'negq (list (Var 'g25932)))
     (Instr 'movq (list (Var 'g25932) (Reg 'rax)))
     (Instr 'addq (list (Var 'x25929) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25932 . Integer)
    (x25931 . Integer)
    (x25930 . Integer)
    (x25929 . Integer)
    (g25933 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25929) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Var 'x25931) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Var 'g25933) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25933) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25932) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25932) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25929))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 100) (Var 'x25929)))
     (Instr 'movq (list (Imm 23) (Var 'x25930)))
     (Instr 'movq (list (Imm 13) (Var 'x25931)))
     (Instr 'movq (list (Var 'x25931) (Var 'g25933)))
     (Instr 'addq (list (Var 'x25930) (Var 'g25933)))
     (Instr 'movq (list (Var 'g25933) (Var 'g25932)))
     (Instr 'negq (list (Var 'g25932)))
     (Instr 'movq (list (Var 'g25932) (Reg 'rax)))
     (Instr 'addq (list (Var 'x25929) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
64


testing @ utilities.rkt:2016
test-name:
"var_test_6"

expected-result:
64


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25932 . Integer)
    (x25931 . Integer)
    (x25930 . Integer)
    (x25929 . Integer)
    (g25933 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25929) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Var 'x25931) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Var 'g25933) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25933) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25932) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25932) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25929))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 100) (Var 'x25929)))
     (Instr 'movq (list (Imm 23) (Var 'x25930)))
     (Instr 'movq (list (Imm 13) (Var 'x25931)))
     (Instr 'movq (list (Var 'x25931) (Var 'g25933)))
     (Instr 'addq (list (Var 'x25930) (Var 'g25933)))
     (Instr 'movq (list (Var 'g25933) (Var 'g25932)))
     (Instr 'negq (list (Var 'g25932)))
     (Instr 'movq (list (Var 'g25932) (Reg 'rax)))
     (Instr 'addq (list (Var 'x25929) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25932 . Integer)
    (x25931 . Integer)
    (x25930 . Integer)
    (x25929 . Integer)
    (g25933 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25929) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Var 'x25931) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Var 'g25933) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25933) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25932) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25932) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25929))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 100) (Var 'x25929)))
     (Instr 'movq (list (Imm 23) (Var 'x25930)))
     (Instr 'movq (list (Imm 13) (Var 'x25931)))
     (Instr 'movq (list (Var 'x25931) (Var 'g25933)))
     (Instr 'addq (list (Var 'x25930) (Var 'g25933)))
     (Instr 'movq (list (Var 'g25933) (Var 'g25932)))
     (Instr 'negq (list (Var 'g25932)))
     (Instr 'movq (list (Var 'g25932) (Reg 'rax)))
     (Instr 'addq (list (Var 'x25929) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
64


testing @ utilities.rkt:2016
test-name:
"var_test_6"

expected-result:
64


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25932 . Integer)
    (x25931 . Integer)
    (x25930 . Integer)
    (x25929 . Integer)
    (g25933 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25929) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Var 'x25931) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Var 'g25933) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25933) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25932) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25932) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25929))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 100) (Reg 'rbx)))
     (Instr 'movq (list (Imm 23) (Reg 'rdx)))
     (Instr 'movq (list (Imm 13) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rcx)))
     (Instr 'negq (list (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25932 . Integer)
    (x25931 . Integer)
    (x25930 . Integer)
    (x25929 . Integer)
    (g25933 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25929) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Var 'x25931) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Var 'g25933) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25933) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25932) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25932) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25929))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 100) (Reg 'rbx)))
     (Instr 'movq (list (Imm 23) (Reg 'rdx)))
     (Instr 'movq (list (Imm 13) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rcx)))
     (Instr 'negq (list (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
64


testing @ utilities.rkt:2016
test-name:
"var_test_6"

expected-result:
64


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25932 . Integer)
    (x25931 . Integer)
    (x25930 . Integer)
    (x25929 . Integer)
    (g25933 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25929) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Var 'x25931) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Var 'g25933) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25933) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25932) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25932) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25929))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 100) (Reg 'rbx)))
     (Instr 'movq (list (Imm 23) (Reg 'rdx)))
     (Instr 'movq (list (Imm 13) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'negq (list (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25932 . Integer)
    (x25931 . Integer)
    (x25930 . Integer)
    (x25929 . Integer)
    (g25933 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25929) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Var 'x25931) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Var 'g25933) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25933) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25932) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25932) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25929))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 100) (Reg 'rbx)))
     (Instr 'movq (list (Imm 23) (Reg 'rdx)))
     (Instr 'movq (list (Imm 13) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'negq (list (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
64


testing @ utilities.rkt:2016
test-name:
"var_test_6"

expected-result:
64


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25932 . Integer)
    (x25931 . Integer)
    (x25930 . Integer)
    (x25929 . Integer)
    (g25933 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25929) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Var 'x25931) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Var 'g25933) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25933) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25932) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25932) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25929))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 100) (Reg 'rbx)))
     (Instr 'movq (list (Imm 23) (Reg 'rdx)))
     (Instr 'movq (list (Imm 13) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'negq (list (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25932 . Integer)
    (x25931 . Integer)
    (x25930 . Integer)
    (x25929 . Integer)
    (g25933 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25929) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Var 'x25931) (Reg 'rsp))
      (set (Var 'x25929) (Var 'x25930) (Var 'g25933) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25933) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25932) (Reg 'rsp))
      (set (Var 'x25929) (Var 'g25932) (Reg 'rsp))
      (set (Reg 'rsp) (Reg 'rax) (Var 'x25929))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 100) (Reg 'rbx)))
     (Instr 'movq (list (Imm 23) (Reg 'rdx)))
     (Instr 'movq (list (Imm 13) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'negq (list (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
64


testing @ utilities.rkt:2016
test-name:
"var_test_6"

expected-result:
64


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Let
  'x
  (Int 100)
  (Prim
   '-
   (list
    (Prim
     '-
     (list
      (Let
       'x
       (Int 23)
       (Prim
        '+
        (list
         (Let 'x (Int 23) (Prim '+ (list (Let 'x (Int 10) (Var 'x)) (Var 'x))))
         (Var 'x))))))))))


testing @ utilities.rkt:2016
test-name:
"var_test_7"

expected-result:
56


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x
  (Int 100)
  (Prim
   '-
   (list
    (Prim
     '-
     (list
      (Let
       'x
       (Int 23)
       (Prim
        '+
        (list
         (Let 'x (Int 23) (Prim '+ (list (Let 'x (Int 10) (Var 'x)) (Var 'x))))
         (Var 'x))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x
  (Int 100)
  (Prim
   '-
   (list
    (Prim
     '-
     (list
      (Let
       'x
       (Int 23)
       (Prim
        '+
        (list
         (Let 'x (Int 23) (Prim '+ (list (Let 'x (Int 10) (Var 'x)) (Var 'x))))
         (Var 'x))))))))))


output:  @ utilities.rkt:2042
result:
56


testing @ utilities.rkt:2016
test-name:
"var_test_7"

expected-result:
56


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x25940
  (Int 100)
  (Prim
   '-
   (list
    (Prim
     '-
     (list
      (Let
       'x25941
       (Int 23)
       (Prim
        '+
        (list
         (Let
          'x25942
          (Int 23)
          (Prim '+ (list (Let 'x25943 (Int 10) (Var 'x25943)) (Var 'x25942))))
         (Var 'x25941))))))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x25940
  (Int 100)
  (Prim
   '-
   (list
    (Prim
     '-
     (list
      (Let
       'x25941
       (Int 23)
       (Prim
        '+
        (list
         (Let
          'x25942
          (Int 23)
          (Prim '+ (list (Let 'x25943 (Int 10) (Var 'x25943)) (Var 'x25942))))
         (Var 'x25941))))))))))


output:  @ utilities.rkt:2042
result:
56


testing @ utilities.rkt:2016
test-name:
"var_test_7"

expected-result:
56


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x25940
  (Int 100)
  (Prim
   '-
   (list
    (Prim
     '-
     (list
      (Let
       'x25941
       (Int 23)
       (Prim
        '+
        (list
         (Let
          'x25942
          (Int 23)
          (Prim '+ (list (Let 'x25943 (Int 10) (Var 'x25943)) (Var 'x25942))))
         (Var 'x25941))))))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x25940
  (Int 100)
  (Prim
   '-
   (list
    (Prim
     '-
     (list
      (Let
       'x25941
       (Int 23)
       (Prim
        '+
        (list
         (Let
          'x25942
          (Int 23)
          (Prim '+ (list (Let 'x25943 (Int 10) (Var 'x25943)) (Var 'x25942))))
         (Var 'x25941))))))))))


output:  @ utilities.rkt:2042
result:
56


testing @ utilities.rkt:2016
test-name:
"var_test_7"

expected-result:
56


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x25940
  (Int 100)
  (Let
   'x25941
   (Int 23)
   (Let
    'x25942
    (Int 23)
    (Let
     'x25943
     (Int 10)
     (Let
      'g25946
      (Prim '+ (list (Var 'x25943) (Var 'x25942)))
      (Let
       'g25945
       (Prim '+ (list (Var 'g25946) (Var 'x25941)))
       (Let
        'g25944
        (Prim '- (list (Var 'g25945)))
        (Prim '- (list (Var 'g25944)))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x25940
  (Int 100)
  (Let
   'x25941
   (Int 23)
   (Let
    'x25942
    (Int 23)
    (Let
     'x25943
     (Int 10)
     (Let
      'g25946
      (Prim '+ (list (Var 'x25943) (Var 'x25942)))
      (Let
       'g25945
       (Prim '+ (list (Var 'g25946) (Var 'x25941)))
       (Let
        'g25944
        (Prim '- (list (Var 'g25945)))
        (Prim '- (list (Var 'g25944)))))))))))


output:  @ utilities.rkt:2042
result:
56


testing @ utilities.rkt:2016
test-name:
"var_test_7"

expected-result:
56


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'x25940) (Int 100))
    (Seq
     (Assign (Var 'x25941) (Int 23))
     (Seq
      (Assign (Var 'x25942) (Int 23))
      (Seq
       (Assign (Var 'x25943) (Int 10))
       (Seq
        (Assign (Var 'g25946) (Prim '+ (list (Var 'x25943) (Var 'x25942))))
        (Seq
         (Assign (Var 'g25945) (Prim '+ (list (Var 'g25946) (Var 'x25941))))
         (Seq
          (Assign (Var 'g25944) (Prim '- (list (Var 'g25945))))
          (Return (Prim '- (list (Var 'g25944))))))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types
    (x25940 . Integer)
    (g25946 . Integer)
    (g25945 . Integer)
    (g25944 . Integer)
    (x25943 . Integer)
    (x25942 . Integer)
    (x25941 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'x25940) (Int 100))
    (Seq
     (Assign (Var 'x25941) (Int 23))
     (Seq
      (Assign (Var 'x25942) (Int 23))
      (Seq
       (Assign (Var 'x25943) (Int 10))
       (Seq
        (Assign (Var 'g25946) (Prim '+ (list (Var 'x25943) (Var 'x25942))))
        (Seq
         (Assign (Var 'g25945) (Prim '+ (list (Var 'g25946) (Var 'x25941))))
         (Seq
          (Assign (Var 'g25944) (Prim '- (list (Var 'g25945))))
          (Return (Prim '- (list (Var 'g25944))))))))))))))


output:  @ utilities.rkt:2042
result:
56


testing @ utilities.rkt:2016
test-name:
"var_test_7"

expected-result:
56


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (x25940 . Integer)
    (g25946 . Integer)
    (g25945 . Integer)
    (g25944 . Integer)
    (x25943 . Integer)
    (x25942 . Integer)
    (x25941 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 100) (Var 'x25940)))
     (Instr 'movq (list (Imm 23) (Var 'x25941)))
     (Instr 'movq (list (Imm 23) (Var 'x25942)))
     (Instr 'movq (list (Imm 10) (Var 'x25943)))
     (Instr 'movq (list (Var 'x25943) (Var 'g25946)))
     (Instr 'addq (list (Var 'x25942) (Var 'g25946)))
     (Instr 'movq (list (Var 'g25946) (Var 'g25945)))
     (Instr 'addq (list (Var 'x25941) (Var 'g25945)))
     (Instr 'movq (list (Var 'g25945) (Var 'g25944)))
     (Instr 'negq (list (Var 'g25944)))
     (Instr 'movq (list (Var 'g25944) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (x25940 . Integer)
    (g25946 . Integer)
    (g25945 . Integer)
    (g25944 . Integer)
    (x25943 . Integer)
    (x25942 . Integer)
    (x25941 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 100) (Var 'x25940)))
     (Instr 'movq (list (Imm 23) (Var 'x25941)))
     (Instr 'movq (list (Imm 23) (Var 'x25942)))
     (Instr 'movq (list (Imm 10) (Var 'x25943)))
     (Instr 'movq (list (Var 'x25943) (Var 'g25946)))
     (Instr 'addq (list (Var 'x25942) (Var 'g25946)))
     (Instr 'movq (list (Var 'g25946) (Var 'g25945)))
     (Instr 'addq (list (Var 'x25941) (Var 'g25945)))
     (Instr 'movq (list (Var 'g25945) (Var 'g25944)))
     (Instr 'negq (list (Var 'g25944)))
     (Instr 'movq (list (Var 'g25944) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
56


testing @ utilities.rkt:2016
test-name:
"var_test_7"

expected-result:
56


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (x25940 . Integer)
    (g25946 . Integer)
    (g25945 . Integer)
    (g25944 . Integer)
    (x25943 . Integer)
    (x25942 . Integer)
    (x25941 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Var 'x25941) (Reg 'rsp))
      (set (Var 'x25941) (Var 'x25942) (Reg 'rsp))
      (set (Var 'x25941) (Var 'x25942) (Var 'x25943) (Reg 'rsp))
      (set (Var 'g25946) (Var 'x25941) (Var 'x25942) (Reg 'rsp))
      (set (Var 'g25946) (Var 'x25941) (Reg 'rsp))
      (set (Var 'g25945) (Var 'x25941) (Reg 'rsp))
      (set (Var 'g25945) (Reg 'rsp))
      (set (Reg 'rsp) (Var 'g25944))
      (set (Reg 'rsp) (Var 'g25944))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 100) (Var 'x25940)))
     (Instr 'movq (list (Imm 23) (Var 'x25941)))
     (Instr 'movq (list (Imm 23) (Var 'x25942)))
     (Instr 'movq (list (Imm 10) (Var 'x25943)))
     (Instr 'movq (list (Var 'x25943) (Var 'g25946)))
     (Instr 'addq (list (Var 'x25942) (Var 'g25946)))
     (Instr 'movq (list (Var 'g25946) (Var 'g25945)))
     (Instr 'addq (list (Var 'x25941) (Var 'g25945)))
     (Instr 'movq (list (Var 'g25945) (Var 'g25944)))
     (Instr 'negq (list (Var 'g25944)))
     (Instr 'movq (list (Var 'g25944) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (x25940 . Integer)
    (g25946 . Integer)
    (g25945 . Integer)
    (g25944 . Integer)
    (x25943 . Integer)
    (x25942 . Integer)
    (x25941 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Var 'x25941) (Reg 'rsp))
      (set (Var 'x25941) (Var 'x25942) (Reg 'rsp))
      (set (Var 'x25941) (Var 'x25942) (Var 'x25943) (Reg 'rsp))
      (set (Var 'g25946) (Var 'x25941) (Var 'x25942) (Reg 'rsp))
      (set (Var 'g25946) (Var 'x25941) (Reg 'rsp))
      (set (Var 'g25945) (Var 'x25941) (Reg 'rsp))
      (set (Var 'g25945) (Reg 'rsp))
      (set (Reg 'rsp) (Var 'g25944))
      (set (Reg 'rsp) (Var 'g25944))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 100) (Var 'x25940)))
     (Instr 'movq (list (Imm 23) (Var 'x25941)))
     (Instr 'movq (list (Imm 23) (Var 'x25942)))
     (Instr 'movq (list (Imm 10) (Var 'x25943)))
     (Instr 'movq (list (Var 'x25943) (Var 'g25946)))
     (Instr 'addq (list (Var 'x25942) (Var 'g25946)))
     (Instr 'movq (list (Var 'g25946) (Var 'g25945)))
     (Instr 'addq (list (Var 'x25941) (Var 'g25945)))
     (Instr 'movq (list (Var 'g25945) (Var 'g25944)))
     (Instr 'negq (list (Var 'g25944)))
     (Instr 'movq (list (Var 'g25944) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
56


testing @ utilities.rkt:2016
test-name:
"var_test_7"

expected-result:
56


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (x25940 . Integer)
    (g25946 . Integer)
    (g25945 . Integer)
    (g25944 . Integer)
    (x25943 . Integer)
    (x25942 . Integer)
    (x25941 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Var 'x25941) (Reg 'rsp))
      (set (Var 'x25941) (Var 'x25942) (Reg 'rsp))
      (set (Var 'x25941) (Var 'x25942) (Var 'x25943) (Reg 'rsp))
      (set (Var 'g25946) (Var 'x25941) (Var 'x25942) (Reg 'rsp))
      (set (Var 'g25946) (Var 'x25941) (Reg 'rsp))
      (set (Var 'g25945) (Var 'x25941) (Reg 'rsp))
      (set (Var 'g25945) (Reg 'rsp))
      (set (Reg 'rsp) (Var 'g25944))
      (set (Reg 'rsp) (Var 'g25944))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 100) (Var 'x25940)))
     (Instr 'movq (list (Imm 23) (Var 'x25941)))
     (Instr 'movq (list (Imm 23) (Var 'x25942)))
     (Instr 'movq (list (Imm 10) (Var 'x25943)))
     (Instr 'movq (list (Var 'x25943) (Var 'g25946)))
     (Instr 'addq (list (Var 'x25942) (Var 'g25946)))
     (Instr 'movq (list (Var 'g25946) (Var 'g25945)))
     (Instr 'addq (list (Var 'x25941) (Var 'g25945)))
     (Instr 'movq (list (Var 'g25945) (Var 'g25944)))
     (Instr 'negq (list (Var 'g25944)))
     (Instr 'movq (list (Var 'g25944) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (x25940 . Integer)
    (g25946 . Integer)
    (g25945 . Integer)
    (g25944 . Integer)
    (x25943 . Integer)
    (x25942 . Integer)
    (x25941 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Var 'x25941) (Reg 'rsp))
      (set (Var 'x25941) (Var 'x25942) (Reg 'rsp))
      (set (Var 'x25941) (Var 'x25942) (Var 'x25943) (Reg 'rsp))
      (set (Var 'g25946) (Var 'x25941) (Var 'x25942) (Reg 'rsp))
      (set (Var 'g25946) (Var 'x25941) (Reg 'rsp))
      (set (Var 'g25945) (Var 'x25941) (Reg 'rsp))
      (set (Var 'g25945) (Reg 'rsp))
      (set (Reg 'rsp) (Var 'g25944))
      (set (Reg 'rsp) (Var 'g25944))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 100) (Var 'x25940)))
     (Instr 'movq (list (Imm 23) (Var 'x25941)))
     (Instr 'movq (list (Imm 23) (Var 'x25942)))
     (Instr 'movq (list (Imm 10) (Var 'x25943)))
     (Instr 'movq (list (Var 'x25943) (Var 'g25946)))
     (Instr 'addq (list (Var 'x25942) (Var 'g25946)))
     (Instr 'movq (list (Var 'g25946) (Var 'g25945)))
     (Instr 'addq (list (Var 'x25941) (Var 'g25945)))
     (Instr 'movq (list (Var 'g25945) (Var 'g25944)))
     (Instr 'negq (list (Var 'g25944)))
     (Instr 'movq (list (Var 'g25944) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
56


testing @ utilities.rkt:2016
test-name:
"var_test_7"

expected-result:
56


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (x25940 . Integer)
    (g25946 . Integer)
    (g25945 . Integer)
    (g25944 . Integer)
    (x25943 . Integer)
    (x25942 . Integer)
    (x25941 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Var 'x25941) (Reg 'rsp))
      (set (Var 'x25941) (Var 'x25942) (Reg 'rsp))
      (set (Var 'x25941) (Var 'x25942) (Var 'x25943) (Reg 'rsp))
      (set (Var 'g25946) (Var 'x25941) (Var 'x25942) (Reg 'rsp))
      (set (Var 'g25946) (Var 'x25941) (Reg 'rsp))
      (set (Var 'g25945) (Var 'x25941) (Reg 'rsp))
      (set (Var 'g25945) (Reg 'rsp))
      (set (Reg 'rsp) (Var 'g25944))
      (set (Reg 'rsp) (Var 'g25944))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 100) (Reg 'rbx)))
     (Instr 'movq (list (Imm 23) (Reg 'rbx)))
     (Instr 'movq (list (Imm 23) (Reg 'rdx)))
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (x25940 . Integer)
    (g25946 . Integer)
    (g25945 . Integer)
    (g25944 . Integer)
    (x25943 . Integer)
    (x25942 . Integer)
    (x25941 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Var 'x25941) (Reg 'rsp))
      (set (Var 'x25941) (Var 'x25942) (Reg 'rsp))
      (set (Var 'x25941) (Var 'x25942) (Var 'x25943) (Reg 'rsp))
      (set (Var 'g25946) (Var 'x25941) (Var 'x25942) (Reg 'rsp))
      (set (Var 'g25946) (Var 'x25941) (Reg 'rsp))
      (set (Var 'g25945) (Var 'x25941) (Reg 'rsp))
      (set (Var 'g25945) (Reg 'rsp))
      (set (Reg 'rsp) (Var 'g25944))
      (set (Reg 'rsp) (Var 'g25944))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 100) (Reg 'rbx)))
     (Instr 'movq (list (Imm 23) (Reg 'rbx)))
     (Instr 'movq (list (Imm 23) (Reg 'rdx)))
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
56


testing @ utilities.rkt:2016
test-name:
"var_test_7"

expected-result:
56


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (x25940 . Integer)
    (g25946 . Integer)
    (g25945 . Integer)
    (g25944 . Integer)
    (x25943 . Integer)
    (x25942 . Integer)
    (x25941 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Var 'x25941) (Reg 'rsp))
      (set (Var 'x25941) (Var 'x25942) (Reg 'rsp))
      (set (Var 'x25941) (Var 'x25942) (Var 'x25943) (Reg 'rsp))
      (set (Var 'g25946) (Var 'x25941) (Var 'x25942) (Reg 'rsp))
      (set (Var 'g25946) (Var 'x25941) (Reg 'rsp))
      (set (Var 'g25945) (Var 'x25941) (Reg 'rsp))
      (set (Var 'g25945) (Reg 'rsp))
      (set (Reg 'rsp) (Var 'g25944))
      (set (Reg 'rsp) (Var 'g25944))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 100) (Reg 'rbx)))
     (Instr 'movq (list (Imm 23) (Reg 'rbx)))
     (Instr 'movq (list (Imm 23) (Reg 'rdx)))
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (x25940 . Integer)
    (g25946 . Integer)
    (g25945 . Integer)
    (g25944 . Integer)
    (x25943 . Integer)
    (x25942 . Integer)
    (x25941 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Var 'x25941) (Reg 'rsp))
      (set (Var 'x25941) (Var 'x25942) (Reg 'rsp))
      (set (Var 'x25941) (Var 'x25942) (Var 'x25943) (Reg 'rsp))
      (set (Var 'g25946) (Var 'x25941) (Var 'x25942) (Reg 'rsp))
      (set (Var 'g25946) (Var 'x25941) (Reg 'rsp))
      (set (Var 'g25945) (Var 'x25941) (Reg 'rsp))
      (set (Var 'g25945) (Reg 'rsp))
      (set (Reg 'rsp) (Var 'g25944))
      (set (Reg 'rsp) (Var 'g25944))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 100) (Reg 'rbx)))
     (Instr 'movq (list (Imm 23) (Reg 'rbx)))
     (Instr 'movq (list (Imm 23) (Reg 'rdx)))
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
56


testing @ utilities.rkt:2016
test-name:
"var_test_7"

expected-result:
56


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (x25940 . Integer)
    (g25946 . Integer)
    (g25945 . Integer)
    (g25944 . Integer)
    (x25943 . Integer)
    (x25942 . Integer)
    (x25941 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Var 'x25941) (Reg 'rsp))
      (set (Var 'x25941) (Var 'x25942) (Reg 'rsp))
      (set (Var 'x25941) (Var 'x25942) (Var 'x25943) (Reg 'rsp))
      (set (Var 'g25946) (Var 'x25941) (Var 'x25942) (Reg 'rsp))
      (set (Var 'g25946) (Var 'x25941) (Reg 'rsp))
      (set (Var 'g25945) (Var 'x25941) (Reg 'rsp))
      (set (Var 'g25945) (Reg 'rsp))
      (set (Reg 'rsp) (Var 'g25944))
      (set (Reg 'rsp) (Var 'g25944))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 100) (Reg 'rbx)))
     (Instr 'movq (list (Imm 23) (Reg 'rbx)))
     (Instr 'movq (list (Imm 23) (Reg 'rdx)))
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (x25940 . Integer)
    (g25946 . Integer)
    (g25945 . Integer)
    (g25944 . Integer)
    (x25943 . Integer)
    (x25942 . Integer)
    (x25941 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Var 'x25941) (Reg 'rsp))
      (set (Var 'x25941) (Var 'x25942) (Reg 'rsp))
      (set (Var 'x25941) (Var 'x25942) (Var 'x25943) (Reg 'rsp))
      (set (Var 'g25946) (Var 'x25941) (Var 'x25942) (Reg 'rsp))
      (set (Var 'g25946) (Var 'x25941) (Reg 'rsp))
      (set (Var 'g25945) (Var 'x25941) (Reg 'rsp))
      (set (Var 'g25945) (Reg 'rsp))
      (set (Reg 'rsp) (Var 'g25944))
      (set (Reg 'rsp) (Var 'g25944))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 100) (Reg 'rbx)))
     (Instr 'movq (list (Imm 23) (Reg 'rbx)))
     (Instr 'movq (list (Imm 23) (Reg 'rdx)))
     (Instr 'movq (list (Imm 10) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
56


testing @ utilities.rkt:2016
test-name:
"var_test_7"

expected-result:
56


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Let
  'x
  (Int 101)
  (Prim
   '+
   (list
    (Let
     'x
     (Int 23)
     (Prim
      '+
      (list
       (Let
        'x
        (Int 23)
        (Prim
         '+
         (list
          (Let 'x (Int 1) (Var 'x))
          (Prim '+ (list (Let 'y (Int 2) (Var 'y)) (Var 'x))))))
       (Var 'x))))
    (Var 'x)))))


testing @ utilities.rkt:2016
test-name:
"var_test_8"

expected-result:
150


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x
  (Int 101)
  (Prim
   '+
   (list
    (Let
     'x
     (Int 23)
     (Prim
      '+
      (list
       (Let
        'x
        (Int 23)
        (Prim
         '+
         (list
          (Let 'x (Int 1) (Var 'x))
          (Prim '+ (list (Let 'y (Int 2) (Var 'y)) (Var 'x))))))
       (Var 'x))))
    (Var 'x)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x
  (Int 101)
  (Prim
   '+
   (list
    (Let
     'x
     (Int 23)
     (Prim
      '+
      (list
       (Let
        'x
        (Int 23)
        (Prim
         '+
         (list
          (Let 'x (Int 1) (Var 'x))
          (Prim '+ (list (Let 'y (Int 2) (Var 'y)) (Var 'x))))))
       (Var 'x))))
    (Var 'x)))))


output:  @ utilities.rkt:2042
result:
150


testing @ utilities.rkt:2016
test-name:
"var_test_8"

expected-result:
150


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x25953
  (Int 101)
  (Prim
   '+
   (list
    (Let
     'x25954
     (Int 23)
     (Prim
      '+
      (list
       (Let
        'x25955
        (Int 23)
        (Prim
         '+
         (list
          (Let 'x25956 (Int 1) (Var 'x25956))
          (Prim '+ (list (Let 'y25957 (Int 2) (Var 'y25957)) (Var 'x25955))))))
       (Var 'x25954))))
    (Var 'x25953)))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x25953
  (Int 101)
  (Prim
   '+
   (list
    (Let
     'x25954
     (Int 23)
     (Prim
      '+
      (list
       (Let
        'x25955
        (Int 23)
        (Prim
         '+
         (list
          (Let 'x25956 (Int 1) (Var 'x25956))
          (Prim '+ (list (Let 'y25957 (Int 2) (Var 'y25957)) (Var 'x25955))))))
       (Var 'x25954))))
    (Var 'x25953)))))


output:  @ utilities.rkt:2042
result:
150


testing @ utilities.rkt:2016
test-name:
"var_test_8"

expected-result:
150


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x25953
  (Int 101)
  (Prim
   '+
   (list
    (Let
     'x25954
     (Int 23)
     (Prim
      '+
      (list
       (Let
        'x25955
        (Int 23)
        (Prim
         '+
         (list
          (Let 'x25956 (Int 1) (Var 'x25956))
          (Prim '+ (list (Let 'y25957 (Int 2) (Var 'y25957)) (Var 'x25955))))))
       (Var 'x25954))))
    (Var 'x25953)))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x25953
  (Int 101)
  (Prim
   '+
   (list
    (Let
     'x25954
     (Int 23)
     (Prim
      '+
      (list
       (Let
        'x25955
        (Int 23)
        (Prim
         '+
         (list
          (Let 'x25956 (Int 1) (Var 'x25956))
          (Prim '+ (list (Let 'y25957 (Int 2) (Var 'y25957)) (Var 'x25955))))))
       (Var 'x25954))))
    (Var 'x25953)))))


output:  @ utilities.rkt:2042
result:
150


testing @ utilities.rkt:2016
test-name:
"var_test_8"

expected-result:
150


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x25953
  (Int 101)
  (Let
   'x25954
   (Int 23)
   (Let
    'x25955
    (Int 23)
    (Let
     'x25956
     (Int 1)
     (Let
      'y25957
      (Int 2)
      (Let
       'g25960
       (Prim '+ (list (Var 'y25957) (Var 'x25955)))
       (Let
        'g25959
        (Prim '+ (list (Var 'x25956) (Var 'g25960)))
        (Let
         'g25958
         (Prim '+ (list (Var 'g25959) (Var 'x25954)))
         (Prim '+ (list (Var 'g25958) (Var 'x25953))))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x25953
  (Int 101)
  (Let
   'x25954
   (Int 23)
   (Let
    'x25955
    (Int 23)
    (Let
     'x25956
     (Int 1)
     (Let
      'y25957
      (Int 2)
      (Let
       'g25960
       (Prim '+ (list (Var 'y25957) (Var 'x25955)))
       (Let
        'g25959
        (Prim '+ (list (Var 'x25956) (Var 'g25960)))
        (Let
         'g25958
         (Prim '+ (list (Var 'g25959) (Var 'x25954)))
         (Prim '+ (list (Var 'g25958) (Var 'x25953))))))))))))


output:  @ utilities.rkt:2042
result:
150


testing @ utilities.rkt:2016
test-name:
"var_test_8"

expected-result:
150


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'x25953) (Int 101))
    (Seq
     (Assign (Var 'x25954) (Int 23))
     (Seq
      (Assign (Var 'x25955) (Int 23))
      (Seq
       (Assign (Var 'x25956) (Int 1))
       (Seq
        (Assign (Var 'y25957) (Int 2))
        (Seq
         (Assign (Var 'g25960) (Prim '+ (list (Var 'y25957) (Var 'x25955))))
         (Seq
          (Assign (Var 'g25959) (Prim '+ (list (Var 'x25956) (Var 'g25960))))
          (Seq
           (Assign (Var 'g25958) (Prim '+ (list (Var 'g25959) (Var 'x25954))))
           (Return (Prim '+ (list (Var 'g25958) (Var 'x25953)))))))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types
    (x25956 . Integer)
    (x25955 . Integer)
    (x25954 . Integer)
    (x25953 . Integer)
    (g25960 . Integer)
    (g25959 . Integer)
    (g25958 . Integer)
    (y25957 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'x25953) (Int 101))
    (Seq
     (Assign (Var 'x25954) (Int 23))
     (Seq
      (Assign (Var 'x25955) (Int 23))
      (Seq
       (Assign (Var 'x25956) (Int 1))
       (Seq
        (Assign (Var 'y25957) (Int 2))
        (Seq
         (Assign (Var 'g25960) (Prim '+ (list (Var 'y25957) (Var 'x25955))))
         (Seq
          (Assign (Var 'g25959) (Prim '+ (list (Var 'x25956) (Var 'g25960))))
          (Seq
           (Assign (Var 'g25958) (Prim '+ (list (Var 'g25959) (Var 'x25954))))
           (Return (Prim '+ (list (Var 'g25958) (Var 'x25953)))))))))))))))


output:  @ utilities.rkt:2042
result:
150


testing @ utilities.rkt:2016
test-name:
"var_test_8"

expected-result:
150


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (x25956 . Integer)
    (x25955 . Integer)
    (x25954 . Integer)
    (x25953 . Integer)
    (g25960 . Integer)
    (g25959 . Integer)
    (g25958 . Integer)
    (y25957 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 101) (Var 'x25953)))
     (Instr 'movq (list (Imm 23) (Var 'x25954)))
     (Instr 'movq (list (Imm 23) (Var 'x25955)))
     (Instr 'movq (list (Imm 1) (Var 'x25956)))
     (Instr 'movq (list (Imm 2) (Var 'y25957)))
     (Instr 'movq (list (Var 'y25957) (Var 'g25960)))
     (Instr 'addq (list (Var 'x25955) (Var 'g25960)))
     (Instr 'movq (list (Var 'x25956) (Var 'g25959)))
     (Instr 'addq (list (Var 'g25960) (Var 'g25959)))
     (Instr 'movq (list (Var 'g25959) (Var 'g25958)))
     (Instr 'addq (list (Var 'x25954) (Var 'g25958)))
     (Instr 'movq (list (Var 'g25958) (Reg 'rax)))
     (Instr 'addq (list (Var 'x25953) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (x25956 . Integer)
    (x25955 . Integer)
    (x25954 . Integer)
    (x25953 . Integer)
    (g25960 . Integer)
    (g25959 . Integer)
    (g25958 . Integer)
    (y25957 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 101) (Var 'x25953)))
     (Instr 'movq (list (Imm 23) (Var 'x25954)))
     (Instr 'movq (list (Imm 23) (Var 'x25955)))
     (Instr 'movq (list (Imm 1) (Var 'x25956)))
     (Instr 'movq (list (Imm 2) (Var 'y25957)))
     (Instr 'movq (list (Var 'y25957) (Var 'g25960)))
     (Instr 'addq (list (Var 'x25955) (Var 'g25960)))
     (Instr 'movq (list (Var 'x25956) (Var 'g25959)))
     (Instr 'addq (list (Var 'g25960) (Var 'g25959)))
     (Instr 'movq (list (Var 'g25959) (Var 'g25958)))
     (Instr 'addq (list (Var 'x25954) (Var 'g25958)))
     (Instr 'movq (list (Var 'g25958) (Reg 'rax)))
     (Instr 'addq (list (Var 'x25953) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
150


testing @ utilities.rkt:2016
test-name:
"var_test_8"

expected-result:
150


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (x25956 . Integer)
    (x25955 . Integer)
    (x25954 . Integer)
    (x25953 . Integer)
    (g25960 . Integer)
    (g25959 . Integer)
    (g25958 . Integer)
    (y25957 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25953) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25955) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25955) (Var 'x25956) (Reg 'rsp))
      (set
       (Var 'x25953)
       (Var 'x25954)
       (Var 'x25955)
       (Var 'x25956)
       (Var 'y25957)
       (Reg 'rsp))
      (set
       (Var 'x25953)
       (Var 'x25954)
       (Var 'x25955)
       (Var 'x25956)
       (Var 'g25960)
       (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25956) (Var 'g25960) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25959) (Var 'g25960) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25959) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25958) (Reg 'rsp))
      (set (Var 'x25953) (Var 'g25958) (Reg 'rsp))
      (set (Reg 'rax) (Var 'x25953) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 101) (Var 'x25953)))
     (Instr 'movq (list (Imm 23) (Var 'x25954)))
     (Instr 'movq (list (Imm 23) (Var 'x25955)))
     (Instr 'movq (list (Imm 1) (Var 'x25956)))
     (Instr 'movq (list (Imm 2) (Var 'y25957)))
     (Instr 'movq (list (Var 'y25957) (Var 'g25960)))
     (Instr 'addq (list (Var 'x25955) (Var 'g25960)))
     (Instr 'movq (list (Var 'x25956) (Var 'g25959)))
     (Instr 'addq (list (Var 'g25960) (Var 'g25959)))
     (Instr 'movq (list (Var 'g25959) (Var 'g25958)))
     (Instr 'addq (list (Var 'x25954) (Var 'g25958)))
     (Instr 'movq (list (Var 'g25958) (Reg 'rax)))
     (Instr 'addq (list (Var 'x25953) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (x25956 . Integer)
    (x25955 . Integer)
    (x25954 . Integer)
    (x25953 . Integer)
    (g25960 . Integer)
    (g25959 . Integer)
    (g25958 . Integer)
    (y25957 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25953) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25955) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25955) (Var 'x25956) (Reg 'rsp))
      (set
       (Var 'x25953)
       (Var 'x25954)
       (Var 'x25955)
       (Var 'x25956)
       (Var 'y25957)
       (Reg 'rsp))
      (set
       (Var 'x25953)
       (Var 'x25954)
       (Var 'x25955)
       (Var 'x25956)
       (Var 'g25960)
       (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25956) (Var 'g25960) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25959) (Var 'g25960) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25959) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25958) (Reg 'rsp))
      (set (Var 'x25953) (Var 'g25958) (Reg 'rsp))
      (set (Reg 'rax) (Var 'x25953) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 101) (Var 'x25953)))
     (Instr 'movq (list (Imm 23) (Var 'x25954)))
     (Instr 'movq (list (Imm 23) (Var 'x25955)))
     (Instr 'movq (list (Imm 1) (Var 'x25956)))
     (Instr 'movq (list (Imm 2) (Var 'y25957)))
     (Instr 'movq (list (Var 'y25957) (Var 'g25960)))
     (Instr 'addq (list (Var 'x25955) (Var 'g25960)))
     (Instr 'movq (list (Var 'x25956) (Var 'g25959)))
     (Instr 'addq (list (Var 'g25960) (Var 'g25959)))
     (Instr 'movq (list (Var 'g25959) (Var 'g25958)))
     (Instr 'addq (list (Var 'x25954) (Var 'g25958)))
     (Instr 'movq (list (Var 'g25958) (Reg 'rax)))
     (Instr 'addq (list (Var 'x25953) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
150


testing @ utilities.rkt:2016
test-name:
"var_test_8"

expected-result:
150


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (x25956 . Integer)
    (x25955 . Integer)
    (x25954 . Integer)
    (x25953 . Integer)
    (g25960 . Integer)
    (g25959 . Integer)
    (g25958 . Integer)
    (y25957 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25953) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25955) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25955) (Var 'x25956) (Reg 'rsp))
      (set
       (Var 'x25953)
       (Var 'x25954)
       (Var 'x25955)
       (Var 'x25956)
       (Var 'y25957)
       (Reg 'rsp))
      (set
       (Var 'x25953)
       (Var 'x25954)
       (Var 'x25955)
       (Var 'x25956)
       (Var 'g25960)
       (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25956) (Var 'g25960) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25959) (Var 'g25960) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25959) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25958) (Reg 'rsp))
      (set (Var 'x25953) (Var 'g25958) (Reg 'rsp))
      (set (Reg 'rax) (Var 'x25953) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 101) (Var 'x25953)))
     (Instr 'movq (list (Imm 23) (Var 'x25954)))
     (Instr 'movq (list (Imm 23) (Var 'x25955)))
     (Instr 'movq (list (Imm 1) (Var 'x25956)))
     (Instr 'movq (list (Imm 2) (Var 'y25957)))
     (Instr 'movq (list (Var 'y25957) (Var 'g25960)))
     (Instr 'addq (list (Var 'x25955) (Var 'g25960)))
     (Instr 'movq (list (Var 'x25956) (Var 'g25959)))
     (Instr 'addq (list (Var 'g25960) (Var 'g25959)))
     (Instr 'movq (list (Var 'g25959) (Var 'g25958)))
     (Instr 'addq (list (Var 'x25954) (Var 'g25958)))
     (Instr 'movq (list (Var 'g25958) (Reg 'rax)))
     (Instr 'addq (list (Var 'x25953) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (x25956 . Integer)
    (x25955 . Integer)
    (x25954 . Integer)
    (x25953 . Integer)
    (g25960 . Integer)
    (g25959 . Integer)
    (g25958 . Integer)
    (y25957 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25953) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25955) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25955) (Var 'x25956) (Reg 'rsp))
      (set
       (Var 'x25953)
       (Var 'x25954)
       (Var 'x25955)
       (Var 'x25956)
       (Var 'y25957)
       (Reg 'rsp))
      (set
       (Var 'x25953)
       (Var 'x25954)
       (Var 'x25955)
       (Var 'x25956)
       (Var 'g25960)
       (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25956) (Var 'g25960) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25959) (Var 'g25960) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25959) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25958) (Reg 'rsp))
      (set (Var 'x25953) (Var 'g25958) (Reg 'rsp))
      (set (Reg 'rax) (Var 'x25953) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 101) (Var 'x25953)))
     (Instr 'movq (list (Imm 23) (Var 'x25954)))
     (Instr 'movq (list (Imm 23) (Var 'x25955)))
     (Instr 'movq (list (Imm 1) (Var 'x25956)))
     (Instr 'movq (list (Imm 2) (Var 'y25957)))
     (Instr 'movq (list (Var 'y25957) (Var 'g25960)))
     (Instr 'addq (list (Var 'x25955) (Var 'g25960)))
     (Instr 'movq (list (Var 'x25956) (Var 'g25959)))
     (Instr 'addq (list (Var 'g25960) (Var 'g25959)))
     (Instr 'movq (list (Var 'g25959) (Var 'g25958)))
     (Instr 'addq (list (Var 'x25954) (Var 'g25958)))
     (Instr 'movq (list (Var 'g25958) (Reg 'rax)))
     (Instr 'addq (list (Var 'x25953) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
150


testing @ utilities.rkt:2016
test-name:
"var_test_8"

expected-result:
150


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (x25956 . Integer)
    (x25955 . Integer)
    (x25954 . Integer)
    (x25953 . Integer)
    (g25960 . Integer)
    (g25959 . Integer)
    (g25958 . Integer)
    (y25957 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25953) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25955) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25955) (Var 'x25956) (Reg 'rsp))
      (set
       (Var 'x25953)
       (Var 'x25954)
       (Var 'x25955)
       (Var 'x25956)
       (Var 'y25957)
       (Reg 'rsp))
      (set
       (Var 'x25953)
       (Var 'x25954)
       (Var 'x25955)
       (Var 'x25956)
       (Var 'g25960)
       (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25956) (Var 'g25960) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25959) (Var 'g25960) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25959) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25958) (Reg 'rsp))
      (set (Var 'x25953) (Var 'g25958) (Reg 'rsp))
      (set (Reg 'rax) (Var 'x25953) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 101) (Reg 'rbx)))
     (Instr 'movq (list (Imm 23) (Reg 'rsi)))
     (Instr 'movq (list (Imm 23) (Reg 'rdx)))
     (Instr 'movq (list (Imm 1) (Reg 'rdi)))
     (Instr 'movq (list (Imm 2) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rdi) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (x25956 . Integer)
    (x25955 . Integer)
    (x25954 . Integer)
    (x25953 . Integer)
    (g25960 . Integer)
    (g25959 . Integer)
    (g25958 . Integer)
    (y25957 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25953) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25955) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25955) (Var 'x25956) (Reg 'rsp))
      (set
       (Var 'x25953)
       (Var 'x25954)
       (Var 'x25955)
       (Var 'x25956)
       (Var 'y25957)
       (Reg 'rsp))
      (set
       (Var 'x25953)
       (Var 'x25954)
       (Var 'x25955)
       (Var 'x25956)
       (Var 'g25960)
       (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25956) (Var 'g25960) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25959) (Var 'g25960) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25959) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25958) (Reg 'rsp))
      (set (Var 'x25953) (Var 'g25958) (Reg 'rsp))
      (set (Reg 'rax) (Var 'x25953) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 101) (Reg 'rbx)))
     (Instr 'movq (list (Imm 23) (Reg 'rsi)))
     (Instr 'movq (list (Imm 23) (Reg 'rdx)))
     (Instr 'movq (list (Imm 1) (Reg 'rdi)))
     (Instr 'movq (list (Imm 2) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rdi) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
150


testing @ utilities.rkt:2016
test-name:
"var_test_8"

expected-result:
150


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (x25956 . Integer)
    (x25955 . Integer)
    (x25954 . Integer)
    (x25953 . Integer)
    (g25960 . Integer)
    (g25959 . Integer)
    (g25958 . Integer)
    (y25957 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25953) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25955) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25955) (Var 'x25956) (Reg 'rsp))
      (set
       (Var 'x25953)
       (Var 'x25954)
       (Var 'x25955)
       (Var 'x25956)
       (Var 'y25957)
       (Reg 'rsp))
      (set
       (Var 'x25953)
       (Var 'x25954)
       (Var 'x25955)
       (Var 'x25956)
       (Var 'g25960)
       (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25956) (Var 'g25960) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25959) (Var 'g25960) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25959) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25958) (Reg 'rsp))
      (set (Var 'x25953) (Var 'g25958) (Reg 'rsp))
      (set (Reg 'rax) (Var 'x25953) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 101) (Reg 'rbx)))
     (Instr 'movq (list (Imm 23) (Reg 'rsi)))
     (Instr 'movq (list (Imm 23) (Reg 'rdx)))
     (Instr 'movq (list (Imm 1) (Reg 'rdi)))
     (Instr 'movq (list (Imm 2) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rdi) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (x25956 . Integer)
    (x25955 . Integer)
    (x25954 . Integer)
    (x25953 . Integer)
    (g25960 . Integer)
    (g25959 . Integer)
    (g25958 . Integer)
    (y25957 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25953) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25955) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25955) (Var 'x25956) (Reg 'rsp))
      (set
       (Var 'x25953)
       (Var 'x25954)
       (Var 'x25955)
       (Var 'x25956)
       (Var 'y25957)
       (Reg 'rsp))
      (set
       (Var 'x25953)
       (Var 'x25954)
       (Var 'x25955)
       (Var 'x25956)
       (Var 'g25960)
       (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25956) (Var 'g25960) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25959) (Var 'g25960) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25959) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25958) (Reg 'rsp))
      (set (Var 'x25953) (Var 'g25958) (Reg 'rsp))
      (set (Reg 'rax) (Var 'x25953) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 101) (Reg 'rbx)))
     (Instr 'movq (list (Imm 23) (Reg 'rsi)))
     (Instr 'movq (list (Imm 23) (Reg 'rdx)))
     (Instr 'movq (list (Imm 1) (Reg 'rdi)))
     (Instr 'movq (list (Imm 2) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rdi) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
150


testing @ utilities.rkt:2016
test-name:
"var_test_8"

expected-result:
150


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (x25956 . Integer)
    (x25955 . Integer)
    (x25954 . Integer)
    (x25953 . Integer)
    (g25960 . Integer)
    (g25959 . Integer)
    (g25958 . Integer)
    (y25957 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25953) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25955) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25955) (Var 'x25956) (Reg 'rsp))
      (set
       (Var 'x25953)
       (Var 'x25954)
       (Var 'x25955)
       (Var 'x25956)
       (Var 'y25957)
       (Reg 'rsp))
      (set
       (Var 'x25953)
       (Var 'x25954)
       (Var 'x25955)
       (Var 'x25956)
       (Var 'g25960)
       (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25956) (Var 'g25960) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25959) (Var 'g25960) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25959) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25958) (Reg 'rsp))
      (set (Var 'x25953) (Var 'g25958) (Reg 'rsp))
      (set (Reg 'rax) (Var 'x25953) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 101) (Reg 'rbx)))
     (Instr 'movq (list (Imm 23) (Reg 'rsi)))
     (Instr 'movq (list (Imm 23) (Reg 'rdx)))
     (Instr 'movq (list (Imm 1) (Reg 'rdi)))
     (Instr 'movq (list (Imm 2) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rdi) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (x25956 . Integer)
    (x25955 . Integer)
    (x25954 . Integer)
    (x25953 . Integer)
    (g25960 . Integer)
    (g25959 . Integer)
    (g25958 . Integer)
    (y25957 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x25953) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25955) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25955) (Var 'x25956) (Reg 'rsp))
      (set
       (Var 'x25953)
       (Var 'x25954)
       (Var 'x25955)
       (Var 'x25956)
       (Var 'y25957)
       (Reg 'rsp))
      (set
       (Var 'x25953)
       (Var 'x25954)
       (Var 'x25955)
       (Var 'x25956)
       (Var 'g25960)
       (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'x25956) (Var 'g25960) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25959) (Var 'g25960) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25959) (Reg 'rsp))
      (set (Var 'x25953) (Var 'x25954) (Var 'g25958) (Reg 'rsp))
      (set (Var 'x25953) (Var 'g25958) (Reg 'rsp))
      (set (Reg 'rax) (Var 'x25953) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 101) (Reg 'rbx)))
     (Instr 'movq (list (Imm 23) (Reg 'rsi)))
     (Instr 'movq (list (Imm 23) (Reg 'rdx)))
     (Instr 'movq (list (Imm 1) (Reg 'rdi)))
     (Instr 'movq (list (Imm 2) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rdi) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rsi) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
150


testing @ utilities.rkt:2016
test-name:
"var_test_8"

expected-result:
150


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Let
  'x
  (Let
   'y
   (Int 29)
   (Prim '+ (list (Int 20) (Prim '+ (list (Int 9) (Prim '- (list (Var 'y))))))))
  (Prim
   '+
   (list
    (Prim '- (list (Var 'x)))
    (Prim
     '+
     (list (Int 20) (Prim '+ (list (Prim '- (list (Int 9))) (Int 30)))))))))


testing @ utilities.rkt:2016
test-name:
"var_test_9"

expected-result:
41


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x
  (Let
   'y
   (Int 29)
   (Prim '+ (list (Int 20) (Prim '+ (list (Int 9) (Prim '- (list (Var 'y))))))))
  (Prim
   '+
   (list
    (Prim '- (list (Var 'x)))
    (Prim
     '+
     (list (Int 20) (Prim '+ (list (Prim '- (list (Int 9))) (Int 30)))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x
  (Let
   'y
   (Int 29)
   (Prim '+ (list (Int 20) (Prim '+ (list (Int 9) (Prim '- (list (Var 'y))))))))
  (Prim
   '+
   (list
    (Prim '- (list (Var 'x)))
    (Prim
     '+
     (list (Int 20) (Prim '+ (list (Prim '- (list (Int 9))) (Int 30)))))))))


output:  @ utilities.rkt:2042
result:
41


testing @ utilities.rkt:2016
test-name:
"var_test_9"

expected-result:
41


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x25967
  (Let
   'y25968
   (Int 29)
   (Prim
    '+
    (list (Int 20) (Prim '+ (list (Int 9) (Prim '- (list (Var 'y25968))))))))
  (Prim
   '+
   (list
    (Prim '- (list (Var 'x25967)))
    (Prim
     '+
     (list (Int 20) (Prim '+ (list (Prim '- (list (Int 9))) (Int 30)))))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x25967
  (Let
   'y25968
   (Int 29)
   (Prim
    '+
    (list (Int 20) (Prim '+ (list (Int 9) (Prim '- (list (Var 'y25968))))))))
  (Prim
   '+
   (list
    (Prim '- (list (Var 'x25967)))
    (Prim
     '+
     (list (Int 20) (Prim '+ (list (Prim '- (list (Int 9))) (Int 30)))))))))


output:  @ utilities.rkt:2042
result:
41


testing @ utilities.rkt:2016
test-name:
"var_test_9"

expected-result:
41


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x25967
  (Let
   'y25968
   (Int 29)
   (Prim
    '+
    (list (Int 20) (Prim '+ (list (Int 9) (Prim '- (list (Var 'y25968))))))))
  (Prim
   '+
   (list
    (Prim '- (list (Var 'x25967)))
    (Prim
     '+
     (list (Int 20) (Prim '+ (list (Prim '- (list (Int 9))) (Int 30)))))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x25967
  (Let
   'y25968
   (Int 29)
   (Prim
    '+
    (list (Int 20) (Prim '+ (list (Int 9) (Prim '- (list (Var 'y25968))))))))
  (Prim
   '+
   (list
    (Prim '- (list (Var 'x25967)))
    (Prim
     '+
     (list (Int 20) (Prim '+ (list (Prim '- (list (Int 9))) (Int 30)))))))))


output:  @ utilities.rkt:2042
result:
41


testing @ utilities.rkt:2016
test-name:
"var_test_9"

expected-result:
41


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x25967
  (Let
   'y25968
   (Int 29)
   (Let
    'g25970
    (Prim '- (list (Var 'y25968)))
    (Let
     'g25969
     (Prim '+ (list (Int 9) (Var 'g25970)))
     (Prim '+ (list (Int 20) (Var 'g25969))))))
  (Let
   'g25971
   (Prim '- (list (Var 'x25967)))
   (Let
    'g25974
    (Prim '- (list (Int 9)))
    (Let
     'g25973
     (Prim '+ (list (Var 'g25974) (Int 30)))
     (Let
      'g25972
      (Prim '+ (list (Int 20) (Var 'g25973)))
      (Prim '+ (list (Var 'g25971) (Var 'g25972)))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x25967
  (Let
   'y25968
   (Int 29)
   (Let
    'g25970
    (Prim '- (list (Var 'y25968)))
    (Let
     'g25969
     (Prim '+ (list (Int 9) (Var 'g25970)))
     (Prim '+ (list (Int 20) (Var 'g25969))))))
  (Let
   'g25971
   (Prim '- (list (Var 'x25967)))
   (Let
    'g25974
    (Prim '- (list (Int 9)))
    (Let
     'g25973
     (Prim '+ (list (Var 'g25974) (Int 30)))
     (Let
      'g25972
      (Prim '+ (list (Int 20) (Var 'g25973)))
      (Prim '+ (list (Var 'g25971) (Var 'g25972)))))))))


output:  @ utilities.rkt:2042
result:
41


testing @ utilities.rkt:2016
test-name:
"var_test_9"

expected-result:
41


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'y25968) (Int 29))
    (Seq
     (Assign (Var 'g25970) (Prim '- (list (Var 'y25968))))
     (Seq
      (Assign (Var 'g25969) (Prim '+ (list (Int 9) (Var 'g25970))))
      (Seq
       (Assign (Var 'x25967) (Prim '+ (list (Int 20) (Var 'g25969))))
       (Seq
        (Assign (Var 'g25971) (Prim '- (list (Var 'x25967))))
        (Seq
         (Assign (Var 'g25974) (Prim '- (list (Int 9))))
         (Seq
          (Assign (Var 'g25973) (Prim '+ (list (Var 'g25974) (Int 30))))
          (Seq
           (Assign (Var 'g25972) (Prim '+ (list (Int 20) (Var 'g25973))))
           (Return (Prim '+ (list (Var 'g25971) (Var 'g25972)))))))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types
    (g25973 . Integer)
    (g25974 . Integer)
    (x25967 . Integer)
    (y25968 . Integer)
    (g25969 . Integer)
    (g25970 . Integer)
    (g25971 . Integer)
    (g25972 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'y25968) (Int 29))
    (Seq
     (Assign (Var 'g25970) (Prim '- (list (Var 'y25968))))
     (Seq
      (Assign (Var 'g25969) (Prim '+ (list (Int 9) (Var 'g25970))))
      (Seq
       (Assign (Var 'x25967) (Prim '+ (list (Int 20) (Var 'g25969))))
       (Seq
        (Assign (Var 'g25971) (Prim '- (list (Var 'x25967))))
        (Seq
         (Assign (Var 'g25974) (Prim '- (list (Int 9))))
         (Seq
          (Assign (Var 'g25973) (Prim '+ (list (Var 'g25974) (Int 30))))
          (Seq
           (Assign (Var 'g25972) (Prim '+ (list (Int 20) (Var 'g25973))))
           (Return (Prim '+ (list (Var 'g25971) (Var 'g25972)))))))))))))))


output:  @ utilities.rkt:2042
result:
41


testing @ utilities.rkt:2016
test-name:
"var_test_9"

expected-result:
41


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (g25973 . Integer)
    (g25974 . Integer)
    (x25967 . Integer)
    (y25968 . Integer)
    (g25969 . Integer)
    (g25970 . Integer)
    (g25971 . Integer)
    (g25972 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 29) (Var 'y25968)))
     (Instr 'movq (list (Var 'y25968) (Var 'g25970)))
     (Instr 'negq (list (Var 'g25970)))
     (Instr 'movq (list (Imm 9) (Var 'g25969)))
     (Instr 'addq (list (Var 'g25970) (Var 'g25969)))
     (Instr 'movq (list (Imm 20) (Var 'x25967)))
     (Instr 'addq (list (Var 'g25969) (Var 'x25967)))
     (Instr 'movq (list (Var 'x25967) (Var 'g25971)))
     (Instr 'negq (list (Var 'g25971)))
     (Instr 'movq (list (Imm 9) (Var 'g25974)))
     (Instr 'negq (list (Var 'g25974)))
     (Instr 'movq (list (Var 'g25974) (Var 'g25973)))
     (Instr 'addq (list (Imm 30) (Var 'g25973)))
     (Instr 'movq (list (Imm 20) (Var 'g25972)))
     (Instr 'addq (list (Var 'g25973) (Var 'g25972)))
     (Instr 'movq (list (Var 'g25971) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25972) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (g25973 . Integer)
    (g25974 . Integer)
    (x25967 . Integer)
    (y25968 . Integer)
    (g25969 . Integer)
    (g25970 . Integer)
    (g25971 . Integer)
    (g25972 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 29) (Var 'y25968)))
     (Instr 'movq (list (Var 'y25968) (Var 'g25970)))
     (Instr 'negq (list (Var 'g25970)))
     (Instr 'movq (list (Imm 9) (Var 'g25969)))
     (Instr 'addq (list (Var 'g25970) (Var 'g25969)))
     (Instr 'movq (list (Imm 20) (Var 'x25967)))
     (Instr 'addq (list (Var 'g25969) (Var 'x25967)))
     (Instr 'movq (list (Var 'x25967) (Var 'g25971)))
     (Instr 'negq (list (Var 'g25971)))
     (Instr 'movq (list (Imm 9) (Var 'g25974)))
     (Instr 'negq (list (Var 'g25974)))
     (Instr 'movq (list (Var 'g25974) (Var 'g25973)))
     (Instr 'addq (list (Imm 30) (Var 'g25973)))
     (Instr 'movq (list (Imm 20) (Var 'g25972)))
     (Instr 'addq (list (Var 'g25973) (Var 'g25972)))
     (Instr 'movq (list (Var 'g25971) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25972) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
41


testing @ utilities.rkt:2016
test-name:
"var_test_9"

expected-result:
41


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25973 . Integer)
    (g25974 . Integer)
    (x25967 . Integer)
    (y25968 . Integer)
    (g25969 . Integer)
    (g25970 . Integer)
    (g25971 . Integer)
    (g25972 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'y25968) (Reg 'rsp))
      (set (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25969) (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25969) (Reg 'rsp))
      (set (Var 'x25967) (Var 'g25969) (Reg 'rsp))
      (set (Var 'x25967) (Reg 'rsp))
      (set (Var 'g25971) (Reg 'rsp))
      (set (Var 'g25971) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25974) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25974) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25972) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25972) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25972) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 29) (Var 'y25968)))
     (Instr 'movq (list (Var 'y25968) (Var 'g25970)))
     (Instr 'negq (list (Var 'g25970)))
     (Instr 'movq (list (Imm 9) (Var 'g25969)))
     (Instr 'addq (list (Var 'g25970) (Var 'g25969)))
     (Instr 'movq (list (Imm 20) (Var 'x25967)))
     (Instr 'addq (list (Var 'g25969) (Var 'x25967)))
     (Instr 'movq (list (Var 'x25967) (Var 'g25971)))
     (Instr 'negq (list (Var 'g25971)))
     (Instr 'movq (list (Imm 9) (Var 'g25974)))
     (Instr 'negq (list (Var 'g25974)))
     (Instr 'movq (list (Var 'g25974) (Var 'g25973)))
     (Instr 'addq (list (Imm 30) (Var 'g25973)))
     (Instr 'movq (list (Imm 20) (Var 'g25972)))
     (Instr 'addq (list (Var 'g25973) (Var 'g25972)))
     (Instr 'movq (list (Var 'g25971) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25972) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25973 . Integer)
    (g25974 . Integer)
    (x25967 . Integer)
    (y25968 . Integer)
    (g25969 . Integer)
    (g25970 . Integer)
    (g25971 . Integer)
    (g25972 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'y25968) (Reg 'rsp))
      (set (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25969) (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25969) (Reg 'rsp))
      (set (Var 'x25967) (Var 'g25969) (Reg 'rsp))
      (set (Var 'x25967) (Reg 'rsp))
      (set (Var 'g25971) (Reg 'rsp))
      (set (Var 'g25971) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25974) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25974) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25972) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25972) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25972) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 29) (Var 'y25968)))
     (Instr 'movq (list (Var 'y25968) (Var 'g25970)))
     (Instr 'negq (list (Var 'g25970)))
     (Instr 'movq (list (Imm 9) (Var 'g25969)))
     (Instr 'addq (list (Var 'g25970) (Var 'g25969)))
     (Instr 'movq (list (Imm 20) (Var 'x25967)))
     (Instr 'addq (list (Var 'g25969) (Var 'x25967)))
     (Instr 'movq (list (Var 'x25967) (Var 'g25971)))
     (Instr 'negq (list (Var 'g25971)))
     (Instr 'movq (list (Imm 9) (Var 'g25974)))
     (Instr 'negq (list (Var 'g25974)))
     (Instr 'movq (list (Var 'g25974) (Var 'g25973)))
     (Instr 'addq (list (Imm 30) (Var 'g25973)))
     (Instr 'movq (list (Imm 20) (Var 'g25972)))
     (Instr 'addq (list (Var 'g25973) (Var 'g25972)))
     (Instr 'movq (list (Var 'g25971) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25972) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
41


testing @ utilities.rkt:2016
test-name:
"var_test_9"

expected-result:
41


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25973 . Integer)
    (g25974 . Integer)
    (x25967 . Integer)
    (y25968 . Integer)
    (g25969 . Integer)
    (g25970 . Integer)
    (g25971 . Integer)
    (g25972 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'y25968) (Reg 'rsp))
      (set (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25969) (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25969) (Reg 'rsp))
      (set (Var 'x25967) (Var 'g25969) (Reg 'rsp))
      (set (Var 'x25967) (Reg 'rsp))
      (set (Var 'g25971) (Reg 'rsp))
      (set (Var 'g25971) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25974) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25974) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25972) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25972) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25972) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 29) (Var 'y25968)))
     (Instr 'movq (list (Var 'y25968) (Var 'g25970)))
     (Instr 'negq (list (Var 'g25970)))
     (Instr 'movq (list (Imm 9) (Var 'g25969)))
     (Instr 'addq (list (Var 'g25970) (Var 'g25969)))
     (Instr 'movq (list (Imm 20) (Var 'x25967)))
     (Instr 'addq (list (Var 'g25969) (Var 'x25967)))
     (Instr 'movq (list (Var 'x25967) (Var 'g25971)))
     (Instr 'negq (list (Var 'g25971)))
     (Instr 'movq (list (Imm 9) (Var 'g25974)))
     (Instr 'negq (list (Var 'g25974)))
     (Instr 'movq (list (Var 'g25974) (Var 'g25973)))
     (Instr 'addq (list (Imm 30) (Var 'g25973)))
     (Instr 'movq (list (Imm 20) (Var 'g25972)))
     (Instr 'addq (list (Var 'g25973) (Var 'g25972)))
     (Instr 'movq (list (Var 'g25971) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25972) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25973 . Integer)
    (g25974 . Integer)
    (x25967 . Integer)
    (y25968 . Integer)
    (g25969 . Integer)
    (g25970 . Integer)
    (g25971 . Integer)
    (g25972 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'y25968) (Reg 'rsp))
      (set (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25969) (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25969) (Reg 'rsp))
      (set (Var 'x25967) (Var 'g25969) (Reg 'rsp))
      (set (Var 'x25967) (Reg 'rsp))
      (set (Var 'g25971) (Reg 'rsp))
      (set (Var 'g25971) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25974) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25974) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25972) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25972) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25972) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 29) (Var 'y25968)))
     (Instr 'movq (list (Var 'y25968) (Var 'g25970)))
     (Instr 'negq (list (Var 'g25970)))
     (Instr 'movq (list (Imm 9) (Var 'g25969)))
     (Instr 'addq (list (Var 'g25970) (Var 'g25969)))
     (Instr 'movq (list (Imm 20) (Var 'x25967)))
     (Instr 'addq (list (Var 'g25969) (Var 'x25967)))
     (Instr 'movq (list (Var 'x25967) (Var 'g25971)))
     (Instr 'negq (list (Var 'g25971)))
     (Instr 'movq (list (Imm 9) (Var 'g25974)))
     (Instr 'negq (list (Var 'g25974)))
     (Instr 'movq (list (Var 'g25974) (Var 'g25973)))
     (Instr 'addq (list (Imm 30) (Var 'g25973)))
     (Instr 'movq (list (Imm 20) (Var 'g25972)))
     (Instr 'addq (list (Var 'g25973) (Var 'g25972)))
     (Instr 'movq (list (Var 'g25971) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25972) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
41


testing @ utilities.rkt:2016
test-name:
"var_test_9"

expected-result:
41


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25973 . Integer)
    (g25974 . Integer)
    (x25967 . Integer)
    (y25968 . Integer)
    (g25969 . Integer)
    (g25970 . Integer)
    (g25971 . Integer)
    (g25972 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'y25968) (Reg 'rsp))
      (set (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25969) (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25969) (Reg 'rsp))
      (set (Var 'x25967) (Var 'g25969) (Reg 'rsp))
      (set (Var 'x25967) (Reg 'rsp))
      (set (Var 'g25971) (Reg 'rsp))
      (set (Var 'g25971) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25974) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25974) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25972) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25972) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25972) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 29) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Imm 9) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Imm 20) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rdx)))
     (Instr 'negq (list (Reg 'rdx)))
     (Instr 'movq (list (Imm 9) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'addq (list (Imm 30) (Reg 'rcx)))
     (Instr 'movq (list (Imm 20) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25973 . Integer)
    (g25974 . Integer)
    (x25967 . Integer)
    (y25968 . Integer)
    (g25969 . Integer)
    (g25970 . Integer)
    (g25971 . Integer)
    (g25972 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'y25968) (Reg 'rsp))
      (set (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25969) (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25969) (Reg 'rsp))
      (set (Var 'x25967) (Var 'g25969) (Reg 'rsp))
      (set (Var 'x25967) (Reg 'rsp))
      (set (Var 'g25971) (Reg 'rsp))
      (set (Var 'g25971) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25974) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25974) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25972) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25972) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25972) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 29) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Imm 9) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Imm 20) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rdx)))
     (Instr 'negq (list (Reg 'rdx)))
     (Instr 'movq (list (Imm 9) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'addq (list (Imm 30) (Reg 'rcx)))
     (Instr 'movq (list (Imm 20) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
41


testing @ utilities.rkt:2016
test-name:
"var_test_9"

expected-result:
41


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25973 . Integer)
    (g25974 . Integer)
    (x25967 . Integer)
    (y25968 . Integer)
    (g25969 . Integer)
    (g25970 . Integer)
    (g25971 . Integer)
    (g25972 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'y25968) (Reg 'rsp))
      (set (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25969) (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25969) (Reg 'rsp))
      (set (Var 'x25967) (Var 'g25969) (Reg 'rsp))
      (set (Var 'x25967) (Reg 'rsp))
      (set (Var 'g25971) (Reg 'rsp))
      (set (Var 'g25971) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25974) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25974) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25972) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25972) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25972) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 29) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Imm 9) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Imm 20) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rdx)))
     (Instr 'negq (list (Reg 'rdx)))
     (Instr 'movq (list (Imm 9) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'addq (list (Imm 30) (Reg 'rcx)))
     (Instr 'movq (list (Imm 20) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25973 . Integer)
    (g25974 . Integer)
    (x25967 . Integer)
    (y25968 . Integer)
    (g25969 . Integer)
    (g25970 . Integer)
    (g25971 . Integer)
    (g25972 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'y25968) (Reg 'rsp))
      (set (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25969) (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25969) (Reg 'rsp))
      (set (Var 'x25967) (Var 'g25969) (Reg 'rsp))
      (set (Var 'x25967) (Reg 'rsp))
      (set (Var 'g25971) (Reg 'rsp))
      (set (Var 'g25971) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25974) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25974) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25972) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25972) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25972) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 29) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Imm 9) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Imm 20) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rdx)))
     (Instr 'negq (list (Reg 'rdx)))
     (Instr 'movq (list (Imm 9) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'addq (list (Imm 30) (Reg 'rcx)))
     (Instr 'movq (list (Imm 20) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
41


testing @ utilities.rkt:2016
test-name:
"var_test_9"

expected-result:
41


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g25973 . Integer)
    (g25974 . Integer)
    (x25967 . Integer)
    (y25968 . Integer)
    (g25969 . Integer)
    (g25970 . Integer)
    (g25971 . Integer)
    (g25972 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'y25968) (Reg 'rsp))
      (set (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25969) (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25969) (Reg 'rsp))
      (set (Var 'x25967) (Var 'g25969) (Reg 'rsp))
      (set (Var 'x25967) (Reg 'rsp))
      (set (Var 'g25971) (Reg 'rsp))
      (set (Var 'g25971) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25974) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25974) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25972) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25972) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25972) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 29) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Imm 9) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Imm 20) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rdx)))
     (Instr 'negq (list (Reg 'rdx)))
     (Instr 'movq (list (Imm 9) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'addq (list (Imm 30) (Reg 'rcx)))
     (Instr 'movq (list (Imm 20) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g25973 . Integer)
    (g25974 . Integer)
    (x25967 . Integer)
    (y25968 . Integer)
    (g25969 . Integer)
    (g25970 . Integer)
    (g25971 . Integer)
    (g25972 . Integer))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'y25968) (Reg 'rsp))
      (set (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25969) (Var 'g25970) (Reg 'rsp))
      (set (Var 'g25969) (Reg 'rsp))
      (set (Var 'x25967) (Var 'g25969) (Reg 'rsp))
      (set (Var 'x25967) (Reg 'rsp))
      (set (Var 'g25971) (Reg 'rsp))
      (set (Var 'g25971) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25974) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25974) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25972) (Var 'g25973) (Reg 'rsp))
      (set (Var 'g25971) (Var 'g25972) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25972) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 29) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Imm 9) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Imm 20) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rdx)))
     (Instr 'negq (list (Reg 'rdx)))
     (Instr 'movq (list (Imm 9) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'addq (list (Imm 30) (Reg 'rcx)))
     (Instr 'movq (list (Imm 20) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rcx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rdx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
41


testing @ utilities.rkt:2016
test-name:
"var_test_9"

expected-result:
41


792 success(es) 0 failure(s) 0 error(s) 792 test(s) run
0
type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Prim
  '+
  (list (Prim 'read '()) (Prim '- (list (Prim '+ (list (Int 5) (Int 3))))))))


testing @ utilities.rkt:2016
test-name:
"int_test_1"

expected-result:
42


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list (Prim 'read '()) (Prim '- (list (Prim '+ (list (Int 5) (Int 3))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list (Prim 'read '()) (Prim '- (list (Prim '+ (list (Int 5) (Int 3))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_1"

expected-result:
42


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list (Prim 'read '()) (Prim '- (list (Prim '+ (list (Int 5) (Int 3))))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list (Prim 'read '()) (Prim '- (list (Prim '+ (list (Int 5) (Int 3))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_1"

expected-result:
42


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list (Prim 'read '()) (Prim '- (list (Prim '+ (list (Int 5) (Int 3))))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list (Prim 'read '()) (Prim '- (list (Prim '+ (list (Int 5) (Int 3))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_1"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'g25981
  (Prim 'read '())
  (Let
   'g25983
   (Prim '+ (list (Int 5) (Int 3)))
   (Let
    'g25982
    (Prim '- (list (Var 'g25983)))
    (Prim '+ (list (Var 'g25981) (Var 'g25982)))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'g25981
  (Prim 'read '())
  (Let
   'g25983
   (Prim '+ (list (Int 5) (Int 3)))
   (Let
    'g25982
    (Prim '- (list (Var 'g25983)))
    (Prim '+ (list (Var 'g25981) (Var 'g25982)))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_1"

expected-result:
42


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'g25981) (Prim 'read '()))
    (Seq
     (Assign (Var 'g25983) (Prim '+ (list (Int 5) (Int 3))))
     (Seq
      (Assign (Var 'g25982) (Prim '- (list (Var 'g25983))))
      (Return (Prim '+ (list (Var 'g25981) (Var 'g25982))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types (g25981 . Integer) (g25982 . Integer) (g25983 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'g25981) (Prim 'read '()))
    (Seq
     (Assign (Var 'g25983) (Prim '+ (list (Int 5) (Int 3))))
     (Seq
      (Assign (Var 'g25982) (Prim '- (list (Var 'g25983))))
      (Return (Prim '+ (list (Var 'g25981) (Var 'g25982))))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_1"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types (g25981 . Integer) (g25982 . Integer) (g25983 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g25981)))
     (Instr 'movq (list (Imm 5) (Var 'g25983)))
     (Instr 'addq (list (Imm 3) (Var 'g25983)))
     (Instr 'movq (list (Var 'g25983) (Var 'g25982)))
     (Instr 'negq (list (Var 'g25982)))
     (Instr 'movq (list (Var 'g25981) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25982) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types (g25981 . Integer) (g25982 . Integer) (g25983 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g25981)))
     (Instr 'movq (list (Imm 5) (Var 'g25983)))
     (Instr 'addq (list (Imm 3) (Var 'g25983)))
     (Instr 'movq (list (Var 'g25983) (Var 'g25982)))
     (Instr 'negq (list (Var 'g25982)))
     (Instr 'movq (list (Var 'g25981) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25982) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_1"

expected-result:
42


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g25981 . Integer) (g25982 . Integer) (g25983 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25981) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25983) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25983) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25982) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25982) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25982) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g25981)))
     (Instr 'movq (list (Imm 5) (Var 'g25983)))
     (Instr 'addq (list (Imm 3) (Var 'g25983)))
     (Instr 'movq (list (Var 'g25983) (Var 'g25982)))
     (Instr 'negq (list (Var 'g25982)))
     (Instr 'movq (list (Var 'g25981) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25982) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g25981 . Integer) (g25982 . Integer) (g25983 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25981) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25983) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25983) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25982) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25982) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25982) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g25981)))
     (Instr 'movq (list (Imm 5) (Var 'g25983)))
     (Instr 'addq (list (Imm 3) (Var 'g25983)))
     (Instr 'movq (list (Var 'g25983) (Var 'g25982)))
     (Instr 'negq (list (Var 'g25982)))
     (Instr 'movq (list (Var 'g25981) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25982) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_1"

expected-result:
42


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g25981 . Integer) (g25982 . Integer) (g25983 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25981) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25983) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25983) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25982) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25982) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25982) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g25981)))
     (Instr 'movq (list (Imm 5) (Var 'g25983)))
     (Instr 'addq (list (Imm 3) (Var 'g25983)))
     (Instr 'movq (list (Var 'g25983) (Var 'g25982)))
     (Instr 'negq (list (Var 'g25982)))
     (Instr 'movq (list (Var 'g25981) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25982) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g25981 . Integer) (g25982 . Integer) (g25983 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25981) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25983) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25983) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25982) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25982) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25982) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g25981)))
     (Instr 'movq (list (Imm 5) (Var 'g25983)))
     (Instr 'addq (list (Imm 3) (Var 'g25983)))
     (Instr 'movq (list (Var 'g25983) (Var 'g25982)))
     (Instr 'negq (list (Var 'g25982)))
     (Instr 'movq (list (Var 'g25981) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25982) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_1"

expected-result:
42


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g25981 . Integer) (g25982 . Integer) (g25983 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25981) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25983) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25983) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25982) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25982) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25982) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 3) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g25981 . Integer) (g25982 . Integer) (g25983 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25981) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25983) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25983) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25982) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25982) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25982) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 3) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_1"

expected-result:
42


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g25981 . Integer) (g25982 . Integer) (g25983 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25981) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25983) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25983) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25982) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25982) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25982) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 3) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g25981 . Integer) (g25982 . Integer) (g25983 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25981) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25983) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25983) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25982) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25982) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25982) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 3) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_1"

expected-result:
42


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g25981 . Integer) (g25982 . Integer) (g25983 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25981) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25983) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25983) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25982) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25982) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25982) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 3) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g25981 . Integer) (g25982 . Integer) (g25983 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25981) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25983) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25983) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25982) (Reg 'rsp))
      (set (Var 'g25981) (Var 'g25982) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25982) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 3) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_1"

expected-result:
42


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Prim '+ (list (Int 1) (Prim '+ (list (Prim 'read '()) (Int 1))))))


testing @ utilities.rkt:2016
test-name:
"int_test_2"

expected-result:
42


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim '+ (list (Int 1) (Prim '+ (list (Prim 'read '()) (Int 1))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim '+ (list (Int 1) (Prim '+ (list (Prim 'read '()) (Int 1))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_2"

expected-result:
42


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim '+ (list (Int 1) (Prim '+ (list (Prim 'read '()) (Int 1))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim '+ (list (Int 1) (Prim '+ (list (Prim 'read '()) (Int 1))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_2"

expected-result:
42


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim '+ (list (Int 1) (Prim '+ (list (Prim 'read '()) (Int 1))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim '+ (list (Int 1) (Prim '+ (list (Prim 'read '()) (Int 1))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_2"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'g25991
  (Prim 'read '())
  (Let
   'g25990
   (Prim '+ (list (Var 'g25991) (Int 1)))
   (Prim '+ (list (Int 1) (Var 'g25990))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'g25991
  (Prim 'read '())
  (Let
   'g25990
   (Prim '+ (list (Var 'g25991) (Int 1)))
   (Prim '+ (list (Int 1) (Var 'g25990))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_2"

expected-result:
42


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'g25991) (Prim 'read '()))
    (Seq
     (Assign (Var 'g25990) (Prim '+ (list (Var 'g25991) (Int 1))))
     (Return (Prim '+ (list (Int 1) (Var 'g25990)))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types (g25990 . Integer) (g25991 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'g25991) (Prim 'read '()))
    (Seq
     (Assign (Var 'g25990) (Prim '+ (list (Var 'g25991) (Int 1))))
     (Return (Prim '+ (list (Int 1) (Var 'g25990)))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_2"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types (g25990 . Integer) (g25991 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g25991)))
     (Instr 'movq (list (Var 'g25991) (Var 'g25990)))
     (Instr 'addq (list (Imm 1) (Var 'g25990)))
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25990) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types (g25990 . Integer) (g25991 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g25991)))
     (Instr 'movq (list (Var 'g25991) (Var 'g25990)))
     (Instr 'addq (list (Imm 1) (Var 'g25990)))
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25990) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_2"

expected-result:
42


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g25990 . Integer) (g25991 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25991) (Reg 'rsp))
      (set (Var 'g25990) (Reg 'rsp))
      (set (Var 'g25990) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25990) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g25991)))
     (Instr 'movq (list (Var 'g25991) (Var 'g25990)))
     (Instr 'addq (list (Imm 1) (Var 'g25990)))
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25990) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g25990 . Integer) (g25991 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25991) (Reg 'rsp))
      (set (Var 'g25990) (Reg 'rsp))
      (set (Var 'g25990) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25990) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g25991)))
     (Instr 'movq (list (Var 'g25991) (Var 'g25990)))
     (Instr 'addq (list (Imm 1) (Var 'g25990)))
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25990) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_2"

expected-result:
42


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g25990 . Integer) (g25991 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25991) (Reg 'rsp))
      (set (Var 'g25990) (Reg 'rsp))
      (set (Var 'g25990) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25990) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g25991)))
     (Instr 'movq (list (Var 'g25991) (Var 'g25990)))
     (Instr 'addq (list (Imm 1) (Var 'g25990)))
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25990) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g25990 . Integer) (g25991 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25991) (Reg 'rsp))
      (set (Var 'g25990) (Reg 'rsp))
      (set (Var 'g25990) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25990) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g25991)))
     (Instr 'movq (list (Var 'g25991) (Var 'g25990)))
     (Instr 'addq (list (Imm 1) (Var 'g25990)))
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Var 'g25990) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_2"

expected-result:
42


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g25990 . Integer) (g25991 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25991) (Reg 'rsp))
      (set (Var 'g25990) (Reg 'rsp))
      (set (Var 'g25990) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25990) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'addq (list (Imm 1) (Reg 'rbx)))
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g25990 . Integer) (g25991 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25991) (Reg 'rsp))
      (set (Var 'g25990) (Reg 'rsp))
      (set (Var 'g25990) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25990) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'addq (list (Imm 1) (Reg 'rbx)))
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_2"

expected-result:
42


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g25990 . Integer) (g25991 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25991) (Reg 'rsp))
      (set (Var 'g25990) (Reg 'rsp))
      (set (Var 'g25990) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25990) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'addq (list (Imm 1) (Reg 'rbx)))
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g25990 . Integer) (g25991 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25991) (Reg 'rsp))
      (set (Var 'g25990) (Reg 'rsp))
      (set (Var 'g25990) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25990) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'addq (list (Imm 1) (Reg 'rbx)))
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_2"

expected-result:
42


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g25990 . Integer) (g25991 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25991) (Reg 'rsp))
      (set (Var 'g25990) (Reg 'rsp))
      (set (Var 'g25990) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25990) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'addq (list (Imm 1) (Reg 'rbx)))
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g25990 . Integer) (g25991 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25991) (Reg 'rsp))
      (set (Var 'g25990) (Reg 'rsp))
      (set (Var 'g25990) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g25990) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'addq (list (Imm 1) (Reg 'rbx)))
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_2"

expected-result:
42


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Prim '- (list (Prim '+ (list (Prim 'read '()) (Prim '- (list (Int 5))))))))


testing @ utilities.rkt:2016
test-name:
"int_test_3"

expected-result:
42


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim '- (list (Prim '+ (list (Prim 'read '()) (Prim '- (list (Int 5))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim '- (list (Prim '+ (list (Prim 'read '()) (Prim '- (list (Int 5))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_3"

expected-result:
42


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim '- (list (Prim '+ (list (Prim 'read '()) (Prim '- (list (Int 5))))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim '- (list (Prim '+ (list (Prim 'read '()) (Prim '- (list (Int 5))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_3"

expected-result:
42


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim '- (list (Prim '+ (list (Prim 'read '()) (Prim '- (list (Int 5))))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim '- (list (Prim '+ (list (Prim 'read '()) (Prim '- (list (Int 5))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_3"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'g25999
  (Prim 'read '())
  (Let
   'g26000
   (Prim '- (list (Int 5)))
   (Let
    'g25998
    (Prim '+ (list (Var 'g25999) (Var 'g26000)))
    (Prim '- (list (Var 'g25998)))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'g25999
  (Prim 'read '())
  (Let
   'g26000
   (Prim '- (list (Int 5)))
   (Let
    'g25998
    (Prim '+ (list (Var 'g25999) (Var 'g26000)))
    (Prim '- (list (Var 'g25998)))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_3"

expected-result:
42


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'g25999) (Prim 'read '()))
    (Seq
     (Assign (Var 'g26000) (Prim '- (list (Int 5))))
     (Seq
      (Assign (Var 'g25998) (Prim '+ (list (Var 'g25999) (Var 'g26000))))
      (Return (Prim '- (list (Var 'g25998))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types (g25998 . Integer) (g25999 . Integer) (g26000 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'g25999) (Prim 'read '()))
    (Seq
     (Assign (Var 'g26000) (Prim '- (list (Int 5))))
     (Seq
      (Assign (Var 'g25998) (Prim '+ (list (Var 'g25999) (Var 'g26000))))
      (Return (Prim '- (list (Var 'g25998))))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_3"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types (g25998 . Integer) (g25999 . Integer) (g26000 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g25999)))
     (Instr 'movq (list (Imm 5) (Var 'g26000)))
     (Instr 'negq (list (Var 'g26000)))
     (Instr 'movq (list (Var 'g25999) (Var 'g25998)))
     (Instr 'addq (list (Var 'g26000) (Var 'g25998)))
     (Instr 'movq (list (Var 'g25998) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types (g25998 . Integer) (g25999 . Integer) (g26000 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g25999)))
     (Instr 'movq (list (Imm 5) (Var 'g26000)))
     (Instr 'negq (list (Var 'g26000)))
     (Instr 'movq (list (Var 'g25999) (Var 'g25998)))
     (Instr 'addq (list (Var 'g26000) (Var 'g25998)))
     (Instr 'movq (list (Var 'g25998) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_3"

expected-result:
42


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g25998 . Integer) (g25999 . Integer) (g26000 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25999) (Reg 'rsp))
      (set (Var 'g25999) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25999) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25998) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25998) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g25999)))
     (Instr 'movq (list (Imm 5) (Var 'g26000)))
     (Instr 'negq (list (Var 'g26000)))
     (Instr 'movq (list (Var 'g25999) (Var 'g25998)))
     (Instr 'addq (list (Var 'g26000) (Var 'g25998)))
     (Instr 'movq (list (Var 'g25998) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g25998 . Integer) (g25999 . Integer) (g26000 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25999) (Reg 'rsp))
      (set (Var 'g25999) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25999) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25998) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25998) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g25999)))
     (Instr 'movq (list (Imm 5) (Var 'g26000)))
     (Instr 'negq (list (Var 'g26000)))
     (Instr 'movq (list (Var 'g25999) (Var 'g25998)))
     (Instr 'addq (list (Var 'g26000) (Var 'g25998)))
     (Instr 'movq (list (Var 'g25998) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_3"

expected-result:
42


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g25998 . Integer) (g25999 . Integer) (g26000 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25999) (Reg 'rsp))
      (set (Var 'g25999) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25999) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25998) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25998) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g25999)))
     (Instr 'movq (list (Imm 5) (Var 'g26000)))
     (Instr 'negq (list (Var 'g26000)))
     (Instr 'movq (list (Var 'g25999) (Var 'g25998)))
     (Instr 'addq (list (Var 'g26000) (Var 'g25998)))
     (Instr 'movq (list (Var 'g25998) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g25998 . Integer) (g25999 . Integer) (g26000 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25999) (Reg 'rsp))
      (set (Var 'g25999) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25999) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25998) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25998) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g25999)))
     (Instr 'movq (list (Imm 5) (Var 'g26000)))
     (Instr 'negq (list (Var 'g26000)))
     (Instr 'movq (list (Var 'g25999) (Var 'g25998)))
     (Instr 'addq (list (Var 'g26000) (Var 'g25998)))
     (Instr 'movq (list (Var 'g25998) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_3"

expected-result:
42


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g25998 . Integer) (g25999 . Integer) (g26000 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25999) (Reg 'rsp))
      (set (Var 'g25999) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25999) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25998) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25998) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g25998 . Integer) (g25999 . Integer) (g26000 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25999) (Reg 'rsp))
      (set (Var 'g25999) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25999) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25998) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25998) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rcx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_3"

expected-result:
42


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g25998 . Integer) (g25999 . Integer) (g26000 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25999) (Reg 'rsp))
      (set (Var 'g25999) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25999) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25998) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25998) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g25998 . Integer) (g25999 . Integer) (g26000 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25999) (Reg 'rsp))
      (set (Var 'g25999) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25999) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25998) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25998) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_3"

expected-result:
42


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g25998 . Integer) (g25999 . Integer) (g26000 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25999) (Reg 'rsp))
      (set (Var 'g25999) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25999) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25998) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25998) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g25998 . Integer) (g25999 . Integer) (g26000 . Integer))
  (cons
   'label->live
   (hash
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g25999) (Reg 'rsp))
      (set (Var 'g25999) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25999) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25998) (Var 'g26000) (Reg 'rsp))
      (set (Var 'g25998) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"int_test_3"

expected-result:
42


108 success(es) 0 failure(s) 0 error(s) 108 test(s) run
0
type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program '() (Let 'x (Bool #t) (Int 42)))


testing @ utilities.rkt:2016
test-name:
"cond_test_1"

expected-result:
42


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Let 'x (Bool #t) (Int 42)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Let 'x (Bool #t) (Int 42)))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_1"

expected-result:
42


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Let 'x26007 (Bool #t) (Int 42)))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Let 'x26007 (Bool #t) (Int 42)))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_1"

expected-result:
42


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Let 'x26007 (Bool #t) (Int 42)))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Let 'x26007 (Bool #t) (Int 42)))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_1"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Let 'x26007 (Bool #t) (Int 42)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Let 'x26007 (Bool #t) (Int 42)))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_1"

expected-result:
42


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list (cons 'start (Seq (Assign (Var 'x26007) (Bool #t)) (Return (Int 42))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types (x26007 . Boolean)))
 (list (cons 'start (Seq (Assign (Var 'x26007) (Bool #t)) (Return (Int 42))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_1"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types (x26007 . Boolean)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 1) (Var 'x26007)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types (x26007 . Boolean)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 1) (Var 'x26007)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_1"

expected-result:
42


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26007 . Boolean))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Var 'x26007)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26007 . Boolean))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Var 'x26007)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_1"

expected-result:
42


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26007 . Boolean))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Var 'x26007)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26007 . Boolean))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Var 'x26007)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_1"

expected-result:
42


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26007 . Boolean))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rbx)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26007 . Boolean))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rbx)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_1"

expected-result:
42


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26007 . Boolean))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rbx)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26007 . Boolean))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rbx)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_1"

expected-result:
42


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26007 . Boolean))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rbx)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26007 . Boolean))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rbx)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_1"

expected-result:
42


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program '() (Let 'x (Bool #f) (If (Var 'x) (Int 43) (Int 42))))


testing @ utilities.rkt:2016
test-name:
"cond_test_10"

expected-result:
42


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Let 'x (Bool #f) (If (Var 'x) (Int 43) (Int 42))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Let 'x (Bool #f) (If (Var 'x) (Int 43) (Int 42))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_10"

expected-result:
42


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Let 'x26014 (Bool #f) (If (Var 'x26014) (Int 43) (Int 42))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Let 'x26014 (Bool #f) (If (Var 'x26014) (Int 43) (Int 42))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_10"

expected-result:
42


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Let 'x26014 (Bool #f) (If (Var 'x26014) (Int 43) (Int 42))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Let 'x26014 (Bool #f) (If (Var 'x26014) (Int 43) (Int 42))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_10"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Let 'x26014 (Bool #f) (If (Var 'x26014) (Int 43) (Int 42))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Let 'x26014 (Bool #f) (If (Var 'x26014) (Int 43) (Int 42))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_10"

expected-result:
42


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'x26014) (Bool #f))
    (IfStmt
     (Prim 'eq? (list (Var 'x26014) (Bool #t)))
     (Goto 'block26015)
     (Goto 'block26016))))
  (cons 'block26015 (Return (Int 43)))
  (cons 'block26016 (Return (Int 42)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types (x26014 . Boolean)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'x26014) (Bool #f))
    (IfStmt
     (Prim 'eq? (list (Var 'x26014) (Bool #t)))
     (Goto 'block26015)
     (Goto 'block26016))))
  (cons 'block26015 (Return (Int 43)))
  (cons 'block26016 (Return (Int 42)))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_10"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types (x26014 . Boolean)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 0) (Var 'x26014)))
     (Instr 'cmpq (list (Imm 1) (Var 'x26014)))
     (JmpIf 'e 'block26015)
     (Jmp 'block26016))))
  (cons
   'block26015
   (Block
    '()
    (list (Instr 'movq (list (Imm 43) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26016
   (Block
    '()
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types (x26014 . Boolean)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 0) (Var 'x26014)))
     (Instr 'cmpq (list (Imm 1) (Var 'x26014)))
     (JmpIf 'e 'block26015)
     (Jmp 'block26016))))
  (cons
   'block26015
   (Block
    '()
    (list (Instr 'movq (list (Imm 43) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26016
   (Block
    '()
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_10"

expected-result:
42


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26014 . Boolean))
  (cons
   'label->live
   (hash
    'block26015
    (set (Reg 'rsp))
    'block26016
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26014) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Var 'x26014)))
     (Instr 'cmpq (list (Imm 1) (Var 'x26014)))
     (JmpIf 'e 'block26015)
     (Jmp 'block26016))))
  (cons
   'block26015
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 43) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26016
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26014 . Boolean))
  (cons
   'label->live
   (hash
    'block26015
    (set (Reg 'rsp))
    'block26016
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26014) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Var 'x26014)))
     (Instr 'cmpq (list (Imm 1) (Var 'x26014)))
     (JmpIf 'e 'block26015)
     (Jmp 'block26016))))
  (cons
   'block26015
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 43) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26016
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_10"

expected-result:
42


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26014 . Boolean))
  (cons
   'label->live
   (hash
    'block26015
    (set (Reg 'rsp))
    'block26016
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26014) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Var 'x26014)))
     (Instr 'cmpq (list (Imm 1) (Var 'x26014)))
     (JmpIf 'e 'block26015)
     (Jmp 'block26016))))
  (cons
   'block26015
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 43) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26016
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26014 . Boolean))
  (cons
   'label->live
   (hash
    'block26015
    (set (Reg 'rsp))
    'block26016
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26014) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Var 'x26014)))
     (Instr 'cmpq (list (Imm 1) (Var 'x26014)))
     (JmpIf 'e 'block26015)
     (Jmp 'block26016))))
  (cons
   'block26015
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 43) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26016
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_10"

expected-result:
42


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26014 . Boolean))
  (cons
   'label->live
   (hash
    'block26015
    (set (Reg 'rsp))
    'block26016
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26014) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 1) (Reg 'rbx)))
     (JmpIf 'e 'block26015)
     (Jmp 'block26016))))
  (cons
   'block26015
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 43) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26016
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26014 . Boolean))
  (cons
   'label->live
   (hash
    'block26015
    (set (Reg 'rsp))
    'block26016
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26014) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 1) (Reg 'rbx)))
     (JmpIf 'e 'block26015)
     (Jmp 'block26016))))
  (cons
   'block26015
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 43) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26016
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_10"

expected-result:
42


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26014 . Boolean))
  (cons
   'label->live
   (hash
    'block26015
    (set (Reg 'rsp))
    'block26016
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26014) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 1) (Reg 'rbx)))
     (JmpIf 'e 'block26015)
     (Jmp 'block26016))))
  (cons
   'block26015
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 43) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26016
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26014 . Boolean))
  (cons
   'label->live
   (hash
    'block26015
    (set (Reg 'rsp))
    'block26016
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26014) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 1) (Reg 'rbx)))
     (JmpIf 'e 'block26015)
     (Jmp 'block26016))))
  (cons
   'block26015
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 43) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26016
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_10"

expected-result:
42


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26014 . Boolean))
  (cons
   'label->live
   (hash
    'block26015
    (set (Reg 'rsp))
    'block26016
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26014) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 1) (Reg 'rbx)))
     (JmpIf 'e 'block26015)
     (Jmp 'block26016))))
  (cons
   'block26015
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 43) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26016
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26014 . Boolean))
  (cons
   'label->live
   (hash
    'block26015
    (set (Reg 'rsp))
    'block26016
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26014) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 1) (Reg 'rbx)))
     (JmpIf 'e 'block26015)
     (Jmp 'block26016))))
  (cons
   'block26015
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 43) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26016
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_10"

expected-result:
42


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Let
  'x
  (If
   (Prim 'and (list (Bool #t) (Prim 'or (list (Bool #f) (Bool #t)))))
   (Prim '+ (list (Int 2) (Int 3)))
   (Prim '- (list (Int 17) (Int 7))))
  (Let
   'x
   (Prim '+ (list (Var 'x) (Var 'x)))
   (Prim '+ (list (Var 'x) (Int 18))))))


testing @ utilities.rkt:2016
test-name:
"cond_test_11"

expected-result:
28


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x
  (If
   (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
   (Prim '+ (list (Int 2) (Int 3)))
   (Prim '- (list (Int 17) (Int 7))))
  (Let
   'x
   (Prim '+ (list (Var 'x) (Var 'x)))
   (Prim '+ (list (Var 'x) (Int 18))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x
  (If
   (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
   (Prim '+ (list (Int 2) (Int 3)))
   (Prim '- (list (Int 17) (Int 7))))
  (Let
   'x
   (Prim '+ (list (Var 'x) (Var 'x)))
   (Prim '+ (list (Var 'x) (Int 18))))))


output:  @ utilities.rkt:2042
result:
28


testing @ utilities.rkt:2016
test-name:
"cond_test_11"

expected-result:
28


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x26023
  (If
   (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
   (Prim '+ (list (Int 2) (Int 3)))
   (Prim '- (list (Int 17) (Int 7))))
  (Let
   'x26024
   (Prim '+ (list (Var 'x26023) (Var 'x26023)))
   (Prim '+ (list (Var 'x26024) (Int 18))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x26023
  (If
   (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
   (Prim '+ (list (Int 2) (Int 3)))
   (Prim '- (list (Int 17) (Int 7))))
  (Let
   'x26024
   (Prim '+ (list (Var 'x26023) (Var 'x26023)))
   (Prim '+ (list (Var 'x26024) (Int 18))))))


output:  @ utilities.rkt:2042
result:
28


testing @ utilities.rkt:2016
test-name:
"cond_test_11"

expected-result:
28


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x26023
  (If
   (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
   (Prim '+ (list (Int 2) (Int 3)))
   (Prim '- (list (Int 17) (Int 7))))
  (Let
   'x26024
   (Prim '+ (list (Var 'x26023) (Var 'x26023)))
   (Prim '+ (list (Var 'x26024) (Int 18))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x26023
  (If
   (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
   (Prim '+ (list (Int 2) (Int 3)))
   (Prim '- (list (Int 17) (Int 7))))
  (Let
   'x26024
   (Prim '+ (list (Var 'x26023) (Var 'x26023)))
   (Prim '+ (list (Var 'x26024) (Int 18))))))


output:  @ utilities.rkt:2042
result:
28


testing @ utilities.rkt:2016
test-name:
"cond_test_11"

expected-result:
28


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x26023
  (If
   (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
   (Prim '+ (list (Int 2) (Int 3)))
   (Prim '- (list (Int 17) (Int 7))))
  (Let
   'x26024
   (Prim '+ (list (Var 'x26023) (Var 'x26023)))
   (Prim '+ (list (Var 'x26024) (Int 18))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x26023
  (If
   (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
   (Prim '+ (list (Int 2) (Int 3)))
   (Prim '- (list (Int 17) (Int 7))))
  (Let
   'x26024
   (Prim '+ (list (Var 'x26023) (Var 'x26023)))
   (Prim '+ (list (Var 'x26024) (Int 18))))))


output:  @ utilities.rkt:2042
result:
28


testing @ utilities.rkt:2016
test-name:
"cond_test_11"

expected-result:
28


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons 'start (Goto 'block26025))
  (cons
   'block26025
   (Seq
    (Assign (Var 'x26023) (Prim '+ (list (Int 2) (Int 3))))
    (Seq
     (Assign (Var 'x26024) (Prim '+ (list (Var 'x26023) (Var 'x26023))))
     (Return (Prim '+ (list (Var 'x26024) (Int 18)))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types (x26023 . Integer) (x26024 . Integer)))
 (list
  (cons 'start (Goto 'block26025))
  (cons
   'block26025
   (Seq
    (Assign (Var 'x26023) (Prim '+ (list (Int 2) (Int 3))))
    (Seq
     (Assign (Var 'x26024) (Prim '+ (list (Var 'x26023) (Var 'x26023))))
     (Return (Prim '+ (list (Var 'x26024) (Int 18)))))))))


output:  @ utilities.rkt:2042
result:
28


testing @ utilities.rkt:2016
test-name:
"cond_test_11"

expected-result:
28


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types (x26023 . Integer) (x26024 . Integer)))
 (list
  (cons 'start (Block '() (list (Jmp 'block26025))))
  (cons
   'block26025
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 2) (Var 'x26023)))
     (Instr 'addq (list (Imm 3) (Var 'x26023)))
     (Instr 'movq (list (Var 'x26023) (Var 'x26024)))
     (Instr 'addq (list (Var 'x26023) (Var 'x26024)))
     (Instr 'movq (list (Var 'x26024) (Reg 'rax)))
     (Instr 'addq (list (Imm 18) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types (x26023 . Integer) (x26024 . Integer)))
 (list
  (cons 'start (Block '() (list (Jmp 'block26025))))
  (cons
   'block26025
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 2) (Var 'x26023)))
     (Instr 'addq (list (Imm 3) (Var 'x26023)))
     (Instr 'movq (list (Var 'x26023) (Var 'x26024)))
     (Instr 'addq (list (Var 'x26023) (Var 'x26024)))
     (Instr 'movq (list (Var 'x26024) (Reg 'rax)))
     (Instr 'addq (list (Imm 18) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
28


testing @ utilities.rkt:2016
test-name:
"cond_test_11"

expected-result:
28


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26023 . Integer) (x26024 . Integer))
  (cons
   'label->live
   (hash
    'block26025
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set))))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26025))))
  (cons
   'block26025
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26023) (Reg 'rsp))
      (set (Var 'x26023) (Reg 'rsp))
      (set (Var 'x26023) (Var 'x26024) (Reg 'rsp))
      (set (Var 'x26024) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Var 'x26023)))
     (Instr 'addq (list (Imm 3) (Var 'x26023)))
     (Instr 'movq (list (Var 'x26023) (Var 'x26024)))
     (Instr 'addq (list (Var 'x26023) (Var 'x26024)))
     (Instr 'movq (list (Var 'x26024) (Reg 'rax)))
     (Instr 'addq (list (Imm 18) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26023 . Integer) (x26024 . Integer))
  (cons
   'label->live
   (hash
    'block26025
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set))))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26025))))
  (cons
   'block26025
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26023) (Reg 'rsp))
      (set (Var 'x26023) (Reg 'rsp))
      (set (Var 'x26023) (Var 'x26024) (Reg 'rsp))
      (set (Var 'x26024) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Var 'x26023)))
     (Instr 'addq (list (Imm 3) (Var 'x26023)))
     (Instr 'movq (list (Var 'x26023) (Var 'x26024)))
     (Instr 'addq (list (Var 'x26023) (Var 'x26024)))
     (Instr 'movq (list (Var 'x26024) (Reg 'rax)))
     (Instr 'addq (list (Imm 18) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
28


testing @ utilities.rkt:2016
test-name:
"cond_test_11"

expected-result:
28


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26023 . Integer) (x26024 . Integer))
  (cons
   'label->live
   (hash
    'block26025
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26025))))
  (cons
   'block26025
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26023) (Reg 'rsp))
      (set (Var 'x26023) (Reg 'rsp))
      (set (Var 'x26023) (Var 'x26024) (Reg 'rsp))
      (set (Var 'x26024) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Var 'x26023)))
     (Instr 'addq (list (Imm 3) (Var 'x26023)))
     (Instr 'movq (list (Var 'x26023) (Var 'x26024)))
     (Instr 'addq (list (Var 'x26023) (Var 'x26024)))
     (Instr 'movq (list (Var 'x26024) (Reg 'rax)))
     (Instr 'addq (list (Imm 18) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26023 . Integer) (x26024 . Integer))
  (cons
   'label->live
   (hash
    'block26025
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26025))))
  (cons
   'block26025
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26023) (Reg 'rsp))
      (set (Var 'x26023) (Reg 'rsp))
      (set (Var 'x26023) (Var 'x26024) (Reg 'rsp))
      (set (Var 'x26024) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Var 'x26023)))
     (Instr 'addq (list (Imm 3) (Var 'x26023)))
     (Instr 'movq (list (Var 'x26023) (Var 'x26024)))
     (Instr 'addq (list (Var 'x26023) (Var 'x26024)))
     (Instr 'movq (list (Var 'x26024) (Reg 'rax)))
     (Instr 'addq (list (Imm 18) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
28


testing @ utilities.rkt:2016
test-name:
"cond_test_11"

expected-result:
28


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26023 . Integer) (x26024 . Integer))
  (cons
   'label->live
   (hash
    'block26025
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26025))))
  (cons
   'block26025
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26023) (Reg 'rsp))
      (set (Var 'x26023) (Reg 'rsp))
      (set (Var 'x26023) (Var 'x26024) (Reg 'rsp))
      (set (Var 'x26024) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rbx)))
     (Instr 'addq (list (Imm 3) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 18) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26023 . Integer) (x26024 . Integer))
  (cons
   'label->live
   (hash
    'block26025
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26025))))
  (cons
   'block26025
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26023) (Reg 'rsp))
      (set (Var 'x26023) (Reg 'rsp))
      (set (Var 'x26023) (Var 'x26024) (Reg 'rsp))
      (set (Var 'x26024) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rbx)))
     (Instr 'addq (list (Imm 3) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 18) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
28


testing @ utilities.rkt:2016
test-name:
"cond_test_11"

expected-result:
28


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26023 . Integer) (x26024 . Integer))
  (cons
   'label->live
   (hash
    'block26025
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26025))))
  (cons
   'block26025
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26023) (Reg 'rsp))
      (set (Var 'x26023) (Reg 'rsp))
      (set (Var 'x26023) (Var 'x26024) (Reg 'rsp))
      (set (Var 'x26024) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rbx)))
     (Instr 'addq (list (Imm 3) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 18) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26023 . Integer) (x26024 . Integer))
  (cons
   'label->live
   (hash
    'block26025
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26025))))
  (cons
   'block26025
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26023) (Reg 'rsp))
      (set (Var 'x26023) (Reg 'rsp))
      (set (Var 'x26023) (Var 'x26024) (Reg 'rsp))
      (set (Var 'x26024) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rbx)))
     (Instr 'addq (list (Imm 3) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 18) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
28


testing @ utilities.rkt:2016
test-name:
"cond_test_11"

expected-result:
28


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26023 . Integer) (x26024 . Integer))
  (cons
   'label->live
   (hash
    'block26025
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26025))))
  (cons
   'block26025
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26023) (Reg 'rsp))
      (set (Var 'x26023) (Reg 'rsp))
      (set (Var 'x26023) (Var 'x26024) (Reg 'rsp))
      (set (Var 'x26024) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rbx)))
     (Instr 'addq (list (Imm 3) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 18) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26023 . Integer) (x26024 . Integer))
  (cons
   'label->live
   (hash
    'block26025
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26025))))
  (cons
   'block26025
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26023) (Reg 'rsp))
      (set (Var 'x26023) (Reg 'rsp))
      (set (Var 'x26023) (Var 'x26024) (Reg 'rsp))
      (set (Var 'x26024) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rbx)))
     (Instr 'addq (list (Imm 3) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 18) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
28


testing @ utilities.rkt:2016
test-name:
"cond_test_11"

expected-result:
28


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Let
  'x
  (If
   (Prim 'and (list (Bool #f) (Prim 'or (list (Bool #f) (Bool #t)))))
   (Prim '+ (list (Int 2) (Int 3)))
   (Prim '- (list (Int 8))))
  (Let
   'x
   (Prim '+ (list (Var 'x) (Var 'x)))
   (Prim '+ (list (Var 'x) (Int 31))))))


testing @ utilities.rkt:2016
test-name:
"cond_test_12"

expected-result:
15


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x
  (If
   (If (Bool #f) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
   (Prim '+ (list (Int 2) (Int 3)))
   (Prim '- (list (Int 8))))
  (Let
   'x
   (Prim '+ (list (Var 'x) (Var 'x)))
   (Prim '+ (list (Var 'x) (Int 31))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x
  (If
   (If (Bool #f) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
   (Prim '+ (list (Int 2) (Int 3)))
   (Prim '- (list (Int 8))))
  (Let
   'x
   (Prim '+ (list (Var 'x) (Var 'x)))
   (Prim '+ (list (Var 'x) (Int 31))))))


output:  @ utilities.rkt:2042
result:
15


testing @ utilities.rkt:2016
test-name:
"cond_test_12"

expected-result:
15


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x26032
  (If
   (If (Bool #f) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
   (Prim '+ (list (Int 2) (Int 3)))
   (Prim '- (list (Int 8))))
  (Let
   'x26033
   (Prim '+ (list (Var 'x26032) (Var 'x26032)))
   (Prim '+ (list (Var 'x26033) (Int 31))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x26032
  (If
   (If (Bool #f) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
   (Prim '+ (list (Int 2) (Int 3)))
   (Prim '- (list (Int 8))))
  (Let
   'x26033
   (Prim '+ (list (Var 'x26032) (Var 'x26032)))
   (Prim '+ (list (Var 'x26033) (Int 31))))))


output:  @ utilities.rkt:2042
result:
15


testing @ utilities.rkt:2016
test-name:
"cond_test_12"

expected-result:
15


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x26032
  (If
   (If (Bool #f) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
   (Prim '+ (list (Int 2) (Int 3)))
   (Prim '- (list (Int 8))))
  (Let
   'x26033
   (Prim '+ (list (Var 'x26032) (Var 'x26032)))
   (Prim '+ (list (Var 'x26033) (Int 31))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x26032
  (If
   (If (Bool #f) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
   (Prim '+ (list (Int 2) (Int 3)))
   (Prim '- (list (Int 8))))
  (Let
   'x26033
   (Prim '+ (list (Var 'x26032) (Var 'x26032)))
   (Prim '+ (list (Var 'x26033) (Int 31))))))


output:  @ utilities.rkt:2042
result:
15


testing @ utilities.rkt:2016
test-name:
"cond_test_12"

expected-result:
15


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x26032
  (If
   (If (Bool #f) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
   (Prim '+ (list (Int 2) (Int 3)))
   (Prim '- (list (Int 8))))
  (Let
   'x26033
   (Prim '+ (list (Var 'x26032) (Var 'x26032)))
   (Prim '+ (list (Var 'x26033) (Int 31))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x26032
  (If
   (If (Bool #f) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
   (Prim '+ (list (Int 2) (Int 3)))
   (Prim '- (list (Int 8))))
  (Let
   'x26033
   (Prim '+ (list (Var 'x26032) (Var 'x26032)))
   (Prim '+ (list (Var 'x26033) (Int 31))))))


output:  @ utilities.rkt:2042
result:
15


testing @ utilities.rkt:2016
test-name:
"cond_test_12"

expected-result:
15


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons 'start (Goto 'block26034))
  (cons
   'block26034
   (Seq
    (Assign (Var 'x26032) (Prim '- (list (Int 8))))
    (Seq
     (Assign (Var 'x26033) (Prim '+ (list (Var 'x26032) (Var 'x26032))))
     (Return (Prim '+ (list (Var 'x26033) (Int 31)))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types (x26032 . Integer) (x26033 . Integer)))
 (list
  (cons 'start (Goto 'block26034))
  (cons
   'block26034
   (Seq
    (Assign (Var 'x26032) (Prim '- (list (Int 8))))
    (Seq
     (Assign (Var 'x26033) (Prim '+ (list (Var 'x26032) (Var 'x26032))))
     (Return (Prim '+ (list (Var 'x26033) (Int 31)))))))))


output:  @ utilities.rkt:2042
result:
15


testing @ utilities.rkt:2016
test-name:
"cond_test_12"

expected-result:
15


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types (x26032 . Integer) (x26033 . Integer)))
 (list
  (cons 'start (Block '() (list (Jmp 'block26034))))
  (cons
   'block26034
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 8) (Var 'x26032)))
     (Instr 'negq (list (Var 'x26032)))
     (Instr 'movq (list (Var 'x26032) (Var 'x26033)))
     (Instr 'addq (list (Var 'x26032) (Var 'x26033)))
     (Instr 'movq (list (Var 'x26033) (Reg 'rax)))
     (Instr 'addq (list (Imm 31) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types (x26032 . Integer) (x26033 . Integer)))
 (list
  (cons 'start (Block '() (list (Jmp 'block26034))))
  (cons
   'block26034
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 8) (Var 'x26032)))
     (Instr 'negq (list (Var 'x26032)))
     (Instr 'movq (list (Var 'x26032) (Var 'x26033)))
     (Instr 'addq (list (Var 'x26032) (Var 'x26033)))
     (Instr 'movq (list (Var 'x26033) (Reg 'rax)))
     (Instr 'addq (list (Imm 31) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
15


testing @ utilities.rkt:2016
test-name:
"cond_test_12"

expected-result:
15


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26032 . Integer) (x26033 . Integer))
  (cons
   'label->live
   (hash
    'block26034
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set))))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26034))))
  (cons
   'block26034
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26032) (Reg 'rsp))
      (set (Var 'x26032) (Reg 'rsp))
      (set (Var 'x26032) (Var 'x26033) (Reg 'rsp))
      (set (Var 'x26033) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 8) (Var 'x26032)))
     (Instr 'negq (list (Var 'x26032)))
     (Instr 'movq (list (Var 'x26032) (Var 'x26033)))
     (Instr 'addq (list (Var 'x26032) (Var 'x26033)))
     (Instr 'movq (list (Var 'x26033) (Reg 'rax)))
     (Instr 'addq (list (Imm 31) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26032 . Integer) (x26033 . Integer))
  (cons
   'label->live
   (hash
    'block26034
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set))))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26034))))
  (cons
   'block26034
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26032) (Reg 'rsp))
      (set (Var 'x26032) (Reg 'rsp))
      (set (Var 'x26032) (Var 'x26033) (Reg 'rsp))
      (set (Var 'x26033) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 8) (Var 'x26032)))
     (Instr 'negq (list (Var 'x26032)))
     (Instr 'movq (list (Var 'x26032) (Var 'x26033)))
     (Instr 'addq (list (Var 'x26032) (Var 'x26033)))
     (Instr 'movq (list (Var 'x26033) (Reg 'rax)))
     (Instr 'addq (list (Imm 31) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
15


testing @ utilities.rkt:2016
test-name:
"cond_test_12"

expected-result:
15


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26032 . Integer) (x26033 . Integer))
  (cons
   'label->live
   (hash
    'block26034
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26034))))
  (cons
   'block26034
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26032) (Reg 'rsp))
      (set (Var 'x26032) (Reg 'rsp))
      (set (Var 'x26032) (Var 'x26033) (Reg 'rsp))
      (set (Var 'x26033) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 8) (Var 'x26032)))
     (Instr 'negq (list (Var 'x26032)))
     (Instr 'movq (list (Var 'x26032) (Var 'x26033)))
     (Instr 'addq (list (Var 'x26032) (Var 'x26033)))
     (Instr 'movq (list (Var 'x26033) (Reg 'rax)))
     (Instr 'addq (list (Imm 31) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26032 . Integer) (x26033 . Integer))
  (cons
   'label->live
   (hash
    'block26034
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26034))))
  (cons
   'block26034
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26032) (Reg 'rsp))
      (set (Var 'x26032) (Reg 'rsp))
      (set (Var 'x26032) (Var 'x26033) (Reg 'rsp))
      (set (Var 'x26033) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 8) (Var 'x26032)))
     (Instr 'negq (list (Var 'x26032)))
     (Instr 'movq (list (Var 'x26032) (Var 'x26033)))
     (Instr 'addq (list (Var 'x26032) (Var 'x26033)))
     (Instr 'movq (list (Var 'x26033) (Reg 'rax)))
     (Instr 'addq (list (Imm 31) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
15


testing @ utilities.rkt:2016
test-name:
"cond_test_12"

expected-result:
15


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26032 . Integer) (x26033 . Integer))
  (cons
   'label->live
   (hash
    'block26034
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26034))))
  (cons
   'block26034
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26032) (Reg 'rsp))
      (set (Var 'x26032) (Reg 'rsp))
      (set (Var 'x26032) (Var 'x26033) (Reg 'rsp))
      (set (Var 'x26033) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 8) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 31) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26032 . Integer) (x26033 . Integer))
  (cons
   'label->live
   (hash
    'block26034
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26034))))
  (cons
   'block26034
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26032) (Reg 'rsp))
      (set (Var 'x26032) (Reg 'rsp))
      (set (Var 'x26032) (Var 'x26033) (Reg 'rsp))
      (set (Var 'x26033) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 8) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 31) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
15


testing @ utilities.rkt:2016
test-name:
"cond_test_12"

expected-result:
15


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26032 . Integer) (x26033 . Integer))
  (cons
   'label->live
   (hash
    'block26034
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26034))))
  (cons
   'block26034
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26032) (Reg 'rsp))
      (set (Var 'x26032) (Reg 'rsp))
      (set (Var 'x26032) (Var 'x26033) (Reg 'rsp))
      (set (Var 'x26033) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 8) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 31) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26032 . Integer) (x26033 . Integer))
  (cons
   'label->live
   (hash
    'block26034
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26034))))
  (cons
   'block26034
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26032) (Reg 'rsp))
      (set (Var 'x26032) (Reg 'rsp))
      (set (Var 'x26032) (Var 'x26033) (Reg 'rsp))
      (set (Var 'x26033) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 8) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 31) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
15


testing @ utilities.rkt:2016
test-name:
"cond_test_12"

expected-result:
15


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26032 . Integer) (x26033 . Integer))
  (cons
   'label->live
   (hash
    'block26034
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26034))))
  (cons
   'block26034
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26032) (Reg 'rsp))
      (set (Var 'x26032) (Reg 'rsp))
      (set (Var 'x26032) (Var 'x26033) (Reg 'rsp))
      (set (Var 'x26033) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 8) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 31) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26032 . Integer) (x26033 . Integer))
  (cons
   'label->live
   (hash
    'block26034
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26034))))
  (cons
   'block26034
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26032) (Reg 'rsp))
      (set (Var 'x26032) (Reg 'rsp))
      (set (Var 'x26032) (Var 'x26033) (Reg 'rsp))
      (set (Var 'x26033) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 8) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 31) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
15


testing @ utilities.rkt:2016
test-name:
"cond_test_12"

expected-result:
15


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Let
  'x
  (If
   (Prim 'or (list (Bool #f) (Prim 'or (list (Bool #f) (Bool #t)))))
   (Prim '+ (list (Int 20) (Int 3)))
   (Prim '- (list (Int 17))))
  (Let
   'x
   (Prim '+ (list (Var 'x) (Var 'x)))
   (Prim '+ (list (Var 'x) (Int 31))))))


testing @ utilities.rkt:2016
test-name:
"cond_test_13"

expected-result:
77


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x
  (If
   (If (Bool #f) (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)))
   (Prim '+ (list (Int 20) (Int 3)))
   (Prim '- (list (Int 17))))
  (Let
   'x
   (Prim '+ (list (Var 'x) (Var 'x)))
   (Prim '+ (list (Var 'x) (Int 31))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x
  (If
   (If (Bool #f) (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)))
   (Prim '+ (list (Int 20) (Int 3)))
   (Prim '- (list (Int 17))))
  (Let
   'x
   (Prim '+ (list (Var 'x) (Var 'x)))
   (Prim '+ (list (Var 'x) (Int 31))))))


output:  @ utilities.rkt:2042
result:
77


testing @ utilities.rkt:2016
test-name:
"cond_test_13"

expected-result:
77


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x26041
  (If
   (If (Bool #f) (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)))
   (Prim '+ (list (Int 20) (Int 3)))
   (Prim '- (list (Int 17))))
  (Let
   'x26042
   (Prim '+ (list (Var 'x26041) (Var 'x26041)))
   (Prim '+ (list (Var 'x26042) (Int 31))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x26041
  (If
   (If (Bool #f) (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)))
   (Prim '+ (list (Int 20) (Int 3)))
   (Prim '- (list (Int 17))))
  (Let
   'x26042
   (Prim '+ (list (Var 'x26041) (Var 'x26041)))
   (Prim '+ (list (Var 'x26042) (Int 31))))))


output:  @ utilities.rkt:2042
result:
77


testing @ utilities.rkt:2016
test-name:
"cond_test_13"

expected-result:
77


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x26041
  (If
   (If (Bool #f) (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)))
   (Prim '+ (list (Int 20) (Int 3)))
   (Prim '- (list (Int 17))))
  (Let
   'x26042
   (Prim '+ (list (Var 'x26041) (Var 'x26041)))
   (Prim '+ (list (Var 'x26042) (Int 31))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x26041
  (If
   (If (Bool #f) (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)))
   (Prim '+ (list (Int 20) (Int 3)))
   (Prim '- (list (Int 17))))
  (Let
   'x26042
   (Prim '+ (list (Var 'x26041) (Var 'x26041)))
   (Prim '+ (list (Var 'x26042) (Int 31))))))


output:  @ utilities.rkt:2042
result:
77


testing @ utilities.rkt:2016
test-name:
"cond_test_13"

expected-result:
77


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x26041
  (If
   (If (Bool #f) (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)))
   (Prim '+ (list (Int 20) (Int 3)))
   (Prim '- (list (Int 17))))
  (Let
   'x26042
   (Prim '+ (list (Var 'x26041) (Var 'x26041)))
   (Prim '+ (list (Var 'x26042) (Int 31))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x26041
  (If
   (If (Bool #f) (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)))
   (Prim '+ (list (Int 20) (Int 3)))
   (Prim '- (list (Int 17))))
  (Let
   'x26042
   (Prim '+ (list (Var 'x26041) (Var 'x26041)))
   (Prim '+ (list (Var 'x26042) (Int 31))))))


output:  @ utilities.rkt:2042
result:
77


testing @ utilities.rkt:2016
test-name:
"cond_test_13"

expected-result:
77


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons 'start (Goto 'block26043))
  (cons
   'block26043
   (Seq
    (Assign (Var 'x26041) (Prim '+ (list (Int 20) (Int 3))))
    (Seq
     (Assign (Var 'x26042) (Prim '+ (list (Var 'x26041) (Var 'x26041))))
     (Return (Prim '+ (list (Var 'x26042) (Int 31)))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types (x26041 . Integer) (x26042 . Integer)))
 (list
  (cons 'start (Goto 'block26043))
  (cons
   'block26043
   (Seq
    (Assign (Var 'x26041) (Prim '+ (list (Int 20) (Int 3))))
    (Seq
     (Assign (Var 'x26042) (Prim '+ (list (Var 'x26041) (Var 'x26041))))
     (Return (Prim '+ (list (Var 'x26042) (Int 31)))))))))


output:  @ utilities.rkt:2042
result:
77


testing @ utilities.rkt:2016
test-name:
"cond_test_13"

expected-result:
77


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types (x26041 . Integer) (x26042 . Integer)))
 (list
  (cons 'start (Block '() (list (Jmp 'block26043))))
  (cons
   'block26043
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 20) (Var 'x26041)))
     (Instr 'addq (list (Imm 3) (Var 'x26041)))
     (Instr 'movq (list (Var 'x26041) (Var 'x26042)))
     (Instr 'addq (list (Var 'x26041) (Var 'x26042)))
     (Instr 'movq (list (Var 'x26042) (Reg 'rax)))
     (Instr 'addq (list (Imm 31) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types (x26041 . Integer) (x26042 . Integer)))
 (list
  (cons 'start (Block '() (list (Jmp 'block26043))))
  (cons
   'block26043
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 20) (Var 'x26041)))
     (Instr 'addq (list (Imm 3) (Var 'x26041)))
     (Instr 'movq (list (Var 'x26041) (Var 'x26042)))
     (Instr 'addq (list (Var 'x26041) (Var 'x26042)))
     (Instr 'movq (list (Var 'x26042) (Reg 'rax)))
     (Instr 'addq (list (Imm 31) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
77


testing @ utilities.rkt:2016
test-name:
"cond_test_13"

expected-result:
77


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26041 . Integer) (x26042 . Integer))
  (cons
   'label->live
   (hash
    'block26043
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set))))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26043))))
  (cons
   'block26043
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26041) (Reg 'rsp))
      (set (Var 'x26041) (Reg 'rsp))
      (set (Var 'x26041) (Var 'x26042) (Reg 'rsp))
      (set (Var 'x26042) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 20) (Var 'x26041)))
     (Instr 'addq (list (Imm 3) (Var 'x26041)))
     (Instr 'movq (list (Var 'x26041) (Var 'x26042)))
     (Instr 'addq (list (Var 'x26041) (Var 'x26042)))
     (Instr 'movq (list (Var 'x26042) (Reg 'rax)))
     (Instr 'addq (list (Imm 31) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26041 . Integer) (x26042 . Integer))
  (cons
   'label->live
   (hash
    'block26043
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set))))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26043))))
  (cons
   'block26043
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26041) (Reg 'rsp))
      (set (Var 'x26041) (Reg 'rsp))
      (set (Var 'x26041) (Var 'x26042) (Reg 'rsp))
      (set (Var 'x26042) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 20) (Var 'x26041)))
     (Instr 'addq (list (Imm 3) (Var 'x26041)))
     (Instr 'movq (list (Var 'x26041) (Var 'x26042)))
     (Instr 'addq (list (Var 'x26041) (Var 'x26042)))
     (Instr 'movq (list (Var 'x26042) (Reg 'rax)))
     (Instr 'addq (list (Imm 31) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
77


testing @ utilities.rkt:2016
test-name:
"cond_test_13"

expected-result:
77


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26041 . Integer) (x26042 . Integer))
  (cons
   'label->live
   (hash
    'block26043
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26043))))
  (cons
   'block26043
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26041) (Reg 'rsp))
      (set (Var 'x26041) (Reg 'rsp))
      (set (Var 'x26041) (Var 'x26042) (Reg 'rsp))
      (set (Var 'x26042) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 20) (Var 'x26041)))
     (Instr 'addq (list (Imm 3) (Var 'x26041)))
     (Instr 'movq (list (Var 'x26041) (Var 'x26042)))
     (Instr 'addq (list (Var 'x26041) (Var 'x26042)))
     (Instr 'movq (list (Var 'x26042) (Reg 'rax)))
     (Instr 'addq (list (Imm 31) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26041 . Integer) (x26042 . Integer))
  (cons
   'label->live
   (hash
    'block26043
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26043))))
  (cons
   'block26043
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26041) (Reg 'rsp))
      (set (Var 'x26041) (Reg 'rsp))
      (set (Var 'x26041) (Var 'x26042) (Reg 'rsp))
      (set (Var 'x26042) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 20) (Var 'x26041)))
     (Instr 'addq (list (Imm 3) (Var 'x26041)))
     (Instr 'movq (list (Var 'x26041) (Var 'x26042)))
     (Instr 'addq (list (Var 'x26041) (Var 'x26042)))
     (Instr 'movq (list (Var 'x26042) (Reg 'rax)))
     (Instr 'addq (list (Imm 31) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
77


testing @ utilities.rkt:2016
test-name:
"cond_test_13"

expected-result:
77


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26041 . Integer) (x26042 . Integer))
  (cons
   'label->live
   (hash
    'block26043
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26043))))
  (cons
   'block26043
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26041) (Reg 'rsp))
      (set (Var 'x26041) (Reg 'rsp))
      (set (Var 'x26041) (Var 'x26042) (Reg 'rsp))
      (set (Var 'x26042) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 20) (Reg 'rbx)))
     (Instr 'addq (list (Imm 3) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 31) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26041 . Integer) (x26042 . Integer))
  (cons
   'label->live
   (hash
    'block26043
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26043))))
  (cons
   'block26043
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26041) (Reg 'rsp))
      (set (Var 'x26041) (Reg 'rsp))
      (set (Var 'x26041) (Var 'x26042) (Reg 'rsp))
      (set (Var 'x26042) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 20) (Reg 'rbx)))
     (Instr 'addq (list (Imm 3) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 31) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
77


testing @ utilities.rkt:2016
test-name:
"cond_test_13"

expected-result:
77


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26041 . Integer) (x26042 . Integer))
  (cons
   'label->live
   (hash
    'block26043
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26043))))
  (cons
   'block26043
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26041) (Reg 'rsp))
      (set (Var 'x26041) (Reg 'rsp))
      (set (Var 'x26041) (Var 'x26042) (Reg 'rsp))
      (set (Var 'x26042) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 20) (Reg 'rbx)))
     (Instr 'addq (list (Imm 3) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 31) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26041 . Integer) (x26042 . Integer))
  (cons
   'label->live
   (hash
    'block26043
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26043))))
  (cons
   'block26043
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26041) (Reg 'rsp))
      (set (Var 'x26041) (Reg 'rsp))
      (set (Var 'x26041) (Var 'x26042) (Reg 'rsp))
      (set (Var 'x26042) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 20) (Reg 'rbx)))
     (Instr 'addq (list (Imm 3) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 31) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
77


testing @ utilities.rkt:2016
test-name:
"cond_test_13"

expected-result:
77


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26041 . Integer) (x26042 . Integer))
  (cons
   'label->live
   (hash
    'block26043
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26043))))
  (cons
   'block26043
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26041) (Reg 'rsp))
      (set (Var 'x26041) (Reg 'rsp))
      (set (Var 'x26041) (Var 'x26042) (Reg 'rsp))
      (set (Var 'x26042) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 20) (Reg 'rbx)))
     (Instr 'addq (list (Imm 3) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 31) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26041 . Integer) (x26042 . Integer))
  (cons
   'label->live
   (hash
    'block26043
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26043))))
  (cons
   'block26043
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26041) (Reg 'rsp))
      (set (Var 'x26041) (Reg 'rsp))
      (set (Var 'x26041) (Var 'x26042) (Reg 'rsp))
      (set (Var 'x26042) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 20) (Reg 'rbx)))
     (Instr 'addq (list (Imm 3) (Reg 'rbx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 31) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
77


testing @ utilities.rkt:2016
test-name:
"cond_test_13"

expected-result:
77


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Let
  'x
  (Prim 'eq? (list (Int 10) (Int 10)))
  (If (Var 'x) (Int 100) (Int 101))))


testing @ utilities.rkt:2016
test-name:
"cond_test_14"

expected-result:
100


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x
  (Prim 'eq? (list (Int 10) (Int 10)))
  (If (Var 'x) (Int 100) (Int 101))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x
  (Prim 'eq? (list (Int 10) (Int 10)))
  (If (Var 'x) (Int 100) (Int 101))))


output:  @ utilities.rkt:2042
result:
100


testing @ utilities.rkt:2016
test-name:
"cond_test_14"

expected-result:
100


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x26050
  (Prim 'eq? (list (Int 10) (Int 10)))
  (If (Var 'x26050) (Int 100) (Int 101))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x26050
  (Prim 'eq? (list (Int 10) (Int 10)))
  (If (Var 'x26050) (Int 100) (Int 101))))


output:  @ utilities.rkt:2042
result:
100


testing @ utilities.rkt:2016
test-name:
"cond_test_14"

expected-result:
100


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x26050
  (Prim 'eq? (list (Int 10) (Int 10)))
  (If (Var 'x26050) (Int 100) (Int 101))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x26050
  (Prim 'eq? (list (Int 10) (Int 10)))
  (If (Var 'x26050) (Int 100) (Int 101))))


output:  @ utilities.rkt:2042
result:
100


testing @ utilities.rkt:2016
test-name:
"cond_test_14"

expected-result:
100


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x26050
  (Prim 'eq? (list (Int 10) (Int 10)))
  (If (Var 'x26050) (Int 100) (Int 101))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'x26050
  (Prim 'eq? (list (Int 10) (Int 10)))
  (If (Var 'x26050) (Int 100) (Int 101))))


output:  @ utilities.rkt:2042
result:
100


testing @ utilities.rkt:2016
test-name:
"cond_test_14"

expected-result:
100


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'x26050) (Prim 'eq? (list (Int 10) (Int 10))))
    (IfStmt
     (Prim 'eq? (list (Var 'x26050) (Bool #t)))
     (Goto 'block26051)
     (Goto 'block26052))))
  (cons 'block26051 (Return (Int 100)))
  (cons 'block26052 (Return (Int 101)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types (x26050 . Boolean)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'x26050) (Prim 'eq? (list (Int 10) (Int 10))))
    (IfStmt
     (Prim 'eq? (list (Var 'x26050) (Bool #t)))
     (Goto 'block26051)
     (Goto 'block26052))))
  (cons 'block26051 (Return (Int 100)))
  (cons 'block26052 (Return (Int 101)))))


output:  @ utilities.rkt:2042
result:
100


testing @ utilities.rkt:2016
test-name:
"cond_test_14"

expected-result:
100


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types (x26050 . Boolean)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (Instr 'set (list 'e (Reg 'al)))
     (Instr 'movzbq (list (Reg 'al) (Var 'x26050)))
     (Instr 'cmpq (list (Imm 1) (Var 'x26050)))
     (JmpIf 'e 'block26051)
     (Jmp 'block26052))))
  (cons
   'block26051
   (Block
    '()
    (list (Instr 'movq (list (Imm 100) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26052
   (Block
    '()
    (list (Instr 'movq (list (Imm 101) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types (x26050 . Boolean)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (Instr 'set (list 'e (Reg 'al)))
     (Instr 'movzbq (list (Reg 'al) (Var 'x26050)))
     (Instr 'cmpq (list (Imm 1) (Var 'x26050)))
     (JmpIf 'e 'block26051)
     (Jmp 'block26052))))
  (cons
   'block26051
   (Block
    '()
    (list (Instr 'movq (list (Imm 100) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26052
   (Block
    '()
    (list (Instr 'movq (list (Imm 101) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
100


testing @ utilities.rkt:2016
test-name:
"cond_test_14"

expected-result:
100


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26050 . Boolean))
  (cons
   'label->live
   (hash
    'block26051
    (set (Reg 'rsp))
    'block26052
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'al) (Reg 'rsp))
      (set (Var 'x26050) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (Instr 'set (list 'e (Reg 'al)))
     (Instr 'movzbq (list (Reg 'al) (Var 'x26050)))
     (Instr 'cmpq (list (Imm 1) (Var 'x26050)))
     (JmpIf 'e 'block26051)
     (Jmp 'block26052))))
  (cons
   'block26051
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 100) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26052
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 101) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26050 . Boolean))
  (cons
   'label->live
   (hash
    'block26051
    (set (Reg 'rsp))
    'block26052
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'al) (Reg 'rsp))
      (set (Var 'x26050) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (Instr 'set (list 'e (Reg 'al)))
     (Instr 'movzbq (list (Reg 'al) (Var 'x26050)))
     (Instr 'cmpq (list (Imm 1) (Var 'x26050)))
     (JmpIf 'e 'block26051)
     (Jmp 'block26052))))
  (cons
   'block26051
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 100) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26052
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 101) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
100


testing @ utilities.rkt:2016
test-name:
"cond_test_14"

expected-result:
100


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26050 . Boolean))
  (cons
   'label->live
   (hash
    'block26051
    (set (Reg 'rsp))
    'block26052
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'al) (Reg 'rsp))
      (set (Var 'x26050) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (Instr 'set (list 'e (Reg 'al)))
     (Instr 'movzbq (list (Reg 'al) (Var 'x26050)))
     (Instr 'cmpq (list (Imm 1) (Var 'x26050)))
     (JmpIf 'e 'block26051)
     (Jmp 'block26052))))
  (cons
   'block26051
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 100) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26052
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 101) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26050 . Boolean))
  (cons
   'label->live
   (hash
    'block26051
    (set (Reg 'rsp))
    'block26052
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'al) (Reg 'rsp))
      (set (Var 'x26050) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (Instr 'set (list 'e (Reg 'al)))
     (Instr 'movzbq (list (Reg 'al) (Var 'x26050)))
     (Instr 'cmpq (list (Imm 1) (Var 'x26050)))
     (JmpIf 'e 'block26051)
     (Jmp 'block26052))))
  (cons
   'block26051
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 100) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26052
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 101) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
100


testing @ utilities.rkt:2016
test-name:
"cond_test_14"

expected-result:
100


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26050 . Boolean))
  (cons
   'label->live
   (hash
    'block26051
    (set (Reg 'rsp))
    'block26052
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'al) (Reg 'rsp))
      (set (Var 'x26050) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (Instr 'set (list 'e (Reg 'al)))
     (Instr 'movzbq (list (Reg 'al) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 1) (Reg 'rbx)))
     (JmpIf 'e 'block26051)
     (Jmp 'block26052))))
  (cons
   'block26051
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 100) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26052
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 101) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26050 . Boolean))
  (cons
   'label->live
   (hash
    'block26051
    (set (Reg 'rsp))
    'block26052
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'al) (Reg 'rsp))
      (set (Var 'x26050) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (Instr 'set (list 'e (Reg 'al)))
     (Instr 'movzbq (list (Reg 'al) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 1) (Reg 'rbx)))
     (JmpIf 'e 'block26051)
     (Jmp 'block26052))))
  (cons
   'block26051
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 100) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26052
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 101) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
100


testing @ utilities.rkt:2016
test-name:
"cond_test_14"

expected-result:
100


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26050 . Boolean))
  (cons
   'label->live
   (hash
    'block26051
    (set (Reg 'rsp))
    'block26052
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'al) (Reg 'rsp))
      (set (Var 'x26050) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (Instr 'set (list 'e (Reg 'al)))
     (Instr 'movzbq (list (Reg 'al) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 1) (Reg 'rbx)))
     (JmpIf 'e 'block26051)
     (Jmp 'block26052))))
  (cons
   'block26051
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 100) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26052
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 101) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26050 . Boolean))
  (cons
   'label->live
   (hash
    'block26051
    (set (Reg 'rsp))
    'block26052
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'al) (Reg 'rsp))
      (set (Var 'x26050) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (Instr 'set (list 'e (Reg 'al)))
     (Instr 'movzbq (list (Reg 'al) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 1) (Reg 'rbx)))
     (JmpIf 'e 'block26051)
     (Jmp 'block26052))))
  (cons
   'block26051
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 100) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26052
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 101) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
100


testing @ utilities.rkt:2016
test-name:
"cond_test_14"

expected-result:
100


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26050 . Boolean))
  (cons
   'label->live
   (hash
    'block26051
    (set (Reg 'rsp))
    'block26052
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'al) (Reg 'rsp))
      (set (Var 'x26050) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (Instr 'set (list 'e (Reg 'al)))
     (Instr 'movzbq (list (Reg 'al) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 1) (Reg 'rbx)))
     (JmpIf 'e 'block26051)
     (Jmp 'block26052))))
  (cons
   'block26051
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 100) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26052
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 101) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26050 . Boolean))
  (cons
   'label->live
   (hash
    'block26051
    (set (Reg 'rsp))
    'block26052
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'al) (Reg 'rsp))
      (set (Var 'x26050) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (Instr 'set (list 'e (Reg 'al)))
     (Instr 'movzbq (list (Reg 'al) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 1) (Reg 'rbx)))
     (JmpIf 'e 'block26051)
     (Jmp 'block26052))))
  (cons
   'block26051
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 100) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26052
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 101) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
100


testing @ utilities.rkt:2016
test-name:
"cond_test_14"

expected-result:
100


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program '() (If (Prim 'and (list (Bool #t) (Bool #f))) (Int 42) (Int 24)))


testing @ utilities.rkt:2016
test-name:
"cond_test_15"

expected-result:
24


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (If (If (Bool #t) (Bool #f) (Bool #f)) (Int 42) (Int 24)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (If (If (Bool #t) (Bool #f) (Bool #f)) (Int 42) (Int 24)))


output:  @ utilities.rkt:2042
result:
24


testing @ utilities.rkt:2016
test-name:
"cond_test_15"

expected-result:
24


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (If (If (Bool #t) (Bool #f) (Bool #f)) (Int 42) (Int 24)))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (If (If (Bool #t) (Bool #f) (Bool #f)) (Int 42) (Int 24)))


output:  @ utilities.rkt:2042
result:
24


testing @ utilities.rkt:2016
test-name:
"cond_test_15"

expected-result:
24


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (If (If (Bool #t) (Bool #f) (Bool #f)) (Int 42) (Int 24)))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (If (If (Bool #t) (Bool #f) (Bool #f)) (Int 42) (Int 24)))


output:  @ utilities.rkt:2042
result:
24


testing @ utilities.rkt:2016
test-name:
"cond_test_15"

expected-result:
24


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (If (If (Bool #t) (Bool #f) (Bool #f)) (Int 42) (Int 24)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (If (If (Bool #t) (Bool #f) (Bool #f)) (Int 42) (Int 24)))


output:  @ utilities.rkt:2042
result:
24


testing @ utilities.rkt:2016
test-name:
"cond_test_15"

expected-result:
24


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list (cons 'start (Goto 'block26059)) (cons 'block26059 (Return (Int 24)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types))
 (list (cons 'start (Goto 'block26059)) (cons 'block26059 (Return (Int 24)))))


output:  @ utilities.rkt:2042
result:
24


testing @ utilities.rkt:2016
test-name:
"cond_test_15"

expected-result:
24


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types))
 (list
  (cons 'start (Block '() (list (Jmp 'block26059))))
  (cons
   'block26059
   (Block
    '()
    (list (Instr 'movq (list (Imm 24) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types))
 (list
  (cons 'start (Block '() (list (Jmp 'block26059))))
  (cons
   'block26059
   (Block
    '()
    (list (Instr 'movq (list (Imm 24) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
24


testing @ utilities.rkt:2016
test-name:
"cond_test_15"

expected-result:
24


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26059
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set))))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26059))))
  (cons
   'block26059
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 24) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26059
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set))))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26059))))
  (cons
   'block26059
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 24) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
24


testing @ utilities.rkt:2016
test-name:
"cond_test_15"

expected-result:
24


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26059
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26059))))
  (cons
   'block26059
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 24) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26059
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26059))))
  (cons
   'block26059
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 24) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
24


testing @ utilities.rkt:2016
test-name:
"cond_test_15"

expected-result:
24


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26059
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26059))))
  (cons
   'block26059
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 24) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26059
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26059))))
  (cons
   'block26059
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 24) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
24


testing @ utilities.rkt:2016
test-name:
"cond_test_15"

expected-result:
24


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26059
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26059))))
  (cons
   'block26059
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 24) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26059
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26059))))
  (cons
   'block26059
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 24) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
24


testing @ utilities.rkt:2016
test-name:
"cond_test_15"

expected-result:
24


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26059
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26059))))
  (cons
   'block26059
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 24) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26059
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26059))))
  (cons
   'block26059
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 24) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
24


testing @ utilities.rkt:2016
test-name:
"cond_test_15"

expected-result:
24


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program '() (If (Prim 'or (list (Bool #t) (Bool #f))) (Int 42) (Int 24)))


testing @ utilities.rkt:2016
test-name:
"cond_test_16"

expected-result:
42


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (If (If (Bool #t) (Bool #t) (Bool #f)) (Int 42) (Int 24)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (If (If (Bool #t) (Bool #t) (Bool #f)) (Int 42) (Int 24)))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_16"

expected-result:
42


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (If (If (Bool #t) (Bool #t) (Bool #f)) (Int 42) (Int 24)))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (If (If (Bool #t) (Bool #t) (Bool #f)) (Int 42) (Int 24)))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_16"

expected-result:
42


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (If (If (Bool #t) (Bool #t) (Bool #f)) (Int 42) (Int 24)))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (If (If (Bool #t) (Bool #t) (Bool #f)) (Int 42) (Int 24)))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_16"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (If (If (Bool #t) (Bool #t) (Bool #f)) (Int 42) (Int 24)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (If (If (Bool #t) (Bool #t) (Bool #f)) (Int 42) (Int 24)))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_16"

expected-result:
42


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list (cons 'start (Goto 'block26066)) (cons 'block26066 (Return (Int 42)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types))
 (list (cons 'start (Goto 'block26066)) (cons 'block26066 (Return (Int 42)))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_16"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types))
 (list
  (cons 'start (Block '() (list (Jmp 'block26066))))
  (cons
   'block26066
   (Block
    '()
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types))
 (list
  (cons 'start (Block '() (list (Jmp 'block26066))))
  (cons
   'block26066
   (Block
    '()
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_16"

expected-result:
42


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26066
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set))))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26066))))
  (cons
   'block26066
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26066
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set))))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26066))))
  (cons
   'block26066
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_16"

expected-result:
42


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26066
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26066))))
  (cons
   'block26066
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26066
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26066))))
  (cons
   'block26066
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_16"

expected-result:
42


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26066
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26066))))
  (cons
   'block26066
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26066
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26066))))
  (cons
   'block26066
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_16"

expected-result:
42


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26066
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26066))))
  (cons
   'block26066
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26066
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26066))))
  (cons
   'block26066
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_16"

expected-result:
42


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26066
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26066))))
  (cons
   'block26066
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26066
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26066))))
  (cons
   'block26066
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_16"

expected-result:
42


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (If
  (Prim
   'and
   (list
    (Prim
     'or
     (list
      (Prim 'eq? (list (Int 42) (Int 24)))
      (Prim 'eq? (list (Int 10) (Int 10)))))
    (Prim 'eq? (list (Int 1) (Int 2)))))
  (Prim '+ (list (Int 42) (Int 1)))
  (Prim '+ (list (Int 43) (Int 1)))))


testing @ utilities.rkt:2016
test-name:
"cond_test_17"

expected-result:
44


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (If
   (If
    (Prim 'eq? (list (Int 42) (Int 24)))
    (Bool #t)
    (Prim 'eq? (list (Int 10) (Int 10))))
   (Prim 'eq? (list (Int 1) (Int 2)))
   (Bool #f))
  (Prim '+ (list (Int 42) (Int 1)))
  (Prim '+ (list (Int 43) (Int 1)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (If
   (If
    (Prim 'eq? (list (Int 42) (Int 24)))
    (Bool #t)
    (Prim 'eq? (list (Int 10) (Int 10))))
   (Prim 'eq? (list (Int 1) (Int 2)))
   (Bool #f))
  (Prim '+ (list (Int 42) (Int 1)))
  (Prim '+ (list (Int 43) (Int 1)))))


output:  @ utilities.rkt:2042
result:
44


testing @ utilities.rkt:2016
test-name:
"cond_test_17"

expected-result:
44


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (If
   (If
    (Prim 'eq? (list (Int 42) (Int 24)))
    (Bool #t)
    (Prim 'eq? (list (Int 10) (Int 10))))
   (Prim 'eq? (list (Int 1) (Int 2)))
   (Bool #f))
  (Prim '+ (list (Int 42) (Int 1)))
  (Prim '+ (list (Int 43) (Int 1)))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (If
   (If
    (Prim 'eq? (list (Int 42) (Int 24)))
    (Bool #t)
    (Prim 'eq? (list (Int 10) (Int 10))))
   (Prim 'eq? (list (Int 1) (Int 2)))
   (Bool #f))
  (Prim '+ (list (Int 42) (Int 1)))
  (Prim '+ (list (Int 43) (Int 1)))))


output:  @ utilities.rkt:2042
result:
44


testing @ utilities.rkt:2016
test-name:
"cond_test_17"

expected-result:
44


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (If
   (If
    (Prim 'eq? (list (Int 42) (Int 24)))
    (Bool #t)
    (Prim 'eq? (list (Int 10) (Int 10))))
   (Prim 'eq? (list (Int 1) (Int 2)))
   (Bool #f))
  (Prim '+ (list (Int 42) (Int 1)))
  (Prim '+ (list (Int 43) (Int 1)))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (If
   (If
    (Prim 'eq? (list (Int 42) (Int 24)))
    (Bool #t)
    (Prim 'eq? (list (Int 10) (Int 10))))
   (Prim 'eq? (list (Int 1) (Int 2)))
   (Bool #f))
  (Prim '+ (list (Int 42) (Int 1)))
  (Prim '+ (list (Int 43) (Int 1)))))


output:  @ utilities.rkt:2042
result:
44


testing @ utilities.rkt:2016
test-name:
"cond_test_17"

expected-result:
44


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (If
   (If
    (Prim 'eq? (list (Int 42) (Int 24)))
    (Bool #t)
    (Prim 'eq? (list (Int 10) (Int 10))))
   (Prim 'eq? (list (Int 1) (Int 2)))
   (Bool #f))
  (Prim '+ (list (Int 42) (Int 1)))
  (Prim '+ (list (Int 43) (Int 1)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (If
   (If
    (Prim 'eq? (list (Int 42) (Int 24)))
    (Bool #t)
    (Prim 'eq? (list (Int 10) (Int 10))))
   (Prim 'eq? (list (Int 1) (Int 2)))
   (Bool #f))
  (Prim '+ (list (Int 42) (Int 1)))
  (Prim '+ (list (Int 43) (Int 1)))))


output:  @ utilities.rkt:2042
result:
44


testing @ utilities.rkt:2016
test-name:
"cond_test_17"

expected-result:
44


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'block26077
   (IfStmt
    (Prim 'eq? (list (Int 10) (Int 10)))
    (Goto 'block26076)
    (Goto 'block26074)))
  (cons
   'start
   (IfStmt
    (Prim 'eq? (list (Int 42) (Int 24)))
    (Goto 'block26075)
    (Goto 'block26077)))
  (cons 'block26073 (Return (Prim '+ (list (Int 42) (Int 1)))))
  (cons 'block26074 (Return (Prim '+ (list (Int 43) (Int 1)))))
  (cons
   'block26075
   (IfStmt
    (Prim 'eq? (list (Int 1) (Int 2)))
    (Goto 'block26073)
    (Goto 'block26074)))
  (cons
   'block26076
   (IfStmt
    (Prim 'eq? (list (Int 1) (Int 2)))
    (Goto 'block26073)
    (Goto 'block26074)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types))
 (list
  (cons
   'block26077
   (IfStmt
    (Prim 'eq? (list (Int 10) (Int 10)))
    (Goto 'block26076)
    (Goto 'block26074)))
  (cons
   'start
   (IfStmt
    (Prim 'eq? (list (Int 42) (Int 24)))
    (Goto 'block26075)
    (Goto 'block26077)))
  (cons 'block26073 (Return (Prim '+ (list (Int 42) (Int 1)))))
  (cons 'block26074 (Return (Prim '+ (list (Int 43) (Int 1)))))
  (cons
   'block26075
   (IfStmt
    (Prim 'eq? (list (Int 1) (Int 2)))
    (Goto 'block26073)
    (Goto 'block26074)))
  (cons
   'block26076
   (IfStmt
    (Prim 'eq? (list (Int 1) (Int 2)))
    (Goto 'block26073)
    (Goto 'block26074)))))


output:  @ utilities.rkt:2042
result:
44


testing @ utilities.rkt:2016
test-name:
"cond_test_17"

expected-result:
44


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types))
 (list
  (cons
   'block26077
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (JmpIf 'e 'block26076)
     (Jmp 'block26074))))
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 24) (Reg 'rax)))
     (JmpIf 'e 'block26075)
     (Jmp 'block26077))))
  (cons
   'block26073
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26074
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 43) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26075
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'e 'block26073)
     (Jmp 'block26074))))
  (cons
   'block26076
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'e 'block26073)
     (Jmp 'block26074))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types))
 (list
  (cons
   'block26077
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (JmpIf 'e 'block26076)
     (Jmp 'block26074))))
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 24) (Reg 'rax)))
     (JmpIf 'e 'block26075)
     (Jmp 'block26077))))
  (cons
   'block26073
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26074
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 43) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26075
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'e 'block26073)
     (Jmp 'block26074))))
  (cons
   'block26076
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'e 'block26073)
     (Jmp 'block26074))))))


output:  @ utilities.rkt:2042
result:
44


testing @ utilities.rkt:2016
test-name:
"cond_test_17"

expected-result:
44


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26073
    (set (Reg 'rsp))
    'block26074
    (set (Reg 'rsp))
    'block26075
    (set (Reg 'rsp))
    'block26076
    (set (Reg 'rsp))
    'block26077
    (set)
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set))))
 (list
  (cons
   'block26077
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (JmpIf 'e 'block26076)
     (Jmp 'block26074))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 24) (Reg 'rax)))
     (JmpIf 'e 'block26075)
     (Jmp 'block26077))))
  (cons
   'block26073
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26074
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 43) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26075
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'e 'block26073)
     (Jmp 'block26074))))
  (cons
   'block26076
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'e 'block26073)
     (Jmp 'block26074))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26073
    (set (Reg 'rsp))
    'block26074
    (set (Reg 'rsp))
    'block26075
    (set (Reg 'rsp))
    'block26076
    (set (Reg 'rsp))
    'block26077
    (set)
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set))))
 (list
  (cons
   'block26077
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (JmpIf 'e 'block26076)
     (Jmp 'block26074))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 24) (Reg 'rax)))
     (JmpIf 'e 'block26075)
     (Jmp 'block26077))))
  (cons
   'block26073
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26074
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 43) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26075
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'e 'block26073)
     (Jmp 'block26074))))
  (cons
   'block26076
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'e 'block26073)
     (Jmp 'block26074))))))


output:  @ utilities.rkt:2042
result:
44


testing @ utilities.rkt:2016
test-name:
"cond_test_17"

expected-result:
44


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26073
    (set (Reg 'rsp))
    'block26074
    (set (Reg 'rsp))
    'block26075
    (set (Reg 'rsp))
    'block26076
    (set (Reg 'rsp))
    'block26077
    (set)
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'block26077
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (JmpIf 'e 'block26076)
     (Jmp 'block26074))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 24) (Reg 'rax)))
     (JmpIf 'e 'block26075)
     (Jmp 'block26077))))
  (cons
   'block26073
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26074
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 43) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26075
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'e 'block26073)
     (Jmp 'block26074))))
  (cons
   'block26076
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'e 'block26073)
     (Jmp 'block26074))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26073
    (set (Reg 'rsp))
    'block26074
    (set (Reg 'rsp))
    'block26075
    (set (Reg 'rsp))
    'block26076
    (set (Reg 'rsp))
    'block26077
    (set)
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'block26077
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (JmpIf 'e 'block26076)
     (Jmp 'block26074))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 24) (Reg 'rax)))
     (JmpIf 'e 'block26075)
     (Jmp 'block26077))))
  (cons
   'block26073
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26074
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 43) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26075
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'e 'block26073)
     (Jmp 'block26074))))
  (cons
   'block26076
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'e 'block26073)
     (Jmp 'block26074))))))


output:  @ utilities.rkt:2042
result:
44


testing @ utilities.rkt:2016
test-name:
"cond_test_17"

expected-result:
44


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26073
    (set (Reg 'rsp))
    'block26074
    (set (Reg 'rsp))
    'block26075
    (set (Reg 'rsp))
    'block26076
    (set (Reg 'rsp))
    'block26077
    (set)
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'block26077
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (JmpIf 'e 'block26076)
     (Jmp 'block26074))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 24) (Reg 'rax)))
     (JmpIf 'e 'block26075)
     (Jmp 'block26077))))
  (cons
   'block26073
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26074
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 43) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26075
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'e 'block26073)
     (Jmp 'block26074))))
  (cons
   'block26076
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'e 'block26073)
     (Jmp 'block26074))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26073
    (set (Reg 'rsp))
    'block26074
    (set (Reg 'rsp))
    'block26075
    (set (Reg 'rsp))
    'block26076
    (set (Reg 'rsp))
    'block26077
    (set)
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'block26077
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (JmpIf 'e 'block26076)
     (Jmp 'block26074))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 24) (Reg 'rax)))
     (JmpIf 'e 'block26075)
     (Jmp 'block26077))))
  (cons
   'block26073
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26074
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 43) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26075
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'e 'block26073)
     (Jmp 'block26074))))
  (cons
   'block26076
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'e 'block26073)
     (Jmp 'block26074))))))


output:  @ utilities.rkt:2042
result:
44


testing @ utilities.rkt:2016
test-name:
"cond_test_17"

expected-result:
44


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26073
    (set (Reg 'rsp))
    'block26074
    (set (Reg 'rsp))
    'block26075
    (set (Reg 'rsp))
    'block26076
    (set (Reg 'rsp))
    'block26077
    (set)
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'block26077
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (JmpIf 'e 'block26076)
     (Jmp 'block26074))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 24) (Reg 'rax)))
     (JmpIf 'e 'block26075)
     (Jmp 'block26077))))
  (cons
   'block26073
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26074
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 43) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26075
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'e 'block26073)
     (Jmp 'block26074))))
  (cons
   'block26076
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'e 'block26073)
     (Jmp 'block26074))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26073
    (set (Reg 'rsp))
    'block26074
    (set (Reg 'rsp))
    'block26075
    (set (Reg 'rsp))
    'block26076
    (set (Reg 'rsp))
    'block26077
    (set)
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'block26077
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (JmpIf 'e 'block26076)
     (Jmp 'block26074))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 24) (Reg 'rax)))
     (JmpIf 'e 'block26075)
     (Jmp 'block26077))))
  (cons
   'block26073
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26074
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 43) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26075
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'e 'block26073)
     (Jmp 'block26074))))
  (cons
   'block26076
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'e 'block26073)
     (Jmp 'block26074))))))


output:  @ utilities.rkt:2042
result:
44


testing @ utilities.rkt:2016
test-name:
"cond_test_17"

expected-result:
44


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26073
    (set (Reg 'rsp))
    'block26074
    (set (Reg 'rsp))
    'block26075
    (set (Reg 'rsp))
    'block26076
    (set (Reg 'rsp))
    'block26077
    (set)
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'block26077
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (JmpIf 'e 'block26076)
     (Jmp 'block26074))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 24) (Reg 'rax)))
     (JmpIf 'e 'block26075)
     (Jmp 'block26077))))
  (cons
   'block26073
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26074
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 43) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26075
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'e 'block26073)
     (Jmp 'block26074))))
  (cons
   'block26076
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'e 'block26073)
     (Jmp 'block26074))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26073
    (set (Reg 'rsp))
    'block26074
    (set (Reg 'rsp))
    'block26075
    (set (Reg 'rsp))
    'block26076
    (set (Reg 'rsp))
    'block26077
    (set)
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'block26077
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (JmpIf 'e 'block26076)
     (Jmp 'block26074))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 24) (Reg 'rax)))
     (JmpIf 'e 'block26075)
     (Jmp 'block26077))))
  (cons
   'block26073
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26074
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 43) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26075
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'e 'block26073)
     (Jmp 'block26074))))
  (cons
   'block26076
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'e 'block26073)
     (Jmp 'block26074))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
44


testing @ utilities.rkt:2016
test-name:
"cond_test_17"

expected-result:
44


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (If
  (Prim
   'and
   (list
    (Prim
     'and
     (list (Prim '<= (list (Int 4) (Int 5))) (Prim '< (list (Int 3) (Int 2)))))
    (Prim 'or (list (Bool #f) (Prim 'eq? (list (Int 1) (Int 1)))))))
  (Int 42)
  (Int 43)))


testing @ utilities.rkt:2016
test-name:
"cond_test_18"

expected-result:
43


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (If
   (If
    (Prim '<= (list (Int 4) (Int 5)))
    (Prim '< (list (Int 3) (Int 2)))
    (Bool #f))
   (If (Bool #f) (Bool #t) (Prim 'eq? (list (Int 1) (Int 1))))
   (Bool #f))
  (Int 42)
  (Int 43)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (If
   (If
    (Prim '<= (list (Int 4) (Int 5)))
    (Prim '< (list (Int 3) (Int 2)))
    (Bool #f))
   (If (Bool #f) (Bool #t) (Prim 'eq? (list (Int 1) (Int 1))))
   (Bool #f))
  (Int 42)
  (Int 43)))


output:  @ utilities.rkt:2042
result:
43


testing @ utilities.rkt:2016
test-name:
"cond_test_18"

expected-result:
43


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (If
   (If
    (Prim '<= (list (Int 4) (Int 5)))
    (Prim '< (list (Int 3) (Int 2)))
    (Bool #f))
   (If (Bool #f) (Bool #t) (Prim 'eq? (list (Int 1) (Int 1))))
   (Bool #f))
  (Int 42)
  (Int 43)))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (If
   (If
    (Prim '<= (list (Int 4) (Int 5)))
    (Prim '< (list (Int 3) (Int 2)))
    (Bool #f))
   (If (Bool #f) (Bool #t) (Prim 'eq? (list (Int 1) (Int 1))))
   (Bool #f))
  (Int 42)
  (Int 43)))


output:  @ utilities.rkt:2042
result:
43


testing @ utilities.rkt:2016
test-name:
"cond_test_18"

expected-result:
43


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (If
   (If
    (Prim '<= (list (Int 4) (Int 5)))
    (Prim '< (list (Int 3) (Int 2)))
    (Bool #f))
   (If (Bool #f) (Bool #t) (Prim 'eq? (list (Int 1) (Int 1))))
   (Bool #f))
  (Int 42)
  (Int 43)))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (If
   (If
    (Prim '<= (list (Int 4) (Int 5)))
    (Prim '< (list (Int 3) (Int 2)))
    (Bool #f))
   (If (Bool #f) (Bool #t) (Prim 'eq? (list (Int 1) (Int 1))))
   (Bool #f))
  (Int 42)
  (Int 43)))


output:  @ utilities.rkt:2042
result:
43


testing @ utilities.rkt:2016
test-name:
"cond_test_18"

expected-result:
43


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (If
   (If
    (Prim '<= (list (Int 4) (Int 5)))
    (Prim '< (list (Int 3) (Int 2)))
    (Bool #f))
   (If (Bool #f) (Bool #t) (Prim 'eq? (list (Int 1) (Int 1))))
   (Bool #f))
  (Int 42)
  (Int 43)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (If
   (If
    (Prim '<= (list (Int 4) (Int 5)))
    (Prim '< (list (Int 3) (Int 2)))
    (Bool #f))
   (If (Bool #f) (Bool #t) (Prim 'eq? (list (Int 1) (Int 1))))
   (Bool #f))
  (Int 42)
  (Int 43)))


output:  @ utilities.rkt:2042
result:
43


testing @ utilities.rkt:2016
test-name:
"cond_test_18"

expected-result:
43


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons 'block26085 (Return (Int 43)))
  (cons
   'start
   (IfStmt
    (Prim '<= (list (Int 4) (Int 5)))
    (Goto 'block26087)
    (Goto 'block26085)))
  (cons
   'block26086
   (IfStmt
    (Prim 'eq? (list (Int 1) (Int 1)))
    (Goto 'block26084)
    (Goto 'block26085)))
  (cons
   'block26087
   (IfStmt
    (Prim '< (list (Int 3) (Int 2)))
    (Goto 'block26086)
    (Goto 'block26085)))
  (cons 'block26084 (Return (Int 42)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types))
 (list
  (cons 'block26085 (Return (Int 43)))
  (cons
   'start
   (IfStmt
    (Prim '<= (list (Int 4) (Int 5)))
    (Goto 'block26087)
    (Goto 'block26085)))
  (cons
   'block26086
   (IfStmt
    (Prim 'eq? (list (Int 1) (Int 1)))
    (Goto 'block26084)
    (Goto 'block26085)))
  (cons
   'block26087
   (IfStmt
    (Prim '< (list (Int 3) (Int 2)))
    (Goto 'block26086)
    (Goto 'block26085)))
  (cons 'block26084 (Return (Int 42)))))


output:  @ utilities.rkt:2042
result:
43


testing @ utilities.rkt:2016
test-name:
"cond_test_18"

expected-result:
43


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types))
 (list
  (cons
   'block26085
   (Block
    '()
    (list (Instr 'movq (list (Imm 43) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 4) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 5) (Reg 'rax)))
     (JmpIf 'le 'block26087)
     (Jmp 'block26085))))
  (cons
   'block26086
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 1) (Reg 'rax)))
     (JmpIf 'e 'block26084)
     (Jmp 'block26085))))
  (cons
   'block26087
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 3) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'l 'block26086)
     (Jmp 'block26085))))
  (cons
   'block26084
   (Block
    '()
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types))
 (list
  (cons
   'block26085
   (Block
    '()
    (list (Instr 'movq (list (Imm 43) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 4) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 5) (Reg 'rax)))
     (JmpIf 'le 'block26087)
     (Jmp 'block26085))))
  (cons
   'block26086
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 1) (Reg 'rax)))
     (JmpIf 'e 'block26084)
     (Jmp 'block26085))))
  (cons
   'block26087
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 3) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'l 'block26086)
     (Jmp 'block26085))))
  (cons
   'block26084
   (Block
    '()
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
43


testing @ utilities.rkt:2016
test-name:
"cond_test_18"

expected-result:
43


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26084
    (set (Reg 'rsp))
    'block26085
    (set (Reg 'rsp))
    'block26086
    (set (Reg 'rsp))
    'block26087
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp)))))
 (list
  (cons
   'block26085
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 43) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 4) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 5) (Reg 'rax)))
     (JmpIf 'le 'block26087)
     (Jmp 'block26085))))
  (cons
   'block26086
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 1) (Reg 'rax)))
     (JmpIf 'e 'block26084)
     (Jmp 'block26085))))
  (cons
   'block26087
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 3) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'l 'block26086)
     (Jmp 'block26085))))
  (cons
   'block26084
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26084
    (set (Reg 'rsp))
    'block26085
    (set (Reg 'rsp))
    'block26086
    (set (Reg 'rsp))
    'block26087
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp)))))
 (list
  (cons
   'block26085
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 43) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 4) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 5) (Reg 'rax)))
     (JmpIf 'le 'block26087)
     (Jmp 'block26085))))
  (cons
   'block26086
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 1) (Reg 'rax)))
     (JmpIf 'e 'block26084)
     (Jmp 'block26085))))
  (cons
   'block26087
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 3) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'l 'block26086)
     (Jmp 'block26085))))
  (cons
   'block26084
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
43


testing @ utilities.rkt:2016
test-name:
"cond_test_18"

expected-result:
43


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26084
    (set (Reg 'rsp))
    'block26085
    (set (Reg 'rsp))
    'block26086
    (set (Reg 'rsp))
    'block26087
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'block26085
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 43) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 4) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 5) (Reg 'rax)))
     (JmpIf 'le 'block26087)
     (Jmp 'block26085))))
  (cons
   'block26086
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 1) (Reg 'rax)))
     (JmpIf 'e 'block26084)
     (Jmp 'block26085))))
  (cons
   'block26087
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 3) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'l 'block26086)
     (Jmp 'block26085))))
  (cons
   'block26084
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26084
    (set (Reg 'rsp))
    'block26085
    (set (Reg 'rsp))
    'block26086
    (set (Reg 'rsp))
    'block26087
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'block26085
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 43) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 4) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 5) (Reg 'rax)))
     (JmpIf 'le 'block26087)
     (Jmp 'block26085))))
  (cons
   'block26086
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 1) (Reg 'rax)))
     (JmpIf 'e 'block26084)
     (Jmp 'block26085))))
  (cons
   'block26087
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 3) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'l 'block26086)
     (Jmp 'block26085))))
  (cons
   'block26084
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
43


testing @ utilities.rkt:2016
test-name:
"cond_test_18"

expected-result:
43


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26084
    (set (Reg 'rsp))
    'block26085
    (set (Reg 'rsp))
    'block26086
    (set (Reg 'rsp))
    'block26087
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'block26085
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 43) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 4) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 5) (Reg 'rax)))
     (JmpIf 'le 'block26087)
     (Jmp 'block26085))))
  (cons
   'block26086
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 1) (Reg 'rax)))
     (JmpIf 'e 'block26084)
     (Jmp 'block26085))))
  (cons
   'block26087
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 3) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'l 'block26086)
     (Jmp 'block26085))))
  (cons
   'block26084
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26084
    (set (Reg 'rsp))
    'block26085
    (set (Reg 'rsp))
    'block26086
    (set (Reg 'rsp))
    'block26087
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'block26085
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 43) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 4) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 5) (Reg 'rax)))
     (JmpIf 'le 'block26087)
     (Jmp 'block26085))))
  (cons
   'block26086
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 1) (Reg 'rax)))
     (JmpIf 'e 'block26084)
     (Jmp 'block26085))))
  (cons
   'block26087
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 3) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'l 'block26086)
     (Jmp 'block26085))))
  (cons
   'block26084
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
43


testing @ utilities.rkt:2016
test-name:
"cond_test_18"

expected-result:
43


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26084
    (set (Reg 'rsp))
    'block26085
    (set (Reg 'rsp))
    'block26086
    (set (Reg 'rsp))
    'block26087
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'block26085
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 43) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 4) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 5) (Reg 'rax)))
     (JmpIf 'le 'block26087)
     (Jmp 'block26085))))
  (cons
   'block26086
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 1) (Reg 'rax)))
     (JmpIf 'e 'block26084)
     (Jmp 'block26085))))
  (cons
   'block26087
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 3) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'l 'block26086)
     (Jmp 'block26085))))
  (cons
   'block26084
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26084
    (set (Reg 'rsp))
    'block26085
    (set (Reg 'rsp))
    'block26086
    (set (Reg 'rsp))
    'block26087
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'block26085
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 43) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 4) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 5) (Reg 'rax)))
     (JmpIf 'le 'block26087)
     (Jmp 'block26085))))
  (cons
   'block26086
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 1) (Reg 'rax)))
     (JmpIf 'e 'block26084)
     (Jmp 'block26085))))
  (cons
   'block26087
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 3) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'l 'block26086)
     (Jmp 'block26085))))
  (cons
   'block26084
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
43


testing @ utilities.rkt:2016
test-name:
"cond_test_18"

expected-result:
43


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26084
    (set (Reg 'rsp))
    'block26085
    (set (Reg 'rsp))
    'block26086
    (set (Reg 'rsp))
    'block26087
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'block26085
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 43) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 4) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 5) (Reg 'rax)))
     (JmpIf 'le 'block26087)
     (Jmp 'block26085))))
  (cons
   'block26086
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 1) (Reg 'rax)))
     (JmpIf 'e 'block26084)
     (Jmp 'block26085))))
  (cons
   'block26087
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 3) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'l 'block26086)
     (Jmp 'block26085))))
  (cons
   'block26084
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26084
    (set (Reg 'rsp))
    'block26085
    (set (Reg 'rsp))
    'block26086
    (set (Reg 'rsp))
    'block26087
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'block26085
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 43) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 4) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 5) (Reg 'rax)))
     (JmpIf 'le 'block26087)
     (Jmp 'block26085))))
  (cons
   'block26086
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 1) (Reg 'rax)))
     (JmpIf 'e 'block26084)
     (Jmp 'block26085))))
  (cons
   'block26087
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 3) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 2) (Reg 'rax)))
     (JmpIf 'l 'block26086)
     (Jmp 'block26085))))
  (cons
   'block26084
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
43


testing @ utilities.rkt:2016
test-name:
"cond_test_18"

expected-result:
43


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Prim
  '+
  (list
   (If
    (Prim 'and (list (Bool #t) (Prim 'or (list (Bool #f) (Bool #t)))))
    (Int 42)
    (Int 43))
   (Int 0))))


testing @ utilities.rkt:2016
test-name:
"cond_test_19"

expected-result:
42


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list
   (If
    (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
    (Int 42)
    (Int 43))
   (Int 0))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list
   (If
    (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
    (Int 42)
    (Int 43))
   (Int 0))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_19"

expected-result:
42


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list
   (If
    (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
    (Int 42)
    (Int 43))
   (Int 0))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list
   (If
    (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
    (Int 42)
    (Int 43))
   (Int 0))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_19"

expected-result:
42


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list
   (If
    (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
    (Int 42)
    (Int 43))
   (Int 0))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list
   (If
    (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
    (Int 42)
    (Int 43))
   (Int 0))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_19"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'if_26094
  (If
   (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
   (Int 42)
   (Int 43))
  (Prim '+ (list (Var 'if_26094) (Int 0)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'if_26094
  (If
   (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
   (Int 42)
   (Int 43))
  (Prim '+ (list (Var 'if_26094) (Int 0)))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_19"

expected-result:
42


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons 'start (Goto 'block26095))
  (cons
   'block26095
   (Seq
    (Assign (Var 'if_26094) (Int 42))
    (Return (Prim '+ (list (Var 'if_26094) (Int 0))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types (if_26094 . Integer)))
 (list
  (cons 'start (Goto 'block26095))
  (cons
   'block26095
   (Seq
    (Assign (Var 'if_26094) (Int 42))
    (Return (Prim '+ (list (Var 'if_26094) (Int 0))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_19"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types (if_26094 . Integer)))
 (list
  (cons 'start (Block '() (list (Jmp 'block26095))))
  (cons
   'block26095
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 42) (Var 'if_26094)))
     (Instr 'movq (list (Var 'if_26094) (Reg 'rax)))
     (Instr 'addq (list (Imm 0) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types (if_26094 . Integer)))
 (list
  (cons 'start (Block '() (list (Jmp 'block26095))))
  (cons
   'block26095
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 42) (Var 'if_26094)))
     (Instr 'movq (list (Var 'if_26094) (Reg 'rax)))
     (Instr 'addq (list (Imm 0) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_19"

expected-result:
42


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (if_26094 . Integer))
  (cons
   'label->live
   (hash
    'block26095
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set))))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26095))))
  (cons
   'block26095
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26094) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Var 'if_26094)))
     (Instr 'movq (list (Var 'if_26094) (Reg 'rax)))
     (Instr 'addq (list (Imm 0) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (if_26094 . Integer))
  (cons
   'label->live
   (hash
    'block26095
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set))))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26095))))
  (cons
   'block26095
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26094) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Var 'if_26094)))
     (Instr 'movq (list (Var 'if_26094) (Reg 'rax)))
     (Instr 'addq (list (Imm 0) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_19"

expected-result:
42


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (if_26094 . Integer))
  (cons
   'label->live
   (hash
    'block26095
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26095))))
  (cons
   'block26095
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26094) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Var 'if_26094)))
     (Instr 'movq (list (Var 'if_26094) (Reg 'rax)))
     (Instr 'addq (list (Imm 0) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (if_26094 . Integer))
  (cons
   'label->live
   (hash
    'block26095
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26095))))
  (cons
   'block26095
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26094) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Var 'if_26094)))
     (Instr 'movq (list (Var 'if_26094) (Reg 'rax)))
     (Instr 'addq (list (Imm 0) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_19"

expected-result:
42


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (if_26094 . Integer))
  (cons
   'label->live
   (hash
    'block26095
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26095))))
  (cons
   'block26095
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26094) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 0) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (if_26094 . Integer))
  (cons
   'label->live
   (hash
    'block26095
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26095))))
  (cons
   'block26095
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26094) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 0) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_19"

expected-result:
42


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (if_26094 . Integer))
  (cons
   'label->live
   (hash
    'block26095
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26095))))
  (cons
   'block26095
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26094) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 0) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (if_26094 . Integer))
  (cons
   'label->live
   (hash
    'block26095
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26095))))
  (cons
   'block26095
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26094) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 0) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_19"

expected-result:
42


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (if_26094 . Integer))
  (cons
   'label->live
   (hash
    'block26095
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26095))))
  (cons
   'block26095
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26094) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 0) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (if_26094 . Integer))
  (cons
   'label->live
   (hash
    'block26095
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26095))))
  (cons
   'block26095
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26094) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 42) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 0) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_19"

expected-result:
42


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program '() (Let 'x (Bool #f) (Int 42)))


testing @ utilities.rkt:2016
test-name:
"cond_test_2"

expected-result:
42


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Let 'x (Bool #f) (Int 42)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Let 'x (Bool #f) (Int 42)))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_2"

expected-result:
42


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Let 'x26102 (Bool #f) (Int 42)))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Let 'x26102 (Bool #f) (Int 42)))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_2"

expected-result:
42


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Let 'x26102 (Bool #f) (Int 42)))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Let 'x26102 (Bool #f) (Int 42)))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_2"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (Let 'x26102 (Bool #f) (Int 42)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (Let 'x26102 (Bool #f) (Int 42)))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_2"

expected-result:
42


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list (cons 'start (Seq (Assign (Var 'x26102) (Bool #f)) (Return (Int 42))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types (x26102 . Boolean)))
 (list (cons 'start (Seq (Assign (Var 'x26102) (Bool #f)) (Return (Int 42))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_2"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types (x26102 . Boolean)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 0) (Var 'x26102)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types (x26102 . Boolean)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 0) (Var 'x26102)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_2"

expected-result:
42


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26102 . Boolean))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Var 'x26102)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26102 . Boolean))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Var 'x26102)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_2"

expected-result:
42


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26102 . Boolean))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Var 'x26102)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26102 . Boolean))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Var 'x26102)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_2"

expected-result:
42


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26102 . Boolean))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Reg 'rbx)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26102 . Boolean))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Reg 'rbx)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_2"

expected-result:
42


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26102 . Boolean))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Reg 'rbx)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26102 . Boolean))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Reg 'rbx)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_2"

expected-result:
42


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26102 . Boolean))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Reg 'rbx)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26102 . Boolean))
  (cons
   'label->live
   (hash 'conclusion (set (Reg 'rax) (Reg 'rsp)) 'start (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Reg 'rbx)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_2"

expected-result:
42


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Prim '- (list (If (Bool #f) (Int 42) (Prim '- (list (Int 43)))))))


testing @ utilities.rkt:2016
test-name:
"cond_test_20"

expected-result:
43


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim '- (list (If (Bool #f) (Int 42) (Prim '- (list (Int 43)))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim '- (list (If (Bool #f) (Int 42) (Prim '- (list (Int 43)))))))


output:  @ utilities.rkt:2042
result:
43


testing @ utilities.rkt:2016
test-name:
"cond_test_20"

expected-result:
43


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim '- (list (If (Bool #f) (Int 42) (Prim '- (list (Int 43)))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim '- (list (If (Bool #f) (Int 42) (Prim '- (list (Int 43)))))))


output:  @ utilities.rkt:2042
result:
43


testing @ utilities.rkt:2016
test-name:
"cond_test_20"

expected-result:
43


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim '- (list (If (Bool #f) (Int 42) (Prim '- (list (Int 43)))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim '- (list (If (Bool #f) (Int 42) (Prim '- (list (Int 43)))))))


output:  @ utilities.rkt:2042
result:
43


testing @ utilities.rkt:2016
test-name:
"cond_test_20"

expected-result:
43


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'if_26109
  (If (Bool #f) (Int 42) (Prim '- (list (Int 43))))
  (Prim '- (list (Var 'if_26109)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'if_26109
  (If (Bool #f) (Int 42) (Prim '- (list (Int 43))))
  (Prim '- (list (Var 'if_26109)))))


output:  @ utilities.rkt:2042
result:
43


testing @ utilities.rkt:2016
test-name:
"cond_test_20"

expected-result:
43


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons 'start (Goto 'block26110))
  (cons
   'block26110
   (Seq
    (Assign (Var 'if_26109) (Prim '- (list (Int 43))))
    (Return (Prim '- (list (Var 'if_26109))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types (if_26109 . Integer)))
 (list
  (cons 'start (Goto 'block26110))
  (cons
   'block26110
   (Seq
    (Assign (Var 'if_26109) (Prim '- (list (Int 43))))
    (Return (Prim '- (list (Var 'if_26109))))))))


output:  @ utilities.rkt:2042
result:
43


testing @ utilities.rkt:2016
test-name:
"cond_test_20"

expected-result:
43


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types (if_26109 . Integer)))
 (list
  (cons 'start (Block '() (list (Jmp 'block26110))))
  (cons
   'block26110
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 43) (Var 'if_26109)))
     (Instr 'negq (list (Var 'if_26109)))
     (Instr 'movq (list (Var 'if_26109) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types (if_26109 . Integer)))
 (list
  (cons 'start (Block '() (list (Jmp 'block26110))))
  (cons
   'block26110
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 43) (Var 'if_26109)))
     (Instr 'negq (list (Var 'if_26109)))
     (Instr 'movq (list (Var 'if_26109) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
43


testing @ utilities.rkt:2016
test-name:
"cond_test_20"

expected-result:
43


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (if_26109 . Integer))
  (cons
   'label->live
   (hash
    'block26110
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26110))))
  (cons
   'block26110
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26109) (Reg 'rsp))
      (set (Var 'if_26109) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 43) (Var 'if_26109)))
     (Instr 'negq (list (Var 'if_26109)))
     (Instr 'movq (list (Var 'if_26109) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (if_26109 . Integer))
  (cons
   'label->live
   (hash
    'block26110
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26110))))
  (cons
   'block26110
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26109) (Reg 'rsp))
      (set (Var 'if_26109) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 43) (Var 'if_26109)))
     (Instr 'negq (list (Var 'if_26109)))
     (Instr 'movq (list (Var 'if_26109) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
43


testing @ utilities.rkt:2016
test-name:
"cond_test_20"

expected-result:
43


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (if_26109 . Integer))
  (cons
   'label->live
   (hash
    'block26110
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26110))))
  (cons
   'block26110
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26109) (Reg 'rsp))
      (set (Var 'if_26109) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 43) (Var 'if_26109)))
     (Instr 'negq (list (Var 'if_26109)))
     (Instr 'movq (list (Var 'if_26109) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (if_26109 . Integer))
  (cons
   'label->live
   (hash
    'block26110
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26110))))
  (cons
   'block26110
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26109) (Reg 'rsp))
      (set (Var 'if_26109) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 43) (Var 'if_26109)))
     (Instr 'negq (list (Var 'if_26109)))
     (Instr 'movq (list (Var 'if_26109) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
43


testing @ utilities.rkt:2016
test-name:
"cond_test_20"

expected-result:
43


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (if_26109 . Integer))
  (cons
   'label->live
   (hash
    'block26110
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26110))))
  (cons
   'block26110
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26109) (Reg 'rsp))
      (set (Var 'if_26109) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 43) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (if_26109 . Integer))
  (cons
   'label->live
   (hash
    'block26110
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26110))))
  (cons
   'block26110
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26109) (Reg 'rsp))
      (set (Var 'if_26109) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 43) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
43


testing @ utilities.rkt:2016
test-name:
"cond_test_20"

expected-result:
43


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (if_26109 . Integer))
  (cons
   'label->live
   (hash
    'block26110
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26110))))
  (cons
   'block26110
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26109) (Reg 'rsp))
      (set (Var 'if_26109) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 43) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (if_26109 . Integer))
  (cons
   'label->live
   (hash
    'block26110
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26110))))
  (cons
   'block26110
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26109) (Reg 'rsp))
      (set (Var 'if_26109) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 43) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
43


testing @ utilities.rkt:2016
test-name:
"cond_test_20"

expected-result:
43


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (if_26109 . Integer))
  (cons
   'label->live
   (hash
    'block26110
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26110))))
  (cons
   'block26110
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26109) (Reg 'rsp))
      (set (Var 'if_26109) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 43) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (if_26109 . Integer))
  (cons
   'label->live
   (hash
    'block26110
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26110))))
  (cons
   'block26110
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26109) (Reg 'rsp))
      (set (Var 'if_26109) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 43) (Reg 'rbx)))
     (Instr 'negq (list (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
43


testing @ utilities.rkt:2016
test-name:
"cond_test_20"

expected-result:
43


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Prim
  '+
  (list
   (If
    (Prim 'and (list (Bool #t) (Prim 'or (list (Bool #f) (Bool #t)))))
    (If (Bool #t) (Int 1) (Int 2))
    (Int 43))
   (Int 1))))


testing @ utilities.rkt:2016
test-name:
"cond_test_21"

expected-result:
2


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list
   (If
    (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
    (If (Bool #t) (Int 1) (Int 2))
    (Int 43))
   (Int 1))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list
   (If
    (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
    (If (Bool #t) (Int 1) (Int 2))
    (Int 43))
   (Int 1))))


output:  @ utilities.rkt:2042
result:
2


testing @ utilities.rkt:2016
test-name:
"cond_test_21"

expected-result:
2


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list
   (If
    (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
    (If (Bool #t) (Int 1) (Int 2))
    (Int 43))
   (Int 1))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list
   (If
    (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
    (If (Bool #t) (Int 1) (Int 2))
    (Int 43))
   (Int 1))))


output:  @ utilities.rkt:2042
result:
2


testing @ utilities.rkt:2016
test-name:
"cond_test_21"

expected-result:
2


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list
   (If
    (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
    (If (Bool #t) (Int 1) (Int 2))
    (Int 43))
   (Int 1))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list
   (If
    (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
    (If (Bool #t) (Int 1) (Int 2))
    (Int 43))
   (Int 1))))


output:  @ utilities.rkt:2042
result:
2


testing @ utilities.rkt:2016
test-name:
"cond_test_21"

expected-result:
2


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'if_26117
  (If
   (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
   (If (Bool #t) (Int 1) (Int 2))
   (Int 43))
  (Prim '+ (list (Var 'if_26117) (Int 1)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'if_26117
  (If
   (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
   (If (Bool #t) (Int 1) (Int 2))
   (Int 43))
  (Prim '+ (list (Var 'if_26117) (Int 1)))))


output:  @ utilities.rkt:2042
result:
2


testing @ utilities.rkt:2016
test-name:
"cond_test_21"

expected-result:
2


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons 'start (Goto 'block26118))
  (cons
   'block26118
   (Seq
    (Assign (Var 'if_26117) (Int 1))
    (Return (Prim '+ (list (Var 'if_26117) (Int 1))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types (if_26117 . Integer)))
 (list
  (cons 'start (Goto 'block26118))
  (cons
   'block26118
   (Seq
    (Assign (Var 'if_26117) (Int 1))
    (Return (Prim '+ (list (Var 'if_26117) (Int 1))))))))


output:  @ utilities.rkt:2042
result:
2


testing @ utilities.rkt:2016
test-name:
"cond_test_21"

expected-result:
2


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types (if_26117 . Integer)))
 (list
  (cons 'start (Block '() (list (Jmp 'block26118))))
  (cons
   'block26118
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 1) (Var 'if_26117)))
     (Instr 'movq (list (Var 'if_26117) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types (if_26117 . Integer)))
 (list
  (cons 'start (Block '() (list (Jmp 'block26118))))
  (cons
   'block26118
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 1) (Var 'if_26117)))
     (Instr 'movq (list (Var 'if_26117) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
2


testing @ utilities.rkt:2016
test-name:
"cond_test_21"

expected-result:
2


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (if_26117 . Integer))
  (cons
   'label->live
   (hash
    'block26118
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26118))))
  (cons
   'block26118
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26117) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Var 'if_26117)))
     (Instr 'movq (list (Var 'if_26117) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (if_26117 . Integer))
  (cons
   'label->live
   (hash
    'block26118
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp)))))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26118))))
  (cons
   'block26118
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26117) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Var 'if_26117)))
     (Instr 'movq (list (Var 'if_26117) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
2


testing @ utilities.rkt:2016
test-name:
"cond_test_21"

expected-result:
2


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (if_26117 . Integer))
  (cons
   'label->live
   (hash
    'block26118
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26118))))
  (cons
   'block26118
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26117) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Var 'if_26117)))
     (Instr 'movq (list (Var 'if_26117) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (if_26117 . Integer))
  (cons
   'label->live
   (hash
    'block26118
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26118))))
  (cons
   'block26118
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26117) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Var 'if_26117)))
     (Instr 'movq (list (Var 'if_26117) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
2


testing @ utilities.rkt:2016
test-name:
"cond_test_21"

expected-result:
2


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (if_26117 . Integer))
  (cons
   'label->live
   (hash
    'block26118
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26118))))
  (cons
   'block26118
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26117) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (if_26117 . Integer))
  (cons
   'label->live
   (hash
    'block26118
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26118))))
  (cons
   'block26118
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26117) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
2


testing @ utilities.rkt:2016
test-name:
"cond_test_21"

expected-result:
2


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (if_26117 . Integer))
  (cons
   'label->live
   (hash
    'block26118
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26118))))
  (cons
   'block26118
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26117) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (if_26117 . Integer))
  (cons
   'label->live
   (hash
    'block26118
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26118))))
  (cons
   'block26118
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26117) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
2


testing @ utilities.rkt:2016
test-name:
"cond_test_21"

expected-result:
2


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (if_26117 . Integer))
  (cons
   'label->live
   (hash
    'block26118
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26118))))
  (cons
   'block26118
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26117) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (if_26117 . Integer))
  (cons
   'label->live
   (hash
    'block26118
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26118))))
  (cons
   'block26118
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'if_26117) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
2


testing @ utilities.rkt:2016
test-name:
"cond_test_21"

expected-result:
2


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (If
  (If
   (If
    (Prim 'and (list (Bool #t) (Prim 'or (list (Bool #f) (Bool #t)))))
    (Bool #f)
    (Bool #t))
   (Prim 'eq? (list (Int 89) (Int 10)))
   (Prim '>= (list (Int 10) (Int 10))))
  (Prim '+ (list (Int 15) (Int 3)))
  (Prim '+ (list (Int 61) (Int 8)))))


testing @ utilities.rkt:2016
test-name:
"cond_test_22"

expected-result:
18


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (If
   (If
    (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
    (Bool #f)
    (Bool #t))
   (Prim 'eq? (list (Int 89) (Int 10)))
   (Prim '>= (list (Int 10) (Int 10))))
  (Prim '+ (list (Int 15) (Int 3)))
  (Prim '+ (list (Int 61) (Int 8)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (If
   (If
    (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
    (Bool #f)
    (Bool #t))
   (Prim 'eq? (list (Int 89) (Int 10)))
   (Prim '>= (list (Int 10) (Int 10))))
  (Prim '+ (list (Int 15) (Int 3)))
  (Prim '+ (list (Int 61) (Int 8)))))


output:  @ utilities.rkt:2042
result:
18


testing @ utilities.rkt:2016
test-name:
"cond_test_22"

expected-result:
18


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (If
   (If
    (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
    (Bool #f)
    (Bool #t))
   (Prim 'eq? (list (Int 89) (Int 10)))
   (Prim '>= (list (Int 10) (Int 10))))
  (Prim '+ (list (Int 15) (Int 3)))
  (Prim '+ (list (Int 61) (Int 8)))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (If
   (If
    (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
    (Bool #f)
    (Bool #t))
   (Prim 'eq? (list (Int 89) (Int 10)))
   (Prim '>= (list (Int 10) (Int 10))))
  (Prim '+ (list (Int 15) (Int 3)))
  (Prim '+ (list (Int 61) (Int 8)))))


output:  @ utilities.rkt:2042
result:
18


testing @ utilities.rkt:2016
test-name:
"cond_test_22"

expected-result:
18


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (If
   (If
    (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
    (Bool #f)
    (Bool #t))
   (Prim 'eq? (list (Int 89) (Int 10)))
   (Prim '>= (list (Int 10) (Int 10))))
  (Prim '+ (list (Int 15) (Int 3)))
  (Prim '+ (list (Int 61) (Int 8)))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (If
   (If
    (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
    (Bool #f)
    (Bool #t))
   (Prim 'eq? (list (Int 89) (Int 10)))
   (Prim '>= (list (Int 10) (Int 10))))
  (Prim '+ (list (Int 15) (Int 3)))
  (Prim '+ (list (Int 61) (Int 8)))))


output:  @ utilities.rkt:2042
result:
18


testing @ utilities.rkt:2016
test-name:
"cond_test_22"

expected-result:
18


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (If
   (If
    (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
    (Bool #f)
    (Bool #t))
   (Prim 'eq? (list (Int 89) (Int 10)))
   (Prim '>= (list (Int 10) (Int 10))))
  (Prim '+ (list (Int 15) (Int 3)))
  (Prim '+ (list (Int 61) (Int 8)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (If
   (If
    (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
    (Bool #f)
    (Bool #t))
   (Prim 'eq? (list (Int 89) (Int 10)))
   (Prim '>= (list (Int 10) (Int 10))))
  (Prim '+ (list (Int 15) (Int 3)))
  (Prim '+ (list (Int 61) (Int 8)))))


output:  @ utilities.rkt:2042
result:
18


testing @ utilities.rkt:2016
test-name:
"cond_test_22"

expected-result:
18


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons 'block26125 (Return (Prim '+ (list (Int 15) (Int 3)))))
  (cons 'start (Goto 'block26127))
  (cons 'block26126 (Return (Prim '+ (list (Int 61) (Int 8)))))
  (cons
   'block26127
   (IfStmt
    (Prim '>= (list (Int 10) (Int 10)))
    (Goto 'block26125)
    (Goto 'block26126)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types))
 (list
  (cons 'block26125 (Return (Prim '+ (list (Int 15) (Int 3)))))
  (cons 'start (Goto 'block26127))
  (cons 'block26126 (Return (Prim '+ (list (Int 61) (Int 8)))))
  (cons
   'block26127
   (IfStmt
    (Prim '>= (list (Int 10) (Int 10)))
    (Goto 'block26125)
    (Goto 'block26126)))))


output:  @ utilities.rkt:2042
result:
18


testing @ utilities.rkt:2016
test-name:
"cond_test_22"

expected-result:
18


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types))
 (list
  (cons
   'block26125
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 15) (Reg 'rax)))
     (Instr 'addq (list (Imm 3) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons 'start (Block '() (list (Jmp 'block26127))))
  (cons
   'block26126
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 61) (Reg 'rax)))
     (Instr 'addq (list (Imm 8) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26127
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (JmpIf 'ge 'block26125)
     (Jmp 'block26126))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types))
 (list
  (cons
   'block26125
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 15) (Reg 'rax)))
     (Instr 'addq (list (Imm 3) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons 'start (Block '() (list (Jmp 'block26127))))
  (cons
   'block26126
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 61) (Reg 'rax)))
     (Instr 'addq (list (Imm 8) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26127
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (JmpIf 'ge 'block26125)
     (Jmp 'block26126))))))


output:  @ utilities.rkt:2042
result:
18


testing @ utilities.rkt:2016
test-name:
"cond_test_22"

expected-result:
18


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26125
    (set (Reg 'rsp))
    'block26126
    (set (Reg 'rsp))
    'block26127
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set))))
 (list
  (cons
   'block26125
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 15) (Reg 'rax)))
     (Instr 'addq (list (Imm 3) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26127))))
  (cons
   'block26126
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 61) (Reg 'rax)))
     (Instr 'addq (list (Imm 8) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26127
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (JmpIf 'ge 'block26125)
     (Jmp 'block26126))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26125
    (set (Reg 'rsp))
    'block26126
    (set (Reg 'rsp))
    'block26127
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set))))
 (list
  (cons
   'block26125
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 15) (Reg 'rax)))
     (Instr 'addq (list (Imm 3) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26127))))
  (cons
   'block26126
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 61) (Reg 'rax)))
     (Instr 'addq (list (Imm 8) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26127
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (JmpIf 'ge 'block26125)
     (Jmp 'block26126))))))


output:  @ utilities.rkt:2042
result:
18


testing @ utilities.rkt:2016
test-name:
"cond_test_22"

expected-result:
18


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26125
    (set (Reg 'rsp))
    'block26126
    (set (Reg 'rsp))
    'block26127
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'block26125
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 15) (Reg 'rax)))
     (Instr 'addq (list (Imm 3) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26127))))
  (cons
   'block26126
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 61) (Reg 'rax)))
     (Instr 'addq (list (Imm 8) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26127
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (JmpIf 'ge 'block26125)
     (Jmp 'block26126))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26125
    (set (Reg 'rsp))
    'block26126
    (set (Reg 'rsp))
    'block26127
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'block26125
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 15) (Reg 'rax)))
     (Instr 'addq (list (Imm 3) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26127))))
  (cons
   'block26126
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 61) (Reg 'rax)))
     (Instr 'addq (list (Imm 8) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26127
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (JmpIf 'ge 'block26125)
     (Jmp 'block26126))))))


output:  @ utilities.rkt:2042
result:
18


testing @ utilities.rkt:2016
test-name:
"cond_test_22"

expected-result:
18


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26125
    (set (Reg 'rsp))
    'block26126
    (set (Reg 'rsp))
    'block26127
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'block26125
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 15) (Reg 'rax)))
     (Instr 'addq (list (Imm 3) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26127))))
  (cons
   'block26126
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 61) (Reg 'rax)))
     (Instr 'addq (list (Imm 8) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26127
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (JmpIf 'ge 'block26125)
     (Jmp 'block26126))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26125
    (set (Reg 'rsp))
    'block26126
    (set (Reg 'rsp))
    'block26127
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'block26125
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 15) (Reg 'rax)))
     (Instr 'addq (list (Imm 3) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26127))))
  (cons
   'block26126
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 61) (Reg 'rax)))
     (Instr 'addq (list (Imm 8) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26127
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (JmpIf 'ge 'block26125)
     (Jmp 'block26126))))))


output:  @ utilities.rkt:2042
result:
18


testing @ utilities.rkt:2016
test-name:
"cond_test_22"

expected-result:
18


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26125
    (set (Reg 'rsp))
    'block26126
    (set (Reg 'rsp))
    'block26127
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'block26125
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 15) (Reg 'rax)))
     (Instr 'addq (list (Imm 3) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26127))))
  (cons
   'block26126
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 61) (Reg 'rax)))
     (Instr 'addq (list (Imm 8) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26127
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (JmpIf 'ge 'block26125)
     (Jmp 'block26126))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26125
    (set (Reg 'rsp))
    'block26126
    (set (Reg 'rsp))
    'block26127
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'block26125
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 15) (Reg 'rax)))
     (Instr 'addq (list (Imm 3) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26127))))
  (cons
   'block26126
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 61) (Reg 'rax)))
     (Instr 'addq (list (Imm 8) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26127
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (JmpIf 'ge 'block26125)
     (Jmp 'block26126))))))


output:  @ utilities.rkt:2042
result:
18


testing @ utilities.rkt:2016
test-name:
"cond_test_22"

expected-result:
18


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26125
    (set (Reg 'rsp))
    'block26126
    (set (Reg 'rsp))
    'block26127
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'block26125
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 15) (Reg 'rax)))
     (Instr 'addq (list (Imm 3) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26127))))
  (cons
   'block26126
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 61) (Reg 'rax)))
     (Instr 'addq (list (Imm 8) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26127
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (JmpIf 'ge 'block26125)
     (Jmp 'block26126))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26125
    (set (Reg 'rsp))
    'block26126
    (set (Reg 'rsp))
    'block26127
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'block26125
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 15) (Reg 'rax)))
     (Instr 'addq (list (Imm 3) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26127))))
  (cons
   'block26126
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 61) (Reg 'rax)))
     (Instr 'addq (list (Imm 8) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block26127
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rax)))
     (JmpIf 'ge 'block26125)
     (Jmp 'block26126))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
18


testing @ utilities.rkt:2016
test-name:
"cond_test_22"

expected-result:
18


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (If
  (Let
   'x
   (If (Prim '<= (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '< (list (Var 'x) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


testing @ utilities.rkt:2016
test-name:
"cond_test_23"

expected-result:
34


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (Let
   'x
   (If (Prim '<= (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '< (list (Var 'x) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (Let
   'x
   (If (Prim '<= (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '< (list (Var 'x) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_23"

expected-result:
34


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (Let
   'x26134
   (If (Prim '<= (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '< (list (Var 'x26134) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (Let
   'x26134
   (If (Prim '<= (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '< (list (Var 'x26134) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_23"

expected-result:
34


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (Let
   'x26134
   (If (Prim '<= (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '< (list (Var 'x26134) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (Let
   'x26134
   (If (Prim '<= (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '< (list (Var 'x26134) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_23"

expected-result:
34


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (Let
   'x26134
   (If
    (Let 'g26135 (Prim 'read '()) (Prim '<= (list (Var 'g26135) (Int 10))))
    (Int 32)
    (Int 12))
   (Let
    'g26136
    (Prim '+ (list (Int 5) (Int 6)))
    (Prim '< (list (Var 'x26134) (Var 'g26136)))))
  (Int 134)
  (Int 34)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (Let
   'x26134
   (If
    (Let 'g26135 (Prim 'read '()) (Prim '<= (list (Var 'g26135) (Int 10))))
    (Int 32)
    (Int 12))
   (Let
    'g26136
    (Prim '+ (list (Int 5) (Int 6)))
    (Prim '< (list (Var 'x26134) (Var 'g26136)))))
  (Int 134)
  (Int 34)))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_23"

expected-result:
34


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'g26135) (Prim 'read '()))
    (IfStmt
     (Prim '<= (list (Var 'g26135) (Int 10)))
     (Goto 'block26139)
     (Goto 'block26140))))
  (cons 'block26137 (Return (Int 134)))
  (cons 'block26138 (Return (Int 34)))
  (cons
   'block26139
   (Seq
    (Assign (Var 'x26134) (Int 32))
    (Seq
     (Assign (Var 'g26136) (Prim '+ (list (Int 5) (Int 6))))
     (IfStmt
      (Prim '< (list (Var 'x26134) (Var 'g26136)))
      (Goto 'block26137)
      (Goto 'block26138)))))
  (cons
   'block26140
   (Seq
    (Assign (Var 'x26134) (Int 12))
    (Seq
     (Assign (Var 'g26136) (Prim '+ (list (Int 5) (Int 6))))
     (IfStmt
      (Prim '< (list (Var 'x26134) (Var 'g26136)))
      (Goto 'block26137)
      (Goto 'block26138)))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types (x26134 . Integer) (g26135 . Integer) (g26136 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'g26135) (Prim 'read '()))
    (IfStmt
     (Prim '<= (list (Var 'g26135) (Int 10)))
     (Goto 'block26139)
     (Goto 'block26140))))
  (cons 'block26137 (Return (Int 134)))
  (cons 'block26138 (Return (Int 34)))
  (cons
   'block26139
   (Seq
    (Assign (Var 'x26134) (Int 32))
    (Seq
     (Assign (Var 'g26136) (Prim '+ (list (Int 5) (Int 6))))
     (IfStmt
      (Prim '< (list (Var 'x26134) (Var 'g26136)))
      (Goto 'block26137)
      (Goto 'block26138)))))
  (cons
   'block26140
   (Seq
    (Assign (Var 'x26134) (Int 12))
    (Seq
     (Assign (Var 'g26136) (Prim '+ (list (Int 5) (Int 6))))
     (IfStmt
      (Prim '< (list (Var 'x26134) (Var 'g26136)))
      (Goto 'block26137)
      (Goto 'block26138)))))))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_23"

expected-result:
34


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types (x26134 . Integer) (g26135 . Integer) (g26136 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26135)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26135)))
     (JmpIf 'le 'block26139)
     (Jmp 'block26140))))
  (cons
   'block26137
   (Block
    '()
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26138
   (Block
    '()
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26139
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26134)))
     (Instr 'movq (list (Imm 5) (Var 'g26136)))
     (Instr 'addq (list (Imm 6) (Var 'g26136)))
     (Instr 'cmpq (list (Var 'g26136) (Var 'x26134)))
     (JmpIf 'l 'block26137)
     (Jmp 'block26138))))
  (cons
   'block26140
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26134)))
     (Instr 'movq (list (Imm 5) (Var 'g26136)))
     (Instr 'addq (list (Imm 6) (Var 'g26136)))
     (Instr 'cmpq (list (Var 'g26136) (Var 'x26134)))
     (JmpIf 'l 'block26137)
     (Jmp 'block26138))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types (x26134 . Integer) (g26135 . Integer) (g26136 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26135)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26135)))
     (JmpIf 'le 'block26139)
     (Jmp 'block26140))))
  (cons
   'block26137
   (Block
    '()
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26138
   (Block
    '()
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26139
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26134)))
     (Instr 'movq (list (Imm 5) (Var 'g26136)))
     (Instr 'addq (list (Imm 6) (Var 'g26136)))
     (Instr 'cmpq (list (Var 'g26136) (Var 'x26134)))
     (JmpIf 'l 'block26137)
     (Jmp 'block26138))))
  (cons
   'block26140
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26134)))
     (Instr 'movq (list (Imm 5) (Var 'g26136)))
     (Instr 'addq (list (Imm 6) (Var 'g26136)))
     (Instr 'cmpq (list (Var 'g26136) (Var 'x26134)))
     (JmpIf 'l 'block26137)
     (Jmp 'block26138))))))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_23"

expected-result:
34


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26134 . Integer) (g26135 . Integer) (g26136 . Integer))
  (cons
   'label->live
   (hash
    'block26137
    (set (Reg 'rsp))
    'block26138
    (set (Reg 'rsp))
    'block26139
    (set (Reg 'rsp))
    'block26140
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26135) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26135)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26135)))
     (JmpIf 'le 'block26139)
     (Jmp 'block26140))))
  (cons
   'block26137
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26138
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26139
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26134)))
     (Instr 'movq (list (Imm 5) (Var 'g26136)))
     (Instr 'addq (list (Imm 6) (Var 'g26136)))
     (Instr 'cmpq (list (Var 'g26136) (Var 'x26134)))
     (JmpIf 'l 'block26137)
     (Jmp 'block26138))))
  (cons
   'block26140
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26134)))
     (Instr 'movq (list (Imm 5) (Var 'g26136)))
     (Instr 'addq (list (Imm 6) (Var 'g26136)))
     (Instr 'cmpq (list (Var 'g26136) (Var 'x26134)))
     (JmpIf 'l 'block26137)
     (Jmp 'block26138))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26134 . Integer) (g26135 . Integer) (g26136 . Integer))
  (cons
   'label->live
   (hash
    'block26137
    (set (Reg 'rsp))
    'block26138
    (set (Reg 'rsp))
    'block26139
    (set (Reg 'rsp))
    'block26140
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26135) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26135)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26135)))
     (JmpIf 'le 'block26139)
     (Jmp 'block26140))))
  (cons
   'block26137
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26138
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26139
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26134)))
     (Instr 'movq (list (Imm 5) (Var 'g26136)))
     (Instr 'addq (list (Imm 6) (Var 'g26136)))
     (Instr 'cmpq (list (Var 'g26136) (Var 'x26134)))
     (JmpIf 'l 'block26137)
     (Jmp 'block26138))))
  (cons
   'block26140
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26134)))
     (Instr 'movq (list (Imm 5) (Var 'g26136)))
     (Instr 'addq (list (Imm 6) (Var 'g26136)))
     (Instr 'cmpq (list (Var 'g26136) (Var 'x26134)))
     (JmpIf 'l 'block26137)
     (Jmp 'block26138))))))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_23"

expected-result:
34


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26134 . Integer) (g26135 . Integer) (g26136 . Integer))
  (cons
   'label->live
   (hash
    'block26137
    (set (Reg 'rsp))
    'block26138
    (set (Reg 'rsp))
    'block26139
    (set (Reg 'rsp))
    'block26140
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26135) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26135)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26135)))
     (JmpIf 'le 'block26139)
     (Jmp 'block26140))))
  (cons
   'block26137
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26138
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26139
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26134)))
     (Instr 'movq (list (Imm 5) (Var 'g26136)))
     (Instr 'addq (list (Imm 6) (Var 'g26136)))
     (Instr 'cmpq (list (Var 'g26136) (Var 'x26134)))
     (JmpIf 'l 'block26137)
     (Jmp 'block26138))))
  (cons
   'block26140
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26134)))
     (Instr 'movq (list (Imm 5) (Var 'g26136)))
     (Instr 'addq (list (Imm 6) (Var 'g26136)))
     (Instr 'cmpq (list (Var 'g26136) (Var 'x26134)))
     (JmpIf 'l 'block26137)
     (Jmp 'block26138))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26134 . Integer) (g26135 . Integer) (g26136 . Integer))
  (cons
   'label->live
   (hash
    'block26137
    (set (Reg 'rsp))
    'block26138
    (set (Reg 'rsp))
    'block26139
    (set (Reg 'rsp))
    'block26140
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26135) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26135)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26135)))
     (JmpIf 'le 'block26139)
     (Jmp 'block26140))))
  (cons
   'block26137
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26138
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26139
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26134)))
     (Instr 'movq (list (Imm 5) (Var 'g26136)))
     (Instr 'addq (list (Imm 6) (Var 'g26136)))
     (Instr 'cmpq (list (Var 'g26136) (Var 'x26134)))
     (JmpIf 'l 'block26137)
     (Jmp 'block26138))))
  (cons
   'block26140
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26134)))
     (Instr 'movq (list (Imm 5) (Var 'g26136)))
     (Instr 'addq (list (Imm 6) (Var 'g26136)))
     (Instr 'cmpq (list (Var 'g26136) (Var 'x26134)))
     (JmpIf 'l 'block26137)
     (Jmp 'block26138))))))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_23"

expected-result:
34


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26134 . Integer) (g26135 . Integer) (g26136 . Integer))
  (cons
   'label->live
   (hash
    'block26137
    (set (Reg 'rsp))
    'block26138
    (set (Reg 'rsp))
    'block26139
    (set (Reg 'rsp))
    'block26140
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26135) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'le 'block26139)
     (Jmp 'block26140))))
  (cons
   'block26137
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26138
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26139
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26137)
     (Jmp 'block26138))))
  (cons
   'block26140
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26137)
     (Jmp 'block26138))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26134 . Integer) (g26135 . Integer) (g26136 . Integer))
  (cons
   'label->live
   (hash
    'block26137
    (set (Reg 'rsp))
    'block26138
    (set (Reg 'rsp))
    'block26139
    (set (Reg 'rsp))
    'block26140
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26135) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'le 'block26139)
     (Jmp 'block26140))))
  (cons
   'block26137
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26138
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26139
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26137)
     (Jmp 'block26138))))
  (cons
   'block26140
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26137)
     (Jmp 'block26138))))))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_23"

expected-result:
34


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26134 . Integer) (g26135 . Integer) (g26136 . Integer))
  (cons
   'label->live
   (hash
    'block26137
    (set (Reg 'rsp))
    'block26138
    (set (Reg 'rsp))
    'block26139
    (set (Reg 'rsp))
    'block26140
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26135) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'le 'block26139)
     (Jmp 'block26140))))
  (cons
   'block26137
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26138
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26139
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26137)
     (Jmp 'block26138))))
  (cons
   'block26140
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26137)
     (Jmp 'block26138))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26134 . Integer) (g26135 . Integer) (g26136 . Integer))
  (cons
   'label->live
   (hash
    'block26137
    (set (Reg 'rsp))
    'block26138
    (set (Reg 'rsp))
    'block26139
    (set (Reg 'rsp))
    'block26140
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26135) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'le 'block26139)
     (Jmp 'block26140))))
  (cons
   'block26137
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26138
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26139
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26137)
     (Jmp 'block26138))))
  (cons
   'block26140
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26137)
     (Jmp 'block26138))))))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_23"

expected-result:
34


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26134 . Integer) (g26135 . Integer) (g26136 . Integer))
  (cons
   'label->live
   (hash
    'block26137
    (set (Reg 'rsp))
    'block26138
    (set (Reg 'rsp))
    'block26139
    (set (Reg 'rsp))
    'block26140
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26135) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'le 'block26139)
     (Jmp 'block26140))))
  (cons
   'block26137
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26138
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26139
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26137)
     (Jmp 'block26138))))
  (cons
   'block26140
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26137)
     (Jmp 'block26138))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26134 . Integer) (g26135 . Integer) (g26136 . Integer))
  (cons
   'label->live
   (hash
    'block26137
    (set (Reg 'rsp))
    'block26138
    (set (Reg 'rsp))
    'block26139
    (set (Reg 'rsp))
    'block26140
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26135) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'le 'block26139)
     (Jmp 'block26140))))
  (cons
   'block26137
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26138
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26139
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26137)
     (Jmp 'block26138))))
  (cons
   'block26140
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Var 'x26134) (Reg 'rsp) (Var 'g26136))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26137)
     (Jmp 'block26138))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_23"

expected-result:
34


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (If
  (Let
   'x
   (If (Prim '< (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '< (list (Var 'x) (Prim '+ (list (Int 5) (Int 60))))))
  (Int 134)
  (Int 34)))


testing @ utilities.rkt:2016
test-name:
"cond_test_24"

expected-result:
134


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (Let
   'x
   (If (Prim '< (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '< (list (Var 'x) (Prim '+ (list (Int 5) (Int 60))))))
  (Int 134)
  (Int 34)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (Let
   'x
   (If (Prim '< (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '< (list (Var 'x) (Prim '+ (list (Int 5) (Int 60))))))
  (Int 134)
  (Int 34)))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_24"

expected-result:
134


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (Let
   'x26147
   (If (Prim '< (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '< (list (Var 'x26147) (Prim '+ (list (Int 5) (Int 60))))))
  (Int 134)
  (Int 34)))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (Let
   'x26147
   (If (Prim '< (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '< (list (Var 'x26147) (Prim '+ (list (Int 5) (Int 60))))))
  (Int 134)
  (Int 34)))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_24"

expected-result:
134


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (Let
   'x26147
   (If (Prim '< (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '< (list (Var 'x26147) (Prim '+ (list (Int 5) (Int 60))))))
  (Int 134)
  (Int 34)))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (Let
   'x26147
   (If (Prim '< (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '< (list (Var 'x26147) (Prim '+ (list (Int 5) (Int 60))))))
  (Int 134)
  (Int 34)))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_24"

expected-result:
134


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (Let
   'x26147
   (If
    (Let 'g26148 (Prim 'read '()) (Prim '< (list (Var 'g26148) (Int 10))))
    (Int 32)
    (Int 12))
   (Let
    'g26149
    (Prim '+ (list (Int 5) (Int 60)))
    (Prim '< (list (Var 'x26147) (Var 'g26149)))))
  (Int 134)
  (Int 34)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (Let
   'x26147
   (If
    (Let 'g26148 (Prim 'read '()) (Prim '< (list (Var 'g26148) (Int 10))))
    (Int 32)
    (Int 12))
   (Let
    'g26149
    (Prim '+ (list (Int 5) (Int 60)))
    (Prim '< (list (Var 'x26147) (Var 'g26149)))))
  (Int 134)
  (Int 34)))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_24"

expected-result:
134


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'g26148) (Prim 'read '()))
    (IfStmt
     (Prim '< (list (Var 'g26148) (Int 10)))
     (Goto 'block26152)
     (Goto 'block26153))))
  (cons 'block26150 (Return (Int 134)))
  (cons 'block26151 (Return (Int 34)))
  (cons
   'block26152
   (Seq
    (Assign (Var 'x26147) (Int 32))
    (Seq
     (Assign (Var 'g26149) (Prim '+ (list (Int 5) (Int 60))))
     (IfStmt
      (Prim '< (list (Var 'x26147) (Var 'g26149)))
      (Goto 'block26150)
      (Goto 'block26151)))))
  (cons
   'block26153
   (Seq
    (Assign (Var 'x26147) (Int 12))
    (Seq
     (Assign (Var 'g26149) (Prim '+ (list (Int 5) (Int 60))))
     (IfStmt
      (Prim '< (list (Var 'x26147) (Var 'g26149)))
      (Goto 'block26150)
      (Goto 'block26151)))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types (g26149 . Integer) (x26147 . Integer) (g26148 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'g26148) (Prim 'read '()))
    (IfStmt
     (Prim '< (list (Var 'g26148) (Int 10)))
     (Goto 'block26152)
     (Goto 'block26153))))
  (cons 'block26150 (Return (Int 134)))
  (cons 'block26151 (Return (Int 34)))
  (cons
   'block26152
   (Seq
    (Assign (Var 'x26147) (Int 32))
    (Seq
     (Assign (Var 'g26149) (Prim '+ (list (Int 5) (Int 60))))
     (IfStmt
      (Prim '< (list (Var 'x26147) (Var 'g26149)))
      (Goto 'block26150)
      (Goto 'block26151)))))
  (cons
   'block26153
   (Seq
    (Assign (Var 'x26147) (Int 12))
    (Seq
     (Assign (Var 'g26149) (Prim '+ (list (Int 5) (Int 60))))
     (IfStmt
      (Prim '< (list (Var 'x26147) (Var 'g26149)))
      (Goto 'block26150)
      (Goto 'block26151)))))))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_24"

expected-result:
134


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types (g26149 . Integer) (x26147 . Integer) (g26148 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26148)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26148)))
     (JmpIf 'l 'block26152)
     (Jmp 'block26153))))
  (cons
   'block26150
   (Block
    '()
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26151
   (Block
    '()
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26152
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26147)))
     (Instr 'movq (list (Imm 5) (Var 'g26149)))
     (Instr 'addq (list (Imm 60) (Var 'g26149)))
     (Instr 'cmpq (list (Var 'g26149) (Var 'x26147)))
     (JmpIf 'l 'block26150)
     (Jmp 'block26151))))
  (cons
   'block26153
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26147)))
     (Instr 'movq (list (Imm 5) (Var 'g26149)))
     (Instr 'addq (list (Imm 60) (Var 'g26149)))
     (Instr 'cmpq (list (Var 'g26149) (Var 'x26147)))
     (JmpIf 'l 'block26150)
     (Jmp 'block26151))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types (g26149 . Integer) (x26147 . Integer) (g26148 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26148)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26148)))
     (JmpIf 'l 'block26152)
     (Jmp 'block26153))))
  (cons
   'block26150
   (Block
    '()
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26151
   (Block
    '()
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26152
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26147)))
     (Instr 'movq (list (Imm 5) (Var 'g26149)))
     (Instr 'addq (list (Imm 60) (Var 'g26149)))
     (Instr 'cmpq (list (Var 'g26149) (Var 'x26147)))
     (JmpIf 'l 'block26150)
     (Jmp 'block26151))))
  (cons
   'block26153
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26147)))
     (Instr 'movq (list (Imm 5) (Var 'g26149)))
     (Instr 'addq (list (Imm 60) (Var 'g26149)))
     (Instr 'cmpq (list (Var 'g26149) (Var 'x26147)))
     (JmpIf 'l 'block26150)
     (Jmp 'block26151))))))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_24"

expected-result:
134


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g26149 . Integer) (x26147 . Integer) (g26148 . Integer))
  (cons
   'label->live
   (hash
    'block26150
    (set (Reg 'rsp))
    'block26151
    (set (Reg 'rsp))
    'block26152
    (set (Reg 'rsp))
    'block26153
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26148) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26148)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26148)))
     (JmpIf 'l 'block26152)
     (Jmp 'block26153))))
  (cons
   'block26150
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26151
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26152
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26147) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26147)))
     (Instr 'movq (list (Imm 5) (Var 'g26149)))
     (Instr 'addq (list (Imm 60) (Var 'g26149)))
     (Instr 'cmpq (list (Var 'g26149) (Var 'x26147)))
     (JmpIf 'l 'block26150)
     (Jmp 'block26151))))
  (cons
   'block26153
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26147) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26147)))
     (Instr 'movq (list (Imm 5) (Var 'g26149)))
     (Instr 'addq (list (Imm 60) (Var 'g26149)))
     (Instr 'cmpq (list (Var 'g26149) (Var 'x26147)))
     (JmpIf 'l 'block26150)
     (Jmp 'block26151))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g26149 . Integer) (x26147 . Integer) (g26148 . Integer))
  (cons
   'label->live
   (hash
    'block26150
    (set (Reg 'rsp))
    'block26151
    (set (Reg 'rsp))
    'block26152
    (set (Reg 'rsp))
    'block26153
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26148) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26148)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26148)))
     (JmpIf 'l 'block26152)
     (Jmp 'block26153))))
  (cons
   'block26150
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26151
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26152
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26147) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26147)))
     (Instr 'movq (list (Imm 5) (Var 'g26149)))
     (Instr 'addq (list (Imm 60) (Var 'g26149)))
     (Instr 'cmpq (list (Var 'g26149) (Var 'x26147)))
     (JmpIf 'l 'block26150)
     (Jmp 'block26151))))
  (cons
   'block26153
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26147) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26147)))
     (Instr 'movq (list (Imm 5) (Var 'g26149)))
     (Instr 'addq (list (Imm 60) (Var 'g26149)))
     (Instr 'cmpq (list (Var 'g26149) (Var 'x26147)))
     (JmpIf 'l 'block26150)
     (Jmp 'block26151))))))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_24"

expected-result:
134


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g26149 . Integer) (x26147 . Integer) (g26148 . Integer))
  (cons
   'label->live
   (hash
    'block26150
    (set (Reg 'rsp))
    'block26151
    (set (Reg 'rsp))
    'block26152
    (set (Reg 'rsp))
    'block26153
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26148) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26148)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26148)))
     (JmpIf 'l 'block26152)
     (Jmp 'block26153))))
  (cons
   'block26150
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26151
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26152
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26147) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26147)))
     (Instr 'movq (list (Imm 5) (Var 'g26149)))
     (Instr 'addq (list (Imm 60) (Var 'g26149)))
     (Instr 'cmpq (list (Var 'g26149) (Var 'x26147)))
     (JmpIf 'l 'block26150)
     (Jmp 'block26151))))
  (cons
   'block26153
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26147) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26147)))
     (Instr 'movq (list (Imm 5) (Var 'g26149)))
     (Instr 'addq (list (Imm 60) (Var 'g26149)))
     (Instr 'cmpq (list (Var 'g26149) (Var 'x26147)))
     (JmpIf 'l 'block26150)
     (Jmp 'block26151))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g26149 . Integer) (x26147 . Integer) (g26148 . Integer))
  (cons
   'label->live
   (hash
    'block26150
    (set (Reg 'rsp))
    'block26151
    (set (Reg 'rsp))
    'block26152
    (set (Reg 'rsp))
    'block26153
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26148) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26148)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26148)))
     (JmpIf 'l 'block26152)
     (Jmp 'block26153))))
  (cons
   'block26150
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26151
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26152
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26147) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26147)))
     (Instr 'movq (list (Imm 5) (Var 'g26149)))
     (Instr 'addq (list (Imm 60) (Var 'g26149)))
     (Instr 'cmpq (list (Var 'g26149) (Var 'x26147)))
     (JmpIf 'l 'block26150)
     (Jmp 'block26151))))
  (cons
   'block26153
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26147) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26147)))
     (Instr 'movq (list (Imm 5) (Var 'g26149)))
     (Instr 'addq (list (Imm 60) (Var 'g26149)))
     (Instr 'cmpq (list (Var 'g26149) (Var 'x26147)))
     (JmpIf 'l 'block26150)
     (Jmp 'block26151))))))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_24"

expected-result:
134


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g26149 . Integer) (x26147 . Integer) (g26148 . Integer))
  (cons
   'label->live
   (hash
    'block26150
    (set (Reg 'rsp))
    'block26151
    (set (Reg 'rsp))
    'block26152
    (set (Reg 'rsp))
    'block26153
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26148) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'l 'block26152)
     (Jmp 'block26153))))
  (cons
   'block26150
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26151
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26152
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26147) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 60) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26150)
     (Jmp 'block26151))))
  (cons
   'block26153
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26147) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 60) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26150)
     (Jmp 'block26151))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g26149 . Integer) (x26147 . Integer) (g26148 . Integer))
  (cons
   'label->live
   (hash
    'block26150
    (set (Reg 'rsp))
    'block26151
    (set (Reg 'rsp))
    'block26152
    (set (Reg 'rsp))
    'block26153
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26148) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'l 'block26152)
     (Jmp 'block26153))))
  (cons
   'block26150
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26151
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26152
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26147) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 60) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26150)
     (Jmp 'block26151))))
  (cons
   'block26153
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26147) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 60) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26150)
     (Jmp 'block26151))))))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_24"

expected-result:
134


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g26149 . Integer) (x26147 . Integer) (g26148 . Integer))
  (cons
   'label->live
   (hash
    'block26150
    (set (Reg 'rsp))
    'block26151
    (set (Reg 'rsp))
    'block26152
    (set (Reg 'rsp))
    'block26153
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26148) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'l 'block26152)
     (Jmp 'block26153))))
  (cons
   'block26150
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26151
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26152
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26147) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 60) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26150)
     (Jmp 'block26151))))
  (cons
   'block26153
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26147) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 60) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26150)
     (Jmp 'block26151))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g26149 . Integer) (x26147 . Integer) (g26148 . Integer))
  (cons
   'label->live
   (hash
    'block26150
    (set (Reg 'rsp))
    'block26151
    (set (Reg 'rsp))
    'block26152
    (set (Reg 'rsp))
    'block26153
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26148) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'l 'block26152)
     (Jmp 'block26153))))
  (cons
   'block26150
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26151
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26152
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26147) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 60) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26150)
     (Jmp 'block26151))))
  (cons
   'block26153
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26147) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 60) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26150)
     (Jmp 'block26151))))))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_24"

expected-result:
134


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g26149 . Integer) (x26147 . Integer) (g26148 . Integer))
  (cons
   'label->live
   (hash
    'block26150
    (set (Reg 'rsp))
    'block26151
    (set (Reg 'rsp))
    'block26152
    (set (Reg 'rsp))
    'block26153
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26148) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'l 'block26152)
     (Jmp 'block26153))))
  (cons
   'block26150
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26151
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26152
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26147) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 60) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26150)
     (Jmp 'block26151))))
  (cons
   'block26153
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26147) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 60) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26150)
     (Jmp 'block26151))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g26149 . Integer) (x26147 . Integer) (g26148 . Integer))
  (cons
   'label->live
   (hash
    'block26150
    (set (Reg 'rsp))
    'block26151
    (set (Reg 'rsp))
    'block26152
    (set (Reg 'rsp))
    'block26153
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26148) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'l 'block26152)
     (Jmp 'block26153))))
  (cons
   'block26150
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26151
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26152
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26147) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 60) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26150)
     (Jmp 'block26151))))
  (cons
   'block26153
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26147) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Var 'x26147) (Var 'g26149) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 60) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26150)
     (Jmp 'block26151))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_24"

expected-result:
134


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (If
  (Let
   'x
   (If (Prim '< (list (Prim 'read '()) (Prim 'read '()))) (Int 5) (Int 7))
   (Prim '< (list (Var 'x) (Prim '+ (list (Int 13) (Int 6))))))
  (Int 10)
  (Int 123)))


testing @ utilities.rkt:2016
test-name:
"cond_test_25"

expected-result:
10


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (Let
   'x
   (If (Prim '< (list (Prim 'read '()) (Prim 'read '()))) (Int 5) (Int 7))
   (Prim '< (list (Var 'x) (Prim '+ (list (Int 13) (Int 6))))))
  (Int 10)
  (Int 123)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (Let
   'x
   (If (Prim '< (list (Prim 'read '()) (Prim 'read '()))) (Int 5) (Int 7))
   (Prim '< (list (Var 'x) (Prim '+ (list (Int 13) (Int 6))))))
  (Int 10)
  (Int 123)))


output:  @ utilities.rkt:2042
result:
10


testing @ utilities.rkt:2016
test-name:
"cond_test_25"

expected-result:
10


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (Let
   'x26160
   (If (Prim '< (list (Prim 'read '()) (Prim 'read '()))) (Int 5) (Int 7))
   (Prim '< (list (Var 'x26160) (Prim '+ (list (Int 13) (Int 6))))))
  (Int 10)
  (Int 123)))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (Let
   'x26160
   (If (Prim '< (list (Prim 'read '()) (Prim 'read '()))) (Int 5) (Int 7))
   (Prim '< (list (Var 'x26160) (Prim '+ (list (Int 13) (Int 6))))))
  (Int 10)
  (Int 123)))


output:  @ utilities.rkt:2042
result:
10


testing @ utilities.rkt:2016
test-name:
"cond_test_25"

expected-result:
10


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (Let
   'x26160
   (If (Prim '< (list (Prim 'read '()) (Prim 'read '()))) (Int 5) (Int 7))
   (Prim '< (list (Var 'x26160) (Prim '+ (list (Int 13) (Int 6))))))
  (Int 10)
  (Int 123)))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (Let
   'x26160
   (If (Prim '< (list (Prim 'read '()) (Prim 'read '()))) (Int 5) (Int 7))
   (Prim '< (list (Var 'x26160) (Prim '+ (list (Int 13) (Int 6))))))
  (Int 10)
  (Int 123)))


output:  @ utilities.rkt:2042
result:
10


testing @ utilities.rkt:2016
test-name:
"cond_test_25"

expected-result:
10


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (Let
   'x26160
   (If
    (Let
     'g26161
     (Prim 'read '())
     (Let
      'g26162
      (Prim 'read '())
      (Prim '< (list (Var 'g26161) (Var 'g26162)))))
    (Int 5)
    (Int 7))
   (Let
    'g26163
    (Prim '+ (list (Int 13) (Int 6)))
    (Prim '< (list (Var 'x26160) (Var 'g26163)))))
  (Int 10)
  (Int 123)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (Let
   'x26160
   (If
    (Let
     'g26161
     (Prim 'read '())
     (Let
      'g26162
      (Prim 'read '())
      (Prim '< (list (Var 'g26161) (Var 'g26162)))))
    (Int 5)
    (Int 7))
   (Let
    'g26163
    (Prim '+ (list (Int 13) (Int 6)))
    (Prim '< (list (Var 'x26160) (Var 'g26163)))))
  (Int 10)
  (Int 123)))


output:  @ utilities.rkt:2042
result:
10


testing @ utilities.rkt:2016
test-name:
"cond_test_25"

expected-result:
10


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons 'block26165 (Return (Int 123)))
  (cons
   'start
   (Seq
    (Assign (Var 'g26161) (Prim 'read '()))
    (Seq
     (Assign (Var 'g26162) (Prim 'read '()))
     (IfStmt
      (Prim '< (list (Var 'g26161) (Var 'g26162)))
      (Goto 'block26166)
      (Goto 'block26167)))))
  (cons
   'block26166
   (Seq
    (Assign (Var 'x26160) (Int 5))
    (Seq
     (Assign (Var 'g26163) (Prim '+ (list (Int 13) (Int 6))))
     (IfStmt
      (Prim '< (list (Var 'x26160) (Var 'g26163)))
      (Goto 'block26164)
      (Goto 'block26165)))))
  (cons
   'block26167
   (Seq
    (Assign (Var 'x26160) (Int 7))
    (Seq
     (Assign (Var 'g26163) (Prim '+ (list (Int 13) (Int 6))))
     (IfStmt
      (Prim '< (list (Var 'x26160) (Var 'g26163)))
      (Goto 'block26164)
      (Goto 'block26165)))))
  (cons 'block26164 (Return (Int 10)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types
    (x26160 . Integer)
    (g26161 . Integer)
    (g26162 . Integer)
    (g26163 . Integer)))
 (list
  (cons 'block26165 (Return (Int 123)))
  (cons
   'start
   (Seq
    (Assign (Var 'g26161) (Prim 'read '()))
    (Seq
     (Assign (Var 'g26162) (Prim 'read '()))
     (IfStmt
      (Prim '< (list (Var 'g26161) (Var 'g26162)))
      (Goto 'block26166)
      (Goto 'block26167)))))
  (cons
   'block26166
   (Seq
    (Assign (Var 'x26160) (Int 5))
    (Seq
     (Assign (Var 'g26163) (Prim '+ (list (Int 13) (Int 6))))
     (IfStmt
      (Prim '< (list (Var 'x26160) (Var 'g26163)))
      (Goto 'block26164)
      (Goto 'block26165)))))
  (cons
   'block26167
   (Seq
    (Assign (Var 'x26160) (Int 7))
    (Seq
     (Assign (Var 'g26163) (Prim '+ (list (Int 13) (Int 6))))
     (IfStmt
      (Prim '< (list (Var 'x26160) (Var 'g26163)))
      (Goto 'block26164)
      (Goto 'block26165)))))
  (cons 'block26164 (Return (Int 10)))))


output:  @ utilities.rkt:2042
result:
10


testing @ utilities.rkt:2016
test-name:
"cond_test_25"

expected-result:
10


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (x26160 . Integer)
    (g26161 . Integer)
    (g26162 . Integer)
    (g26163 . Integer)))
 (list
  (cons
   'block26165
   (Block
    '()
    (list (Instr 'movq (list (Imm 123) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'start
   (Block
    '()
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26161)))
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26162)))
     (Instr 'cmpq (list (Var 'g26162) (Var 'g26161)))
     (JmpIf 'l 'block26166)
     (Jmp 'block26167))))
  (cons
   'block26166
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 5) (Var 'x26160)))
     (Instr 'movq (list (Imm 13) (Var 'g26163)))
     (Instr 'addq (list (Imm 6) (Var 'g26163)))
     (Instr 'cmpq (list (Var 'g26163) (Var 'x26160)))
     (JmpIf 'l 'block26164)
     (Jmp 'block26165))))
  (cons
   'block26167
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 7) (Var 'x26160)))
     (Instr 'movq (list (Imm 13) (Var 'g26163)))
     (Instr 'addq (list (Imm 6) (Var 'g26163)))
     (Instr 'cmpq (list (Var 'g26163) (Var 'x26160)))
     (JmpIf 'l 'block26164)
     (Jmp 'block26165))))
  (cons
   'block26164
   (Block
    '()
    (list (Instr 'movq (list (Imm 10) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (x26160 . Integer)
    (g26161 . Integer)
    (g26162 . Integer)
    (g26163 . Integer)))
 (list
  (cons
   'block26165
   (Block
    '()
    (list (Instr 'movq (list (Imm 123) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'start
   (Block
    '()
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26161)))
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26162)))
     (Instr 'cmpq (list (Var 'g26162) (Var 'g26161)))
     (JmpIf 'l 'block26166)
     (Jmp 'block26167))))
  (cons
   'block26166
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 5) (Var 'x26160)))
     (Instr 'movq (list (Imm 13) (Var 'g26163)))
     (Instr 'addq (list (Imm 6) (Var 'g26163)))
     (Instr 'cmpq (list (Var 'g26163) (Var 'x26160)))
     (JmpIf 'l 'block26164)
     (Jmp 'block26165))))
  (cons
   'block26167
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 7) (Var 'x26160)))
     (Instr 'movq (list (Imm 13) (Var 'g26163)))
     (Instr 'addq (list (Imm 6) (Var 'g26163)))
     (Instr 'cmpq (list (Var 'g26163) (Var 'x26160)))
     (JmpIf 'l 'block26164)
     (Jmp 'block26165))))
  (cons
   'block26164
   (Block
    '()
    (list (Instr 'movq (list (Imm 10) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
10


testing @ utilities.rkt:2016
test-name:
"cond_test_25"

expected-result:
10


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (x26160 . Integer)
    (g26161 . Integer)
    (g26162 . Integer)
    (g26163 . Integer))
  (cons
   'label->live
   (hash
    'block26164
    (set (Reg 'rsp))
    'block26165
    (set (Reg 'rsp))
    'block26166
    (set (Reg 'rsp))
    'block26167
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp)))))
 (list
  (cons
   'block26165
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 123) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'g26161) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g26161) (Reg 'rsp))
      (set (Var 'g26161) (Var 'g26162) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26161)))
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26162)))
     (Instr 'cmpq (list (Var 'g26162) (Var 'g26161)))
     (JmpIf 'l 'block26166)
     (Jmp 'block26167))))
  (cons
   'block26166
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26160) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 5) (Var 'x26160)))
     (Instr 'movq (list (Imm 13) (Var 'g26163)))
     (Instr 'addq (list (Imm 6) (Var 'g26163)))
     (Instr 'cmpq (list (Var 'g26163) (Var 'x26160)))
     (JmpIf 'l 'block26164)
     (Jmp 'block26165))))
  (cons
   'block26167
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26160) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 7) (Var 'x26160)))
     (Instr 'movq (list (Imm 13) (Var 'g26163)))
     (Instr 'addq (list (Imm 6) (Var 'g26163)))
     (Instr 'cmpq (list (Var 'g26163) (Var 'x26160)))
     (JmpIf 'l 'block26164)
     (Jmp 'block26165))))
  (cons
   'block26164
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 10) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (x26160 . Integer)
    (g26161 . Integer)
    (g26162 . Integer)
    (g26163 . Integer))
  (cons
   'label->live
   (hash
    'block26164
    (set (Reg 'rsp))
    'block26165
    (set (Reg 'rsp))
    'block26166
    (set (Reg 'rsp))
    'block26167
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp)))))
 (list
  (cons
   'block26165
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 123) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'g26161) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g26161) (Reg 'rsp))
      (set (Var 'g26161) (Var 'g26162) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26161)))
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26162)))
     (Instr 'cmpq (list (Var 'g26162) (Var 'g26161)))
     (JmpIf 'l 'block26166)
     (Jmp 'block26167))))
  (cons
   'block26166
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26160) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 5) (Var 'x26160)))
     (Instr 'movq (list (Imm 13) (Var 'g26163)))
     (Instr 'addq (list (Imm 6) (Var 'g26163)))
     (Instr 'cmpq (list (Var 'g26163) (Var 'x26160)))
     (JmpIf 'l 'block26164)
     (Jmp 'block26165))))
  (cons
   'block26167
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26160) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 7) (Var 'x26160)))
     (Instr 'movq (list (Imm 13) (Var 'g26163)))
     (Instr 'addq (list (Imm 6) (Var 'g26163)))
     (Instr 'cmpq (list (Var 'g26163) (Var 'x26160)))
     (JmpIf 'l 'block26164)
     (Jmp 'block26165))))
  (cons
   'block26164
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 10) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
10


testing @ utilities.rkt:2016
test-name:
"cond_test_25"

expected-result:
10


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (x26160 . Integer)
    (g26161 . Integer)
    (g26162 . Integer)
    (g26163 . Integer))
  (cons
   'label->live
   (hash
    'block26164
    (set (Reg 'rsp))
    'block26165
    (set (Reg 'rsp))
    'block26166
    (set (Reg 'rsp))
    'block26167
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'block26165
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 123) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'g26161) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g26161) (Reg 'rsp))
      (set (Var 'g26161) (Var 'g26162) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26161)))
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26162)))
     (Instr 'cmpq (list (Var 'g26162) (Var 'g26161)))
     (JmpIf 'l 'block26166)
     (Jmp 'block26167))))
  (cons
   'block26166
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26160) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 5) (Var 'x26160)))
     (Instr 'movq (list (Imm 13) (Var 'g26163)))
     (Instr 'addq (list (Imm 6) (Var 'g26163)))
     (Instr 'cmpq (list (Var 'g26163) (Var 'x26160)))
     (JmpIf 'l 'block26164)
     (Jmp 'block26165))))
  (cons
   'block26167
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26160) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 7) (Var 'x26160)))
     (Instr 'movq (list (Imm 13) (Var 'g26163)))
     (Instr 'addq (list (Imm 6) (Var 'g26163)))
     (Instr 'cmpq (list (Var 'g26163) (Var 'x26160)))
     (JmpIf 'l 'block26164)
     (Jmp 'block26165))))
  (cons
   'block26164
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 10) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (x26160 . Integer)
    (g26161 . Integer)
    (g26162 . Integer)
    (g26163 . Integer))
  (cons
   'label->live
   (hash
    'block26164
    (set (Reg 'rsp))
    'block26165
    (set (Reg 'rsp))
    'block26166
    (set (Reg 'rsp))
    'block26167
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'block26165
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 123) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'g26161) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g26161) (Reg 'rsp))
      (set (Var 'g26161) (Var 'g26162) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26161)))
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26162)))
     (Instr 'cmpq (list (Var 'g26162) (Var 'g26161)))
     (JmpIf 'l 'block26166)
     (Jmp 'block26167))))
  (cons
   'block26166
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26160) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 5) (Var 'x26160)))
     (Instr 'movq (list (Imm 13) (Var 'g26163)))
     (Instr 'addq (list (Imm 6) (Var 'g26163)))
     (Instr 'cmpq (list (Var 'g26163) (Var 'x26160)))
     (JmpIf 'l 'block26164)
     (Jmp 'block26165))))
  (cons
   'block26167
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26160) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 7) (Var 'x26160)))
     (Instr 'movq (list (Imm 13) (Var 'g26163)))
     (Instr 'addq (list (Imm 6) (Var 'g26163)))
     (Instr 'cmpq (list (Var 'g26163) (Var 'x26160)))
     (JmpIf 'l 'block26164)
     (Jmp 'block26165))))
  (cons
   'block26164
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 10) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
10


testing @ utilities.rkt:2016
test-name:
"cond_test_25"

expected-result:
10


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (x26160 . Integer)
    (g26161 . Integer)
    (g26162 . Integer)
    (g26163 . Integer))
  (cons
   'label->live
   (hash
    'block26164
    (set (Reg 'rsp))
    'block26165
    (set (Reg 'rsp))
    'block26166
    (set (Reg 'rsp))
    'block26167
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'block26165
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 123) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'g26161) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g26161) (Reg 'rsp))
      (set (Var 'g26161) (Var 'g26162) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rcx)))
     (Instr 'cmpq (list (Reg 'rcx) (Reg 'rbx)))
     (JmpIf 'l 'block26166)
     (Jmp 'block26167))))
  (cons
   'block26166
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26160) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 5) (Reg 'rcx)))
     (Instr 'movq (list (Imm 13) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26164)
     (Jmp 'block26165))))
  (cons
   'block26167
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26160) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 7) (Reg 'rcx)))
     (Instr 'movq (list (Imm 13) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26164)
     (Jmp 'block26165))))
  (cons
   'block26164
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 10) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (x26160 . Integer)
    (g26161 . Integer)
    (g26162 . Integer)
    (g26163 . Integer))
  (cons
   'label->live
   (hash
    'block26164
    (set (Reg 'rsp))
    'block26165
    (set (Reg 'rsp))
    'block26166
    (set (Reg 'rsp))
    'block26167
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'block26165
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 123) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'g26161) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g26161) (Reg 'rsp))
      (set (Var 'g26161) (Var 'g26162) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rcx)))
     (Instr 'cmpq (list (Reg 'rcx) (Reg 'rbx)))
     (JmpIf 'l 'block26166)
     (Jmp 'block26167))))
  (cons
   'block26166
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26160) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 5) (Reg 'rcx)))
     (Instr 'movq (list (Imm 13) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26164)
     (Jmp 'block26165))))
  (cons
   'block26167
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26160) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 7) (Reg 'rcx)))
     (Instr 'movq (list (Imm 13) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26164)
     (Jmp 'block26165))))
  (cons
   'block26164
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 10) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
10


testing @ utilities.rkt:2016
test-name:
"cond_test_25"

expected-result:
10


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (x26160 . Integer)
    (g26161 . Integer)
    (g26162 . Integer)
    (g26163 . Integer))
  (cons
   'label->live
   (hash
    'block26164
    (set (Reg 'rsp))
    'block26165
    (set (Reg 'rsp))
    'block26166
    (set (Reg 'rsp))
    'block26167
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'block26165
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 123) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'g26161) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g26161) (Reg 'rsp))
      (set (Var 'g26161) (Var 'g26162) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rcx)))
     (Instr 'cmpq (list (Reg 'rcx) (Reg 'rbx)))
     (JmpIf 'l 'block26166)
     (Jmp 'block26167))))
  (cons
   'block26166
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26160) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 5) (Reg 'rcx)))
     (Instr 'movq (list (Imm 13) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26164)
     (Jmp 'block26165))))
  (cons
   'block26167
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26160) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 7) (Reg 'rcx)))
     (Instr 'movq (list (Imm 13) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26164)
     (Jmp 'block26165))))
  (cons
   'block26164
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 10) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (x26160 . Integer)
    (g26161 . Integer)
    (g26162 . Integer)
    (g26163 . Integer))
  (cons
   'label->live
   (hash
    'block26164
    (set (Reg 'rsp))
    'block26165
    (set (Reg 'rsp))
    'block26166
    (set (Reg 'rsp))
    'block26167
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'block26165
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 123) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'g26161) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g26161) (Reg 'rsp))
      (set (Var 'g26161) (Var 'g26162) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rcx)))
     (Instr 'cmpq (list (Reg 'rcx) (Reg 'rbx)))
     (JmpIf 'l 'block26166)
     (Jmp 'block26167))))
  (cons
   'block26166
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26160) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 5) (Reg 'rcx)))
     (Instr 'movq (list (Imm 13) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26164)
     (Jmp 'block26165))))
  (cons
   'block26167
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26160) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 7) (Reg 'rcx)))
     (Instr 'movq (list (Imm 13) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26164)
     (Jmp 'block26165))))
  (cons
   'block26164
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 10) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
10


testing @ utilities.rkt:2016
test-name:
"cond_test_25"

expected-result:
10


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (x26160 . Integer)
    (g26161 . Integer)
    (g26162 . Integer)
    (g26163 . Integer))
  (cons
   'label->live
   (hash
    'block26164
    (set (Reg 'rsp))
    'block26165
    (set (Reg 'rsp))
    'block26166
    (set (Reg 'rsp))
    'block26167
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'block26165
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 123) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'g26161) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g26161) (Reg 'rsp))
      (set (Var 'g26161) (Var 'g26162) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rcx)))
     (Instr 'cmpq (list (Reg 'rcx) (Reg 'rbx)))
     (JmpIf 'l 'block26166)
     (Jmp 'block26167))))
  (cons
   'block26166
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26160) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 5) (Reg 'rcx)))
     (Instr 'movq (list (Imm 13) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26164)
     (Jmp 'block26165))))
  (cons
   'block26167
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26160) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 7) (Reg 'rcx)))
     (Instr 'movq (list (Imm 13) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26164)
     (Jmp 'block26165))))
  (cons
   'block26164
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 10) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (x26160 . Integer)
    (g26161 . Integer)
    (g26162 . Integer)
    (g26163 . Integer))
  (cons
   'label->live
   (hash
    'block26164
    (set (Reg 'rsp))
    'block26165
    (set (Reg 'rsp))
    'block26166
    (set (Reg 'rsp))
    'block26167
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi) (Reg 'rsp))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'block26165
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 123) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rdi) (Var 'g26161) (Reg 'rsp))
      (set (Reg 'rax) (Var 'g26161) (Reg 'rsp))
      (set (Var 'g26161) (Var 'g26162) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rcx)))
     (Instr 'cmpq (list (Reg 'rcx) (Reg 'rbx)))
     (JmpIf 'l 'block26166)
     (Jmp 'block26167))))
  (cons
   'block26166
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26160) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 5) (Reg 'rcx)))
     (Instr 'movq (list (Imm 13) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26164)
     (Jmp 'block26165))))
  (cons
   'block26167
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26160) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Var 'x26160) (Var 'g26163) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 7) (Reg 'rcx)))
     (Instr 'movq (list (Imm 13) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26164)
     (Jmp 'block26165))))
  (cons
   'block26164
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 10) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
10


testing @ utilities.rkt:2016
test-name:
"cond_test_25"

expected-result:
10


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (If
  (Let
   'x
   (If (Prim '<= (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '<= (list (Var 'x) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


testing @ utilities.rkt:2016
test-name:
"cond_test_26"

expected-result:
34


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (Let
   'x
   (If (Prim '<= (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '<= (list (Var 'x) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (Let
   'x
   (If (Prim '<= (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '<= (list (Var 'x) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_26"

expected-result:
34


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (Let
   'x26174
   (If (Prim '<= (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '<= (list (Var 'x26174) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (Let
   'x26174
   (If (Prim '<= (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '<= (list (Var 'x26174) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_26"

expected-result:
34


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (Let
   'x26174
   (If (Prim '<= (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '<= (list (Var 'x26174) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (Let
   'x26174
   (If (Prim '<= (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '<= (list (Var 'x26174) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_26"

expected-result:
34


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (Let
   'x26174
   (If
    (Let 'g26175 (Prim 'read '()) (Prim '<= (list (Var 'g26175) (Int 10))))
    (Int 32)
    (Int 12))
   (Let
    'g26176
    (Prim '+ (list (Int 5) (Int 6)))
    (Prim '<= (list (Var 'x26174) (Var 'g26176)))))
  (Int 134)
  (Int 34)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (Let
   'x26174
   (If
    (Let 'g26175 (Prim 'read '()) (Prim '<= (list (Var 'g26175) (Int 10))))
    (Int 32)
    (Int 12))
   (Let
    'g26176
    (Prim '+ (list (Int 5) (Int 6)))
    (Prim '<= (list (Var 'x26174) (Var 'g26176)))))
  (Int 134)
  (Int 34)))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_26"

expected-result:
34


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'g26175) (Prim 'read '()))
    (IfStmt
     (Prim '<= (list (Var 'g26175) (Int 10)))
     (Goto 'block26179)
     (Goto 'block26180))))
  (cons 'block26177 (Return (Int 134)))
  (cons 'block26178 (Return (Int 34)))
  (cons
   'block26179
   (Seq
    (Assign (Var 'x26174) (Int 32))
    (Seq
     (Assign (Var 'g26176) (Prim '+ (list (Int 5) (Int 6))))
     (IfStmt
      (Prim '<= (list (Var 'x26174) (Var 'g26176)))
      (Goto 'block26177)
      (Goto 'block26178)))))
  (cons
   'block26180
   (Seq
    (Assign (Var 'x26174) (Int 12))
    (Seq
     (Assign (Var 'g26176) (Prim '+ (list (Int 5) (Int 6))))
     (IfStmt
      (Prim '<= (list (Var 'x26174) (Var 'g26176)))
      (Goto 'block26177)
      (Goto 'block26178)))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types (x26174 . Integer) (g26175 . Integer) (g26176 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'g26175) (Prim 'read '()))
    (IfStmt
     (Prim '<= (list (Var 'g26175) (Int 10)))
     (Goto 'block26179)
     (Goto 'block26180))))
  (cons 'block26177 (Return (Int 134)))
  (cons 'block26178 (Return (Int 34)))
  (cons
   'block26179
   (Seq
    (Assign (Var 'x26174) (Int 32))
    (Seq
     (Assign (Var 'g26176) (Prim '+ (list (Int 5) (Int 6))))
     (IfStmt
      (Prim '<= (list (Var 'x26174) (Var 'g26176)))
      (Goto 'block26177)
      (Goto 'block26178)))))
  (cons
   'block26180
   (Seq
    (Assign (Var 'x26174) (Int 12))
    (Seq
     (Assign (Var 'g26176) (Prim '+ (list (Int 5) (Int 6))))
     (IfStmt
      (Prim '<= (list (Var 'x26174) (Var 'g26176)))
      (Goto 'block26177)
      (Goto 'block26178)))))))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_26"

expected-result:
34


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types (x26174 . Integer) (g26175 . Integer) (g26176 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26175)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26175)))
     (JmpIf 'le 'block26179)
     (Jmp 'block26180))))
  (cons
   'block26177
   (Block
    '()
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26178
   (Block
    '()
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26179
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26174)))
     (Instr 'movq (list (Imm 5) (Var 'g26176)))
     (Instr 'addq (list (Imm 6) (Var 'g26176)))
     (Instr 'cmpq (list (Var 'g26176) (Var 'x26174)))
     (JmpIf 'le 'block26177)
     (Jmp 'block26178))))
  (cons
   'block26180
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26174)))
     (Instr 'movq (list (Imm 5) (Var 'g26176)))
     (Instr 'addq (list (Imm 6) (Var 'g26176)))
     (Instr 'cmpq (list (Var 'g26176) (Var 'x26174)))
     (JmpIf 'le 'block26177)
     (Jmp 'block26178))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types (x26174 . Integer) (g26175 . Integer) (g26176 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26175)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26175)))
     (JmpIf 'le 'block26179)
     (Jmp 'block26180))))
  (cons
   'block26177
   (Block
    '()
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26178
   (Block
    '()
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26179
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26174)))
     (Instr 'movq (list (Imm 5) (Var 'g26176)))
     (Instr 'addq (list (Imm 6) (Var 'g26176)))
     (Instr 'cmpq (list (Var 'g26176) (Var 'x26174)))
     (JmpIf 'le 'block26177)
     (Jmp 'block26178))))
  (cons
   'block26180
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26174)))
     (Instr 'movq (list (Imm 5) (Var 'g26176)))
     (Instr 'addq (list (Imm 6) (Var 'g26176)))
     (Instr 'cmpq (list (Var 'g26176) (Var 'x26174)))
     (JmpIf 'le 'block26177)
     (Jmp 'block26178))))))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_26"

expected-result:
34


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26174 . Integer) (g26175 . Integer) (g26176 . Integer))
  (cons
   'label->live
   (hash
    'block26177
    (set (Reg 'rsp))
    'block26178
    (set (Reg 'rsp))
    'block26179
    (set (Reg 'rsp))
    'block26180
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26175) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26175)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26175)))
     (JmpIf 'le 'block26179)
     (Jmp 'block26180))))
  (cons
   'block26177
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26178
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26179
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26174) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26174)))
     (Instr 'movq (list (Imm 5) (Var 'g26176)))
     (Instr 'addq (list (Imm 6) (Var 'g26176)))
     (Instr 'cmpq (list (Var 'g26176) (Var 'x26174)))
     (JmpIf 'le 'block26177)
     (Jmp 'block26178))))
  (cons
   'block26180
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26174) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26174)))
     (Instr 'movq (list (Imm 5) (Var 'g26176)))
     (Instr 'addq (list (Imm 6) (Var 'g26176)))
     (Instr 'cmpq (list (Var 'g26176) (Var 'x26174)))
     (JmpIf 'le 'block26177)
     (Jmp 'block26178))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26174 . Integer) (g26175 . Integer) (g26176 . Integer))
  (cons
   'label->live
   (hash
    'block26177
    (set (Reg 'rsp))
    'block26178
    (set (Reg 'rsp))
    'block26179
    (set (Reg 'rsp))
    'block26180
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26175) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26175)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26175)))
     (JmpIf 'le 'block26179)
     (Jmp 'block26180))))
  (cons
   'block26177
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26178
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26179
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26174) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26174)))
     (Instr 'movq (list (Imm 5) (Var 'g26176)))
     (Instr 'addq (list (Imm 6) (Var 'g26176)))
     (Instr 'cmpq (list (Var 'g26176) (Var 'x26174)))
     (JmpIf 'le 'block26177)
     (Jmp 'block26178))))
  (cons
   'block26180
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26174) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26174)))
     (Instr 'movq (list (Imm 5) (Var 'g26176)))
     (Instr 'addq (list (Imm 6) (Var 'g26176)))
     (Instr 'cmpq (list (Var 'g26176) (Var 'x26174)))
     (JmpIf 'le 'block26177)
     (Jmp 'block26178))))))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_26"

expected-result:
34


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26174 . Integer) (g26175 . Integer) (g26176 . Integer))
  (cons
   'label->live
   (hash
    'block26177
    (set (Reg 'rsp))
    'block26178
    (set (Reg 'rsp))
    'block26179
    (set (Reg 'rsp))
    'block26180
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26175) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26175)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26175)))
     (JmpIf 'le 'block26179)
     (Jmp 'block26180))))
  (cons
   'block26177
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26178
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26179
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26174) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26174)))
     (Instr 'movq (list (Imm 5) (Var 'g26176)))
     (Instr 'addq (list (Imm 6) (Var 'g26176)))
     (Instr 'cmpq (list (Var 'g26176) (Var 'x26174)))
     (JmpIf 'le 'block26177)
     (Jmp 'block26178))))
  (cons
   'block26180
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26174) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26174)))
     (Instr 'movq (list (Imm 5) (Var 'g26176)))
     (Instr 'addq (list (Imm 6) (Var 'g26176)))
     (Instr 'cmpq (list (Var 'g26176) (Var 'x26174)))
     (JmpIf 'le 'block26177)
     (Jmp 'block26178))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26174 . Integer) (g26175 . Integer) (g26176 . Integer))
  (cons
   'label->live
   (hash
    'block26177
    (set (Reg 'rsp))
    'block26178
    (set (Reg 'rsp))
    'block26179
    (set (Reg 'rsp))
    'block26180
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26175) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26175)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26175)))
     (JmpIf 'le 'block26179)
     (Jmp 'block26180))))
  (cons
   'block26177
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26178
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26179
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26174) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26174)))
     (Instr 'movq (list (Imm 5) (Var 'g26176)))
     (Instr 'addq (list (Imm 6) (Var 'g26176)))
     (Instr 'cmpq (list (Var 'g26176) (Var 'x26174)))
     (JmpIf 'le 'block26177)
     (Jmp 'block26178))))
  (cons
   'block26180
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26174) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26174)))
     (Instr 'movq (list (Imm 5) (Var 'g26176)))
     (Instr 'addq (list (Imm 6) (Var 'g26176)))
     (Instr 'cmpq (list (Var 'g26176) (Var 'x26174)))
     (JmpIf 'le 'block26177)
     (Jmp 'block26178))))))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_26"

expected-result:
34


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26174 . Integer) (g26175 . Integer) (g26176 . Integer))
  (cons
   'label->live
   (hash
    'block26177
    (set (Reg 'rsp))
    'block26178
    (set (Reg 'rsp))
    'block26179
    (set (Reg 'rsp))
    'block26180
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26175) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'le 'block26179)
     (Jmp 'block26180))))
  (cons
   'block26177
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26178
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26179
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26174) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'le 'block26177)
     (Jmp 'block26178))))
  (cons
   'block26180
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26174) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'le 'block26177)
     (Jmp 'block26178))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26174 . Integer) (g26175 . Integer) (g26176 . Integer))
  (cons
   'label->live
   (hash
    'block26177
    (set (Reg 'rsp))
    'block26178
    (set (Reg 'rsp))
    'block26179
    (set (Reg 'rsp))
    'block26180
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26175) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'le 'block26179)
     (Jmp 'block26180))))
  (cons
   'block26177
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26178
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26179
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26174) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'le 'block26177)
     (Jmp 'block26178))))
  (cons
   'block26180
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26174) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'le 'block26177)
     (Jmp 'block26178))))))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_26"

expected-result:
34


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26174 . Integer) (g26175 . Integer) (g26176 . Integer))
  (cons
   'label->live
   (hash
    'block26177
    (set (Reg 'rsp))
    'block26178
    (set (Reg 'rsp))
    'block26179
    (set (Reg 'rsp))
    'block26180
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26175) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'le 'block26179)
     (Jmp 'block26180))))
  (cons
   'block26177
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26178
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26179
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26174) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'le 'block26177)
     (Jmp 'block26178))))
  (cons
   'block26180
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26174) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'le 'block26177)
     (Jmp 'block26178))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26174 . Integer) (g26175 . Integer) (g26176 . Integer))
  (cons
   'label->live
   (hash
    'block26177
    (set (Reg 'rsp))
    'block26178
    (set (Reg 'rsp))
    'block26179
    (set (Reg 'rsp))
    'block26180
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26175) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'le 'block26179)
     (Jmp 'block26180))))
  (cons
   'block26177
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26178
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26179
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26174) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'le 'block26177)
     (Jmp 'block26178))))
  (cons
   'block26180
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26174) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'le 'block26177)
     (Jmp 'block26178))))))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_26"

expected-result:
34


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26174 . Integer) (g26175 . Integer) (g26176 . Integer))
  (cons
   'label->live
   (hash
    'block26177
    (set (Reg 'rsp))
    'block26178
    (set (Reg 'rsp))
    'block26179
    (set (Reg 'rsp))
    'block26180
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26175) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'le 'block26179)
     (Jmp 'block26180))))
  (cons
   'block26177
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26178
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26179
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26174) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'le 'block26177)
     (Jmp 'block26178))))
  (cons
   'block26180
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26174) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'le 'block26177)
     (Jmp 'block26178))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26174 . Integer) (g26175 . Integer) (g26176 . Integer))
  (cons
   'label->live
   (hash
    'block26177
    (set (Reg 'rsp))
    'block26178
    (set (Reg 'rsp))
    'block26179
    (set (Reg 'rsp))
    'block26180
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26175) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'le 'block26179)
     (Jmp 'block26180))))
  (cons
   'block26177
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26178
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26179
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26174) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'le 'block26177)
     (Jmp 'block26178))))
  (cons
   'block26180
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26174) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Var 'x26174) (Var 'g26176) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'le 'block26177)
     (Jmp 'block26178))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_26"

expected-result:
34


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (If
  (Let
   'x
   (If (Prim '>= (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '>= (list (Var 'x) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


testing @ utilities.rkt:2016
test-name:
"cond_test_27"

expected-result:
134


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (Let
   'x
   (If (Prim '>= (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '>= (list (Var 'x) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (Let
   'x
   (If (Prim '>= (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '>= (list (Var 'x) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_27"

expected-result:
134


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (Let
   'x26187
   (If (Prim '>= (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '>= (list (Var 'x26187) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (Let
   'x26187
   (If (Prim '>= (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '>= (list (Var 'x26187) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_27"

expected-result:
134


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (Let
   'x26187
   (If (Prim '>= (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '>= (list (Var 'x26187) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (Let
   'x26187
   (If (Prim '>= (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '>= (list (Var 'x26187) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_27"

expected-result:
134


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (Let
   'x26187
   (If
    (Let 'g26188 (Prim 'read '()) (Prim '>= (list (Var 'g26188) (Int 10))))
    (Int 32)
    (Int 12))
   (Let
    'g26189
    (Prim '+ (list (Int 5) (Int 6)))
    (Prim '>= (list (Var 'x26187) (Var 'g26189)))))
  (Int 134)
  (Int 34)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (Let
   'x26187
   (If
    (Let 'g26188 (Prim 'read '()) (Prim '>= (list (Var 'g26188) (Int 10))))
    (Int 32)
    (Int 12))
   (Let
    'g26189
    (Prim '+ (list (Int 5) (Int 6)))
    (Prim '>= (list (Var 'x26187) (Var 'g26189)))))
  (Int 134)
  (Int 34)))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_27"

expected-result:
134


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'g26188) (Prim 'read '()))
    (IfStmt
     (Prim '>= (list (Var 'g26188) (Int 10)))
     (Goto 'block26192)
     (Goto 'block26193))))
  (cons 'block26190 (Return (Int 134)))
  (cons 'block26191 (Return (Int 34)))
  (cons
   'block26192
   (Seq
    (Assign (Var 'x26187) (Int 32))
    (Seq
     (Assign (Var 'g26189) (Prim '+ (list (Int 5) (Int 6))))
     (IfStmt
      (Prim '>= (list (Var 'x26187) (Var 'g26189)))
      (Goto 'block26190)
      (Goto 'block26191)))))
  (cons
   'block26193
   (Seq
    (Assign (Var 'x26187) (Int 12))
    (Seq
     (Assign (Var 'g26189) (Prim '+ (list (Int 5) (Int 6))))
     (IfStmt
      (Prim '>= (list (Var 'x26187) (Var 'g26189)))
      (Goto 'block26190)
      (Goto 'block26191)))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types (g26189 . Integer) (x26187 . Integer) (g26188 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'g26188) (Prim 'read '()))
    (IfStmt
     (Prim '>= (list (Var 'g26188) (Int 10)))
     (Goto 'block26192)
     (Goto 'block26193))))
  (cons 'block26190 (Return (Int 134)))
  (cons 'block26191 (Return (Int 34)))
  (cons
   'block26192
   (Seq
    (Assign (Var 'x26187) (Int 32))
    (Seq
     (Assign (Var 'g26189) (Prim '+ (list (Int 5) (Int 6))))
     (IfStmt
      (Prim '>= (list (Var 'x26187) (Var 'g26189)))
      (Goto 'block26190)
      (Goto 'block26191)))))
  (cons
   'block26193
   (Seq
    (Assign (Var 'x26187) (Int 12))
    (Seq
     (Assign (Var 'g26189) (Prim '+ (list (Int 5) (Int 6))))
     (IfStmt
      (Prim '>= (list (Var 'x26187) (Var 'g26189)))
      (Goto 'block26190)
      (Goto 'block26191)))))))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_27"

expected-result:
134


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types (g26189 . Integer) (x26187 . Integer) (g26188 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26188)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26188)))
     (JmpIf 'ge 'block26192)
     (Jmp 'block26193))))
  (cons
   'block26190
   (Block
    '()
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26191
   (Block
    '()
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26192
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26187)))
     (Instr 'movq (list (Imm 5) (Var 'g26189)))
     (Instr 'addq (list (Imm 6) (Var 'g26189)))
     (Instr 'cmpq (list (Var 'g26189) (Var 'x26187)))
     (JmpIf 'ge 'block26190)
     (Jmp 'block26191))))
  (cons
   'block26193
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26187)))
     (Instr 'movq (list (Imm 5) (Var 'g26189)))
     (Instr 'addq (list (Imm 6) (Var 'g26189)))
     (Instr 'cmpq (list (Var 'g26189) (Var 'x26187)))
     (JmpIf 'ge 'block26190)
     (Jmp 'block26191))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types (g26189 . Integer) (x26187 . Integer) (g26188 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26188)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26188)))
     (JmpIf 'ge 'block26192)
     (Jmp 'block26193))))
  (cons
   'block26190
   (Block
    '()
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26191
   (Block
    '()
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26192
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26187)))
     (Instr 'movq (list (Imm 5) (Var 'g26189)))
     (Instr 'addq (list (Imm 6) (Var 'g26189)))
     (Instr 'cmpq (list (Var 'g26189) (Var 'x26187)))
     (JmpIf 'ge 'block26190)
     (Jmp 'block26191))))
  (cons
   'block26193
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26187)))
     (Instr 'movq (list (Imm 5) (Var 'g26189)))
     (Instr 'addq (list (Imm 6) (Var 'g26189)))
     (Instr 'cmpq (list (Var 'g26189) (Var 'x26187)))
     (JmpIf 'ge 'block26190)
     (Jmp 'block26191))))))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_27"

expected-result:
134


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g26189 . Integer) (x26187 . Integer) (g26188 . Integer))
  (cons
   'label->live
   (hash
    'block26190
    (set (Reg 'rsp))
    'block26191
    (set (Reg 'rsp))
    'block26192
    (set (Reg 'rsp))
    'block26193
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26188) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26188)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26188)))
     (JmpIf 'ge 'block26192)
     (Jmp 'block26193))))
  (cons
   'block26190
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26191
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26192
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26187) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26187)))
     (Instr 'movq (list (Imm 5) (Var 'g26189)))
     (Instr 'addq (list (Imm 6) (Var 'g26189)))
     (Instr 'cmpq (list (Var 'g26189) (Var 'x26187)))
     (JmpIf 'ge 'block26190)
     (Jmp 'block26191))))
  (cons
   'block26193
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26187) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26187)))
     (Instr 'movq (list (Imm 5) (Var 'g26189)))
     (Instr 'addq (list (Imm 6) (Var 'g26189)))
     (Instr 'cmpq (list (Var 'g26189) (Var 'x26187)))
     (JmpIf 'ge 'block26190)
     (Jmp 'block26191))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g26189 . Integer) (x26187 . Integer) (g26188 . Integer))
  (cons
   'label->live
   (hash
    'block26190
    (set (Reg 'rsp))
    'block26191
    (set (Reg 'rsp))
    'block26192
    (set (Reg 'rsp))
    'block26193
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26188) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26188)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26188)))
     (JmpIf 'ge 'block26192)
     (Jmp 'block26193))))
  (cons
   'block26190
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26191
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26192
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26187) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26187)))
     (Instr 'movq (list (Imm 5) (Var 'g26189)))
     (Instr 'addq (list (Imm 6) (Var 'g26189)))
     (Instr 'cmpq (list (Var 'g26189) (Var 'x26187)))
     (JmpIf 'ge 'block26190)
     (Jmp 'block26191))))
  (cons
   'block26193
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26187) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26187)))
     (Instr 'movq (list (Imm 5) (Var 'g26189)))
     (Instr 'addq (list (Imm 6) (Var 'g26189)))
     (Instr 'cmpq (list (Var 'g26189) (Var 'x26187)))
     (JmpIf 'ge 'block26190)
     (Jmp 'block26191))))))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_27"

expected-result:
134


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g26189 . Integer) (x26187 . Integer) (g26188 . Integer))
  (cons
   'label->live
   (hash
    'block26190
    (set (Reg 'rsp))
    'block26191
    (set (Reg 'rsp))
    'block26192
    (set (Reg 'rsp))
    'block26193
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26188) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26188)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26188)))
     (JmpIf 'ge 'block26192)
     (Jmp 'block26193))))
  (cons
   'block26190
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26191
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26192
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26187) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26187)))
     (Instr 'movq (list (Imm 5) (Var 'g26189)))
     (Instr 'addq (list (Imm 6) (Var 'g26189)))
     (Instr 'cmpq (list (Var 'g26189) (Var 'x26187)))
     (JmpIf 'ge 'block26190)
     (Jmp 'block26191))))
  (cons
   'block26193
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26187) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26187)))
     (Instr 'movq (list (Imm 5) (Var 'g26189)))
     (Instr 'addq (list (Imm 6) (Var 'g26189)))
     (Instr 'cmpq (list (Var 'g26189) (Var 'x26187)))
     (JmpIf 'ge 'block26190)
     (Jmp 'block26191))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g26189 . Integer) (x26187 . Integer) (g26188 . Integer))
  (cons
   'label->live
   (hash
    'block26190
    (set (Reg 'rsp))
    'block26191
    (set (Reg 'rsp))
    'block26192
    (set (Reg 'rsp))
    'block26193
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26188) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26188)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26188)))
     (JmpIf 'ge 'block26192)
     (Jmp 'block26193))))
  (cons
   'block26190
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26191
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26192
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26187) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26187)))
     (Instr 'movq (list (Imm 5) (Var 'g26189)))
     (Instr 'addq (list (Imm 6) (Var 'g26189)))
     (Instr 'cmpq (list (Var 'g26189) (Var 'x26187)))
     (JmpIf 'ge 'block26190)
     (Jmp 'block26191))))
  (cons
   'block26193
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26187) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26187)))
     (Instr 'movq (list (Imm 5) (Var 'g26189)))
     (Instr 'addq (list (Imm 6) (Var 'g26189)))
     (Instr 'cmpq (list (Var 'g26189) (Var 'x26187)))
     (JmpIf 'ge 'block26190)
     (Jmp 'block26191))))))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_27"

expected-result:
134


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g26189 . Integer) (x26187 . Integer) (g26188 . Integer))
  (cons
   'label->live
   (hash
    'block26190
    (set (Reg 'rsp))
    'block26191
    (set (Reg 'rsp))
    'block26192
    (set (Reg 'rsp))
    'block26193
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26188) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'ge 'block26192)
     (Jmp 'block26193))))
  (cons
   'block26190
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26191
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26192
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26187) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'ge 'block26190)
     (Jmp 'block26191))))
  (cons
   'block26193
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26187) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'ge 'block26190)
     (Jmp 'block26191))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g26189 . Integer) (x26187 . Integer) (g26188 . Integer))
  (cons
   'label->live
   (hash
    'block26190
    (set (Reg 'rsp))
    'block26191
    (set (Reg 'rsp))
    'block26192
    (set (Reg 'rsp))
    'block26193
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26188) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'ge 'block26192)
     (Jmp 'block26193))))
  (cons
   'block26190
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26191
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26192
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26187) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'ge 'block26190)
     (Jmp 'block26191))))
  (cons
   'block26193
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26187) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'ge 'block26190)
     (Jmp 'block26191))))))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_27"

expected-result:
134


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g26189 . Integer) (x26187 . Integer) (g26188 . Integer))
  (cons
   'label->live
   (hash
    'block26190
    (set (Reg 'rsp))
    'block26191
    (set (Reg 'rsp))
    'block26192
    (set (Reg 'rsp))
    'block26193
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26188) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'ge 'block26192)
     (Jmp 'block26193))))
  (cons
   'block26190
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26191
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26192
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26187) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'ge 'block26190)
     (Jmp 'block26191))))
  (cons
   'block26193
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26187) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'ge 'block26190)
     (Jmp 'block26191))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g26189 . Integer) (x26187 . Integer) (g26188 . Integer))
  (cons
   'label->live
   (hash
    'block26190
    (set (Reg 'rsp))
    'block26191
    (set (Reg 'rsp))
    'block26192
    (set (Reg 'rsp))
    'block26193
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26188) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'ge 'block26192)
     (Jmp 'block26193))))
  (cons
   'block26190
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26191
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26192
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26187) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'ge 'block26190)
     (Jmp 'block26191))))
  (cons
   'block26193
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26187) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'ge 'block26190)
     (Jmp 'block26191))))))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_27"

expected-result:
134


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (g26189 . Integer) (x26187 . Integer) (g26188 . Integer))
  (cons
   'label->live
   (hash
    'block26190
    (set (Reg 'rsp))
    'block26191
    (set (Reg 'rsp))
    'block26192
    (set (Reg 'rsp))
    'block26193
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26188) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'ge 'block26192)
     (Jmp 'block26193))))
  (cons
   'block26190
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26191
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26192
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26187) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'ge 'block26190)
     (Jmp 'block26191))))
  (cons
   'block26193
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26187) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'ge 'block26190)
     (Jmp 'block26191))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (g26189 . Integer) (x26187 . Integer) (g26188 . Integer))
  (cons
   'label->live
   (hash
    'block26190
    (set (Reg 'rsp))
    'block26191
    (set (Reg 'rsp))
    'block26192
    (set (Reg 'rsp))
    'block26193
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26188) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'ge 'block26192)
     (Jmp 'block26193))))
  (cons
   'block26190
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26191
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26192
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26187) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'ge 'block26190)
     (Jmp 'block26191))))
  (cons
   'block26193
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26187) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Var 'x26187) (Var 'g26189) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'ge 'block26190)
     (Jmp 'block26191))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_27"

expected-result:
134


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (If
  (Let
   'x
   (If (Prim '> (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '> (list (Var 'x) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


testing @ utilities.rkt:2016
test-name:
"cond_test_28"

expected-result:
134


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (Let
   'x
   (If (Prim '> (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '> (list (Var 'x) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (Let
   'x
   (If (Prim '> (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '> (list (Var 'x) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_28"

expected-result:
134


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (Let
   'x26200
   (If (Prim '> (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '> (list (Var 'x26200) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (Let
   'x26200
   (If (Prim '> (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '> (list (Var 'x26200) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_28"

expected-result:
134


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (Let
   'x26200
   (If (Prim '> (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '> (list (Var 'x26200) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (Let
   'x26200
   (If (Prim '> (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '> (list (Var 'x26200) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_28"

expected-result:
134


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (Let
   'x26200
   (If
    (Let 'g26201 (Prim 'read '()) (Prim '> (list (Var 'g26201) (Int 10))))
    (Int 32)
    (Int 12))
   (Let
    'g26202
    (Prim '+ (list (Int 5) (Int 6)))
    (Prim '> (list (Var 'x26200) (Var 'g26202)))))
  (Int 134)
  (Int 34)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (Let
   'x26200
   (If
    (Let 'g26201 (Prim 'read '()) (Prim '> (list (Var 'g26201) (Int 10))))
    (Int 32)
    (Int 12))
   (Let
    'g26202
    (Prim '+ (list (Int 5) (Int 6)))
    (Prim '> (list (Var 'x26200) (Var 'g26202)))))
  (Int 134)
  (Int 34)))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_28"

expected-result:
134


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'block26205
   (Seq
    (Assign (Var 'x26200) (Int 32))
    (Seq
     (Assign (Var 'g26202) (Prim '+ (list (Int 5) (Int 6))))
     (IfStmt
      (Prim '> (list (Var 'x26200) (Var 'g26202)))
      (Goto 'block26203)
      (Goto 'block26204)))))
  (cons
   'start
   (Seq
    (Assign (Var 'g26201) (Prim 'read '()))
    (IfStmt
     (Prim '> (list (Var 'g26201) (Int 10)))
     (Goto 'block26205)
     (Goto 'block26206))))
  (cons
   'block26206
   (Seq
    (Assign (Var 'x26200) (Int 12))
    (Seq
     (Assign (Var 'g26202) (Prim '+ (list (Int 5) (Int 6))))
     (IfStmt
      (Prim '> (list (Var 'x26200) (Var 'g26202)))
      (Goto 'block26203)
      (Goto 'block26204)))))
  (cons 'block26203 (Return (Int 134)))
  (cons 'block26204 (Return (Int 34)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types (x26200 . Integer) (g26201 . Integer) (g26202 . Integer)))
 (list
  (cons
   'block26205
   (Seq
    (Assign (Var 'x26200) (Int 32))
    (Seq
     (Assign (Var 'g26202) (Prim '+ (list (Int 5) (Int 6))))
     (IfStmt
      (Prim '> (list (Var 'x26200) (Var 'g26202)))
      (Goto 'block26203)
      (Goto 'block26204)))))
  (cons
   'start
   (Seq
    (Assign (Var 'g26201) (Prim 'read '()))
    (IfStmt
     (Prim '> (list (Var 'g26201) (Int 10)))
     (Goto 'block26205)
     (Goto 'block26206))))
  (cons
   'block26206
   (Seq
    (Assign (Var 'x26200) (Int 12))
    (Seq
     (Assign (Var 'g26202) (Prim '+ (list (Int 5) (Int 6))))
     (IfStmt
      (Prim '> (list (Var 'x26200) (Var 'g26202)))
      (Goto 'block26203)
      (Goto 'block26204)))))
  (cons 'block26203 (Return (Int 134)))
  (cons 'block26204 (Return (Int 34)))))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_28"

expected-result:
134


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types (x26200 . Integer) (g26201 . Integer) (g26202 . Integer)))
 (list
  (cons
   'block26205
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26200)))
     (Instr 'movq (list (Imm 5) (Var 'g26202)))
     (Instr 'addq (list (Imm 6) (Var 'g26202)))
     (Instr 'cmpq (list (Var 'g26202) (Var 'x26200)))
     (JmpIf 'g 'block26203)
     (Jmp 'block26204))))
  (cons
   'start
   (Block
    '()
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26201)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26201)))
     (JmpIf 'g 'block26205)
     (Jmp 'block26206))))
  (cons
   'block26206
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26200)))
     (Instr 'movq (list (Imm 5) (Var 'g26202)))
     (Instr 'addq (list (Imm 6) (Var 'g26202)))
     (Instr 'cmpq (list (Var 'g26202) (Var 'x26200)))
     (JmpIf 'g 'block26203)
     (Jmp 'block26204))))
  (cons
   'block26203
   (Block
    '()
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26204
   (Block
    '()
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types (x26200 . Integer) (g26201 . Integer) (g26202 . Integer)))
 (list
  (cons
   'block26205
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26200)))
     (Instr 'movq (list (Imm 5) (Var 'g26202)))
     (Instr 'addq (list (Imm 6) (Var 'g26202)))
     (Instr 'cmpq (list (Var 'g26202) (Var 'x26200)))
     (JmpIf 'g 'block26203)
     (Jmp 'block26204))))
  (cons
   'start
   (Block
    '()
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26201)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26201)))
     (JmpIf 'g 'block26205)
     (Jmp 'block26206))))
  (cons
   'block26206
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26200)))
     (Instr 'movq (list (Imm 5) (Var 'g26202)))
     (Instr 'addq (list (Imm 6) (Var 'g26202)))
     (Instr 'cmpq (list (Var 'g26202) (Var 'x26200)))
     (JmpIf 'g 'block26203)
     (Jmp 'block26204))))
  (cons
   'block26203
   (Block
    '()
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26204
   (Block
    '()
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_28"

expected-result:
134


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26200 . Integer) (g26201 . Integer) (g26202 . Integer))
  (cons
   'label->live
   (hash
    'block26203
    (set (Reg 'rsp))
    'block26204
    (set (Reg 'rsp))
    'block26205
    (set (Reg 'rsp))
    'block26206
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi)))))
 (list
  (cons
   'block26205
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26200)))
     (Instr 'movq (list (Imm 5) (Var 'g26202)))
     (Instr 'addq (list (Imm 6) (Var 'g26202)))
     (Instr 'cmpq (list (Var 'g26202) (Var 'x26200)))
     (JmpIf 'g 'block26203)
     (Jmp 'block26204))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26201) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26201)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26201)))
     (JmpIf 'g 'block26205)
     (Jmp 'block26206))))
  (cons
   'block26206
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26200)))
     (Instr 'movq (list (Imm 5) (Var 'g26202)))
     (Instr 'addq (list (Imm 6) (Var 'g26202)))
     (Instr 'cmpq (list (Var 'g26202) (Var 'x26200)))
     (JmpIf 'g 'block26203)
     (Jmp 'block26204))))
  (cons
   'block26203
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26204
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26200 . Integer) (g26201 . Integer) (g26202 . Integer))
  (cons
   'label->live
   (hash
    'block26203
    (set (Reg 'rsp))
    'block26204
    (set (Reg 'rsp))
    'block26205
    (set (Reg 'rsp))
    'block26206
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi)))))
 (list
  (cons
   'block26205
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26200)))
     (Instr 'movq (list (Imm 5) (Var 'g26202)))
     (Instr 'addq (list (Imm 6) (Var 'g26202)))
     (Instr 'cmpq (list (Var 'g26202) (Var 'x26200)))
     (JmpIf 'g 'block26203)
     (Jmp 'block26204))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26201) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26201)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26201)))
     (JmpIf 'g 'block26205)
     (Jmp 'block26206))))
  (cons
   'block26206
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26200)))
     (Instr 'movq (list (Imm 5) (Var 'g26202)))
     (Instr 'addq (list (Imm 6) (Var 'g26202)))
     (Instr 'cmpq (list (Var 'g26202) (Var 'x26200)))
     (JmpIf 'g 'block26203)
     (Jmp 'block26204))))
  (cons
   'block26203
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26204
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_28"

expected-result:
134


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26200 . Integer) (g26201 . Integer) (g26202 . Integer))
  (cons
   'label->live
   (hash
    'block26203
    (set (Reg 'rsp))
    'block26204
    (set (Reg 'rsp))
    'block26205
    (set (Reg 'rsp))
    'block26206
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'block26205
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26200)))
     (Instr 'movq (list (Imm 5) (Var 'g26202)))
     (Instr 'addq (list (Imm 6) (Var 'g26202)))
     (Instr 'cmpq (list (Var 'g26202) (Var 'x26200)))
     (JmpIf 'g 'block26203)
     (Jmp 'block26204))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26201) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26201)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26201)))
     (JmpIf 'g 'block26205)
     (Jmp 'block26206))))
  (cons
   'block26206
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26200)))
     (Instr 'movq (list (Imm 5) (Var 'g26202)))
     (Instr 'addq (list (Imm 6) (Var 'g26202)))
     (Instr 'cmpq (list (Var 'g26202) (Var 'x26200)))
     (JmpIf 'g 'block26203)
     (Jmp 'block26204))))
  (cons
   'block26203
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26204
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26200 . Integer) (g26201 . Integer) (g26202 . Integer))
  (cons
   'label->live
   (hash
    'block26203
    (set (Reg 'rsp))
    'block26204
    (set (Reg 'rsp))
    'block26205
    (set (Reg 'rsp))
    'block26206
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'block26205
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26200)))
     (Instr 'movq (list (Imm 5) (Var 'g26202)))
     (Instr 'addq (list (Imm 6) (Var 'g26202)))
     (Instr 'cmpq (list (Var 'g26202) (Var 'x26200)))
     (JmpIf 'g 'block26203)
     (Jmp 'block26204))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26201) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26201)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26201)))
     (JmpIf 'g 'block26205)
     (Jmp 'block26206))))
  (cons
   'block26206
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26200)))
     (Instr 'movq (list (Imm 5) (Var 'g26202)))
     (Instr 'addq (list (Imm 6) (Var 'g26202)))
     (Instr 'cmpq (list (Var 'g26202) (Var 'x26200)))
     (JmpIf 'g 'block26203)
     (Jmp 'block26204))))
  (cons
   'block26203
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26204
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_28"

expected-result:
134


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26200 . Integer) (g26201 . Integer) (g26202 . Integer))
  (cons
   'label->live
   (hash
    'block26203
    (set (Reg 'rsp))
    'block26204
    (set (Reg 'rsp))
    'block26205
    (set (Reg 'rsp))
    'block26206
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'block26205
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rbx)))
     (Instr 'movq (list (Imm 5) (Reg 'rcx)))
     (Instr 'addq (list (Imm 6) (Reg 'rcx)))
     (Instr 'cmpq (list (Reg 'rcx) (Reg 'rbx)))
     (JmpIf 'g 'block26203)
     (Jmp 'block26204))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26201) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'g 'block26205)
     (Jmp 'block26206))))
  (cons
   'block26206
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rbx)))
     (Instr 'movq (list (Imm 5) (Reg 'rcx)))
     (Instr 'addq (list (Imm 6) (Reg 'rcx)))
     (Instr 'cmpq (list (Reg 'rcx) (Reg 'rbx)))
     (JmpIf 'g 'block26203)
     (Jmp 'block26204))))
  (cons
   'block26203
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26204
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26200 . Integer) (g26201 . Integer) (g26202 . Integer))
  (cons
   'label->live
   (hash
    'block26203
    (set (Reg 'rsp))
    'block26204
    (set (Reg 'rsp))
    'block26205
    (set (Reg 'rsp))
    'block26206
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'block26205
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rbx)))
     (Instr 'movq (list (Imm 5) (Reg 'rcx)))
     (Instr 'addq (list (Imm 6) (Reg 'rcx)))
     (Instr 'cmpq (list (Reg 'rcx) (Reg 'rbx)))
     (JmpIf 'g 'block26203)
     (Jmp 'block26204))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26201) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'g 'block26205)
     (Jmp 'block26206))))
  (cons
   'block26206
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rbx)))
     (Instr 'movq (list (Imm 5) (Reg 'rcx)))
     (Instr 'addq (list (Imm 6) (Reg 'rcx)))
     (Instr 'cmpq (list (Reg 'rcx) (Reg 'rbx)))
     (JmpIf 'g 'block26203)
     (Jmp 'block26204))))
  (cons
   'block26203
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26204
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_28"

expected-result:
134


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26200 . Integer) (g26201 . Integer) (g26202 . Integer))
  (cons
   'label->live
   (hash
    'block26203
    (set (Reg 'rsp))
    'block26204
    (set (Reg 'rsp))
    'block26205
    (set (Reg 'rsp))
    'block26206
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'block26205
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rbx)))
     (Instr 'movq (list (Imm 5) (Reg 'rcx)))
     (Instr 'addq (list (Imm 6) (Reg 'rcx)))
     (Instr 'cmpq (list (Reg 'rcx) (Reg 'rbx)))
     (JmpIf 'g 'block26203)
     (Jmp 'block26204))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26201) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'g 'block26205)
     (Jmp 'block26206))))
  (cons
   'block26206
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rbx)))
     (Instr 'movq (list (Imm 5) (Reg 'rcx)))
     (Instr 'addq (list (Imm 6) (Reg 'rcx)))
     (Instr 'cmpq (list (Reg 'rcx) (Reg 'rbx)))
     (JmpIf 'g 'block26203)
     (Jmp 'block26204))))
  (cons
   'block26203
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26204
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26200 . Integer) (g26201 . Integer) (g26202 . Integer))
  (cons
   'label->live
   (hash
    'block26203
    (set (Reg 'rsp))
    'block26204
    (set (Reg 'rsp))
    'block26205
    (set (Reg 'rsp))
    'block26206
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'block26205
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rbx)))
     (Instr 'movq (list (Imm 5) (Reg 'rcx)))
     (Instr 'addq (list (Imm 6) (Reg 'rcx)))
     (Instr 'cmpq (list (Reg 'rcx) (Reg 'rbx)))
     (JmpIf 'g 'block26203)
     (Jmp 'block26204))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26201) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'g 'block26205)
     (Jmp 'block26206))))
  (cons
   'block26206
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rbx)))
     (Instr 'movq (list (Imm 5) (Reg 'rcx)))
     (Instr 'addq (list (Imm 6) (Reg 'rcx)))
     (Instr 'cmpq (list (Reg 'rcx) (Reg 'rbx)))
     (JmpIf 'g 'block26203)
     (Jmp 'block26204))))
  (cons
   'block26203
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26204
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_28"

expected-result:
134


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26200 . Integer) (g26201 . Integer) (g26202 . Integer))
  (cons
   'label->live
   (hash
    'block26203
    (set (Reg 'rsp))
    'block26204
    (set (Reg 'rsp))
    'block26205
    (set (Reg 'rsp))
    'block26206
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'block26205
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rbx)))
     (Instr 'movq (list (Imm 5) (Reg 'rcx)))
     (Instr 'addq (list (Imm 6) (Reg 'rcx)))
     (Instr 'cmpq (list (Reg 'rcx) (Reg 'rbx)))
     (JmpIf 'g 'block26203)
     (Jmp 'block26204))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26201) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'g 'block26205)
     (Jmp 'block26206))))
  (cons
   'block26206
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rbx)))
     (Instr 'movq (list (Imm 5) (Reg 'rcx)))
     (Instr 'addq (list (Imm 6) (Reg 'rcx)))
     (Instr 'cmpq (list (Reg 'rcx) (Reg 'rbx)))
     (JmpIf 'g 'block26203)
     (Jmp 'block26204))))
  (cons
   'block26203
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26204
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26200 . Integer) (g26201 . Integer) (g26202 . Integer))
  (cons
   'label->live
   (hash
    'block26203
    (set (Reg 'rsp))
    'block26204
    (set (Reg 'rsp))
    'block26205
    (set (Reg 'rsp))
    'block26206
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'block26205
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rbx)))
     (Instr 'movq (list (Imm 5) (Reg 'rcx)))
     (Instr 'addq (list (Imm 6) (Reg 'rcx)))
     (Instr 'cmpq (list (Reg 'rcx) (Reg 'rbx)))
     (JmpIf 'g 'block26203)
     (Jmp 'block26204))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26201) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'g 'block26205)
     (Jmp 'block26206))))
  (cons
   'block26206
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Var 'g26202) (Reg 'rsp) (Var 'x26200))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rbx)))
     (Instr 'movq (list (Imm 5) (Reg 'rcx)))
     (Instr 'addq (list (Imm 6) (Reg 'rcx)))
     (Instr 'cmpq (list (Reg 'rcx) (Reg 'rbx)))
     (JmpIf 'g 'block26203)
     (Jmp 'block26204))))
  (cons
   'block26203
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26204
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
134


testing @ utilities.rkt:2016
test-name:
"cond_test_28"

expected-result:
134


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (If
  (Let
   'x
   (If (Prim '> (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '< (list (Var 'x) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


testing @ utilities.rkt:2016
test-name:
"cond_test_29"

expected-result:
34


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (Let
   'x
   (If (Prim '> (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '< (list (Var 'x) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (Let
   'x
   (If (Prim '> (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '< (list (Var 'x) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_29"

expected-result:
34


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (Let
   'x26213
   (If (Prim '> (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '< (list (Var 'x26213) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (Let
   'x26213
   (If (Prim '> (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '< (list (Var 'x26213) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_29"

expected-result:
34


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (Let
   'x26213
   (If (Prim '> (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '< (list (Var 'x26213) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (Let
   'x26213
   (If (Prim '> (list (Prim 'read '()) (Int 10))) (Int 32) (Int 12))
   (Prim '< (list (Var 'x26213) (Prim '+ (list (Int 5) (Int 6))))))
  (Int 134)
  (Int 34)))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_29"

expected-result:
34


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (If
  (Let
   'x26213
   (If
    (Let 'g26214 (Prim 'read '()) (Prim '> (list (Var 'g26214) (Int 10))))
    (Int 32)
    (Int 12))
   (Let
    'g26215
    (Prim '+ (list (Int 5) (Int 6)))
    (Prim '< (list (Var 'x26213) (Var 'g26215)))))
  (Int 134)
  (Int 34)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (If
  (Let
   'x26213
   (If
    (Let 'g26214 (Prim 'read '()) (Prim '> (list (Var 'g26214) (Int 10))))
    (Int 32)
    (Int 12))
   (Let
    'g26215
    (Prim '+ (list (Int 5) (Int 6)))
    (Prim '< (list (Var 'x26213) (Var 'g26215)))))
  (Int 134)
  (Int 34)))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_29"

expected-result:
34


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'g26214) (Prim 'read '()))
    (IfStmt
     (Prim '> (list (Var 'g26214) (Int 10)))
     (Goto 'block26218)
     (Goto 'block26219))))
  (cons 'block26216 (Return (Int 134)))
  (cons
   'block26218
   (Seq
    (Assign (Var 'x26213) (Int 32))
    (Seq
     (Assign (Var 'g26215) (Prim '+ (list (Int 5) (Int 6))))
     (IfStmt
      (Prim '< (list (Var 'x26213) (Var 'g26215)))
      (Goto 'block26216)
      (Goto 'block26217)))))
  (cons 'block26217 (Return (Int 34)))
  (cons
   'block26219
   (Seq
    (Assign (Var 'x26213) (Int 12))
    (Seq
     (Assign (Var 'g26215) (Prim '+ (list (Int 5) (Int 6))))
     (IfStmt
      (Prim '< (list (Var 'x26213) (Var 'g26215)))
      (Goto 'block26216)
      (Goto 'block26217)))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types (x26213 . Integer) (g26214 . Integer) (g26215 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'g26214) (Prim 'read '()))
    (IfStmt
     (Prim '> (list (Var 'g26214) (Int 10)))
     (Goto 'block26218)
     (Goto 'block26219))))
  (cons 'block26216 (Return (Int 134)))
  (cons
   'block26218
   (Seq
    (Assign (Var 'x26213) (Int 32))
    (Seq
     (Assign (Var 'g26215) (Prim '+ (list (Int 5) (Int 6))))
     (IfStmt
      (Prim '< (list (Var 'x26213) (Var 'g26215)))
      (Goto 'block26216)
      (Goto 'block26217)))))
  (cons 'block26217 (Return (Int 34)))
  (cons
   'block26219
   (Seq
    (Assign (Var 'x26213) (Int 12))
    (Seq
     (Assign (Var 'g26215) (Prim '+ (list (Int 5) (Int 6))))
     (IfStmt
      (Prim '< (list (Var 'x26213) (Var 'g26215)))
      (Goto 'block26216)
      (Goto 'block26217)))))))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_29"

expected-result:
34


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types (x26213 . Integer) (g26214 . Integer) (g26215 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26214)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26214)))
     (JmpIf 'g 'block26218)
     (Jmp 'block26219))))
  (cons
   'block26216
   (Block
    '()
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26218
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26213)))
     (Instr 'movq (list (Imm 5) (Var 'g26215)))
     (Instr 'addq (list (Imm 6) (Var 'g26215)))
     (Instr 'cmpq (list (Var 'g26215) (Var 'x26213)))
     (JmpIf 'l 'block26216)
     (Jmp 'block26217))))
  (cons
   'block26217
   (Block
    '()
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26219
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26213)))
     (Instr 'movq (list (Imm 5) (Var 'g26215)))
     (Instr 'addq (list (Imm 6) (Var 'g26215)))
     (Instr 'cmpq (list (Var 'g26215) (Var 'x26213)))
     (JmpIf 'l 'block26216)
     (Jmp 'block26217))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types (x26213 . Integer) (g26214 . Integer) (g26215 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26214)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26214)))
     (JmpIf 'g 'block26218)
     (Jmp 'block26219))))
  (cons
   'block26216
   (Block
    '()
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26218
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26213)))
     (Instr 'movq (list (Imm 5) (Var 'g26215)))
     (Instr 'addq (list (Imm 6) (Var 'g26215)))
     (Instr 'cmpq (list (Var 'g26215) (Var 'x26213)))
     (JmpIf 'l 'block26216)
     (Jmp 'block26217))))
  (cons
   'block26217
   (Block
    '()
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26219
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26213)))
     (Instr 'movq (list (Imm 5) (Var 'g26215)))
     (Instr 'addq (list (Imm 6) (Var 'g26215)))
     (Instr 'cmpq (list (Var 'g26215) (Var 'x26213)))
     (JmpIf 'l 'block26216)
     (Jmp 'block26217))))))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_29"

expected-result:
34


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26213 . Integer) (g26214 . Integer) (g26215 . Integer))
  (cons
   'label->live
   (hash
    'block26216
    (set (Reg 'rsp))
    'block26217
    (set (Reg 'rsp))
    'block26218
    (set (Reg 'rsp))
    'block26219
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26214) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26214)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26214)))
     (JmpIf 'g 'block26218)
     (Jmp 'block26219))))
  (cons
   'block26216
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26218
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26213) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26213)))
     (Instr 'movq (list (Imm 5) (Var 'g26215)))
     (Instr 'addq (list (Imm 6) (Var 'g26215)))
     (Instr 'cmpq (list (Var 'g26215) (Var 'x26213)))
     (JmpIf 'l 'block26216)
     (Jmp 'block26217))))
  (cons
   'block26217
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26219
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26213) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26213)))
     (Instr 'movq (list (Imm 5) (Var 'g26215)))
     (Instr 'addq (list (Imm 6) (Var 'g26215)))
     (Instr 'cmpq (list (Var 'g26215) (Var 'x26213)))
     (JmpIf 'l 'block26216)
     (Jmp 'block26217))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26213 . Integer) (g26214 . Integer) (g26215 . Integer))
  (cons
   'label->live
   (hash
    'block26216
    (set (Reg 'rsp))
    'block26217
    (set (Reg 'rsp))
    'block26218
    (set (Reg 'rsp))
    'block26219
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi)))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26214) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26214)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26214)))
     (JmpIf 'g 'block26218)
     (Jmp 'block26219))))
  (cons
   'block26216
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26218
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26213) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26213)))
     (Instr 'movq (list (Imm 5) (Var 'g26215)))
     (Instr 'addq (list (Imm 6) (Var 'g26215)))
     (Instr 'cmpq (list (Var 'g26215) (Var 'x26213)))
     (JmpIf 'l 'block26216)
     (Jmp 'block26217))))
  (cons
   'block26217
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26219
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26213) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26213)))
     (Instr 'movq (list (Imm 5) (Var 'g26215)))
     (Instr 'addq (list (Imm 6) (Var 'g26215)))
     (Instr 'cmpq (list (Var 'g26215) (Var 'x26213)))
     (JmpIf 'l 'block26216)
     (Jmp 'block26217))))))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_29"

expected-result:
34


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26213 . Integer) (g26214 . Integer) (g26215 . Integer))
  (cons
   'label->live
   (hash
    'block26216
    (set (Reg 'rsp))
    'block26217
    (set (Reg 'rsp))
    'block26218
    (set (Reg 'rsp))
    'block26219
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26214) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26214)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26214)))
     (JmpIf 'g 'block26218)
     (Jmp 'block26219))))
  (cons
   'block26216
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26218
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26213) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26213)))
     (Instr 'movq (list (Imm 5) (Var 'g26215)))
     (Instr 'addq (list (Imm 6) (Var 'g26215)))
     (Instr 'cmpq (list (Var 'g26215) (Var 'x26213)))
     (JmpIf 'l 'block26216)
     (Jmp 'block26217))))
  (cons
   'block26217
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26219
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26213) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26213)))
     (Instr 'movq (list (Imm 5) (Var 'g26215)))
     (Instr 'addq (list (Imm 6) (Var 'g26215)))
     (Instr 'cmpq (list (Var 'g26215) (Var 'x26213)))
     (JmpIf 'l 'block26216)
     (Jmp 'block26217))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26213 . Integer) (g26214 . Integer) (g26215 . Integer))
  (cons
   'label->live
   (hash
    'block26216
    (set (Reg 'rsp))
    'block26217
    (set (Reg 'rsp))
    'block26218
    (set (Reg 'rsp))
    'block26219
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26214) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Var 'g26214)))
     (Instr 'cmpq (list (Imm 10) (Var 'g26214)))
     (JmpIf 'g 'block26218)
     (Jmp 'block26219))))
  (cons
   'block26216
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26218
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26213) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Var 'x26213)))
     (Instr 'movq (list (Imm 5) (Var 'g26215)))
     (Instr 'addq (list (Imm 6) (Var 'g26215)))
     (Instr 'cmpq (list (Var 'g26215) (Var 'x26213)))
     (JmpIf 'l 'block26216)
     (Jmp 'block26217))))
  (cons
   'block26217
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26219
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26213) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Var 'x26213)))
     (Instr 'movq (list (Imm 5) (Var 'g26215)))
     (Instr 'addq (list (Imm 6) (Var 'g26215)))
     (Instr 'cmpq (list (Var 'g26215) (Var 'x26213)))
     (JmpIf 'l 'block26216)
     (Jmp 'block26217))))))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_29"

expected-result:
34


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26213 . Integer) (g26214 . Integer) (g26215 . Integer))
  (cons
   'label->live
   (hash
    'block26216
    (set (Reg 'rsp))
    'block26217
    (set (Reg 'rsp))
    'block26218
    (set (Reg 'rsp))
    'block26219
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26214) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'g 'block26218)
     (Jmp 'block26219))))
  (cons
   'block26216
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26218
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26213) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26216)
     (Jmp 'block26217))))
  (cons
   'block26217
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26219
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26213) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26216)
     (Jmp 'block26217))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26213 . Integer) (g26214 . Integer) (g26215 . Integer))
  (cons
   'label->live
   (hash
    'block26216
    (set (Reg 'rsp))
    'block26217
    (set (Reg 'rsp))
    'block26218
    (set (Reg 'rsp))
    'block26219
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26214) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'g 'block26218)
     (Jmp 'block26219))))
  (cons
   'block26216
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26218
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26213) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26216)
     (Jmp 'block26217))))
  (cons
   'block26217
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26219
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26213) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26216)
     (Jmp 'block26217))))))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_29"

expected-result:
34


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26213 . Integer) (g26214 . Integer) (g26215 . Integer))
  (cons
   'label->live
   (hash
    'block26216
    (set (Reg 'rsp))
    'block26217
    (set (Reg 'rsp))
    'block26218
    (set (Reg 'rsp))
    'block26219
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26214) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'g 'block26218)
     (Jmp 'block26219))))
  (cons
   'block26216
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26218
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26213) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26216)
     (Jmp 'block26217))))
  (cons
   'block26217
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26219
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26213) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26216)
     (Jmp 'block26217))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26213 . Integer) (g26214 . Integer) (g26215 . Integer))
  (cons
   'label->live
   (hash
    'block26216
    (set (Reg 'rsp))
    'block26217
    (set (Reg 'rsp))
    'block26218
    (set (Reg 'rsp))
    'block26219
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26214) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'g 'block26218)
     (Jmp 'block26219))))
  (cons
   'block26216
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26218
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26213) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26216)
     (Jmp 'block26217))))
  (cons
   'block26217
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26219
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26213) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26216)
     (Jmp 'block26217))))))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_29"

expected-result:
34


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types (x26213 . Integer) (g26214 . Integer) (g26215 . Integer))
  (cons
   'label->live
   (hash
    'block26216
    (set (Reg 'rsp))
    'block26217
    (set (Reg 'rsp))
    'block26218
    (set (Reg 'rsp))
    'block26219
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26214) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'g 'block26218)
     (Jmp 'block26219))))
  (cons
   'block26216
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26218
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26213) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26216)
     (Jmp 'block26217))))
  (cons
   'block26217
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26219
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26213) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26216)
     (Jmp 'block26217))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types (x26213 . Integer) (g26214 . Integer) (g26215 . Integer))
  (cons
   'label->live
   (hash
    'block26216
    (set (Reg 'rsp))
    'block26217
    (set (Reg 'rsp))
    'block26218
    (set (Reg 'rsp))
    'block26219
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set (Reg 'rdi))))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rdi) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set (Var 'g26214) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Callq 'read_int 1)
     (Instr 'movq (list (Reg 'rax) (Reg 'rbx)))
     (Instr 'cmpq (list (Imm 10) (Reg 'rbx)))
     (JmpIf 'g 'block26218)
     (Jmp 'block26219))))
  (cons
   'block26216
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 134) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26218
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26213) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 32) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26216)
     (Jmp 'block26217))))
  (cons
   'block26217
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 34) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block26219
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'x26213) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Var 'x26213) (Var 'g26215) (Reg 'rsp))
      (set (Reg 'rsp))
      (set (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 12) (Reg 'rcx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Instr 'addq (list (Imm 6) (Reg 'rbx)))
     (Instr 'cmpq (list (Reg 'rbx) (Reg 'rcx)))
     (JmpIf 'l 'block26216)
     (Jmp 'block26217))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
34


testing @ utilities.rkt:2016
test-name:
"cond_test_29"

expected-result:
34


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program '() (If (Bool #t) (Int 42) (Int 0)))


testing @ utilities.rkt:2016
test-name:
"cond_test_3"

expected-result:
42


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (If (Bool #t) (Int 42) (Int 0)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (If (Bool #t) (Int 42) (Int 0)))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_3"

expected-result:
42


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (If (Bool #t) (Int 42) (Int 0)))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (If (Bool #t) (Int 42) (Int 0)))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_3"

expected-result:
42


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (If (Bool #t) (Int 42) (Int 0)))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (If (Bool #t) (Int 42) (Int 0)))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_3"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program '() (If (Bool #t) (Int 42) (Int 0)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program '() (If (Bool #t) (Int 42) (Int 0)))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_3"

expected-result:
42


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list (cons 'start (Goto 'block26226)) (cons 'block26226 (Return (Int 42)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types))
 (list (cons 'start (Goto 'block26226)) (cons 'block26226 (Return (Int 42)))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_3"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types))
 (list
  (cons 'start (Block '() (list (Jmp 'block26226))))
  (cons
   'block26226
   (Block
    '()
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types))
 (list
  (cons 'start (Block '() (list (Jmp 'block26226))))
  (cons
   'block26226
   (Block
    '()
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_3"

expected-result:
42


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26226
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set))))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26226))))
  (cons
   'block26226
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26226
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set))))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26226))))
  (cons
   'block26226
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_3"

expected-result:
42


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26226
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26226))))
  (cons
   'block26226
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26226
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26226))))
  (cons
   'block26226
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_3"

expected-result:
42


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26226
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26226))))
  (cons
   'block26226
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26226
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26226))))
  (cons
   'block26226
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_3"

expected-result:
42


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26226
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26226))))
  (cons
   'block26226
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26226
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26226))))
  (cons
   'block26226
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_3"

expected-result:
42


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26226
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26226))))
  (cons
   'block26226
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types)
  (cons
   'label->live
   (hash
    'block26226
    (set (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 0)
  '(used-callee))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'subq (list (Imm 0) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list (list 'live-after (set (Reg 'rsp)) (set)))
    (list (Jmp 'block26226))))
  (cons
   'block26226
   (Block
    (list
     (list 'live-after (set (Reg 'rsp)) (set (Reg 'rax) (Reg 'rsp)) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 0) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"cond_test_3"

expected-result:
42


type-check: Boolean != Integer
in (Prim '+ (list (Bool #t) (If (Prim '< (list (Int 1) (Int 2))) (Bool #t) (Bool #f))))

type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
#f


type-check: Boolean != Integer
in (Prim '+ (list (Bool #f) (Bool #t)))

type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
#f


type-check: Boolean != Integer
in (Prim '- (list (Bool #t)))

type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
#f


type-check: Boolean != Integer
in (Prim '- (list (Bool #f) (Bool #t)))

type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
#f


type-check: Integer != Boolean
in (Prim 'and (list (Int 42) (Bool #t)))

type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
#f


type-check: Boolean != Integer
in (Prim '+ (list (Int 42) (Bool #f)))

type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
#f


834 success(es) 0 failure(s) 0 error(s) 834 test(s) run
0
type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Let
  'sum
  (Int 0)
  (Let
   'i
   (Int 5)
   (Begin
    (list
     (WhileLoop
      (Prim '> (list (Var 'i) (Int 0)))
      (Begin
       (list (SetBang 'sum (Prim '+ (list (Var 'sum) (Var 'i)))))
       (SetBang 'i (Prim '- (list (Var 'i) (Int 1)))))))
    (Var 'sum)))))


testing @ utilities.rkt:2016
test-name:
"while_test_1"

expected-result:
15


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'sum
  (Int 0)
  (Let
   'i
   (Int 5)
   (Begin
    (list
     (WhileLoop
      (Prim '> (list (Var 'i) (Int 0)))
      (Begin
       (list (SetBang 'sum (Prim '+ (list (Var 'sum) (Var 'i)))))
       (SetBang 'i (Prim '- (list (Var 'i) (Int 1)))))))
    (Var 'sum)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'sum
  (Int 0)
  (Let
   'i
   (Int 5)
   (Begin
    (list
     (WhileLoop
      (Prim '> (list (Var 'i) (Int 0)))
      (Begin
       (list (SetBang 'sum (Prim '+ (list (Var 'sum) (Var 'i)))))
       (SetBang 'i (Prim '- (list (Var 'i) (Int 1)))))))
    (Var 'sum)))))


output:  @ utilities.rkt:2042
result:
15


testing @ utilities.rkt:2016
test-name:
"while_test_1"

expected-result:
15


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'sum26233
  (Int 0)
  (Let
   'i26234
   (Int 5)
   (Begin
    (list
     (WhileLoop
      (Prim '> (list (Var 'i26234) (Int 0)))
      (Begin
       (list
        (SetBang 'sum26233 (Prim '+ (list (Var 'sum26233) (Var 'i26234)))))
       (SetBang 'i26234 (Prim '- (list (Var 'i26234) (Int 1)))))))
    (Var 'sum26233)))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'sum26233
  (Int 0)
  (Let
   'i26234
   (Int 5)
   (Begin
    (list
     (WhileLoop
      (Prim '> (list (Var 'i26234) (Int 0)))
      (Begin
       (list
        (SetBang 'sum26233 (Prim '+ (list (Var 'sum26233) (Var 'i26234)))))
       (SetBang 'i26234 (Prim '- (list (Var 'i26234) (Int 1)))))))
    (Var 'sum26233)))))


output:  @ utilities.rkt:2042
result:
15


testing @ utilities.rkt:2016
test-name:
"while_test_1"

expected-result:
15


running pass: uncover-get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'sum26233
  (Int 0)
  (Let
   'i26234
   (Int 5)
   (Begin
    (list
     (WhileLoop
      (Prim '> (list (GetBang 'i26234) (Int 0)))
      (Begin
       (list
        (SetBang
         'sum26233
         (Prim '+ (list (GetBang 'sum26233) (GetBang 'i26234)))))
       (SetBang 'i26234 (Prim '- (list (GetBang 'i26234) (Int 1)))))))
    (GetBang 'sum26233)))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'sum26233
  (Int 0)
  (Let
   'i26234
   (Int 5)
   (Begin
    (list
     (WhileLoop
      (Prim '> (list (GetBang 'i26234) (Int 0)))
      (Begin
       (list
        (SetBang
         'sum26233
         (Prim '+ (list (GetBang 'sum26233) (GetBang 'i26234)))))
       (SetBang 'i26234 (Prim '- (list (GetBang 'i26234) (Int 1)))))))
    (GetBang 'sum26233)))))


output:  @ utilities.rkt:2042
result:
15


testing @ utilities.rkt:2016
test-name:
"while_test_1"

expected-result:
15


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'sum26233
  (Int 0)
  (Let
   'i26234
   (Int 5)
   (Begin
    (list
     (WhileLoop
      (Let 'g26235 (Var 'i26234) (Prim '> (list (Var 'g26235) (Int 0))))
      (Begin
       (list
        (SetBang
         'sum26233
         (Let
          'g26236
          (Var 'sum26233)
          (Let
           'g26237
           (Var 'i26234)
           (Prim '+ (list (Var 'g26236) (Var 'g26237)))))))
       (SetBang
        'i26234
        (Let 'g26238 (Var 'i26234) (Prim '- (list (Var 'g26238) (Int 1))))))))
    (Var 'sum26233)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'sum26233
  (Int 0)
  (Let
   'i26234
   (Int 5)
   (Begin
    (list
     (WhileLoop
      (Let 'g26235 (Var 'i26234) (Prim '> (list (Var 'g26235) (Int 0))))
      (Begin
       (list
        (SetBang
         'sum26233
         (Let
          'g26236
          (Var 'sum26233)
          (Let
           'g26237
           (Var 'i26234)
           (Prim '+ (list (Var 'g26236) (Var 'g26237)))))))
       (SetBang
        'i26234
        (Let 'g26238 (Var 'i26234) (Prim '- (list (Var 'g26238) (Int 1))))))))
    (Var 'sum26233)))))


output:  @ utilities.rkt:2042
result:
15


testing @ utilities.rkt:2016
test-name:
"while_test_1"

expected-result:
15


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'sum26233) (Int 0))
    (Seq (Assign (Var 'i26234) (Int 5)) (Goto 'loop26239))))
  (cons
   'block26240
   (Seq
    (Assign (Var 'g26236) (Var 'sum26233))
    (Seq
     (Assign (Var 'g26237) (Var 'i26234))
     (Seq
      (Assign (Var 'sum26233) (Prim '+ (list (Var 'g26236) (Var 'g26237))))
      (Seq
       (Assign (Var 'g26238) (Var 'i26234))
       (Seq
        (Assign (Var 'i26234) (Prim '- (list (Var 'g26238) (Int 1))))
        (Goto 'loop26239)))))))
  (cons
   'loop26239
   (Seq
    (Assign (Var 'g26235) (Var 'i26234))
    (IfStmt
     (Prim '> (list (Var 'g26235) (Int 0)))
     (Goto 'block26240)
     (Goto 'block26241))))
  (cons 'block26241 (Return (Var 'sum26233)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types
    (g26238 . Integer)
    (g26237 . Integer)
    (i26234 . Integer)
    (sum26233 . Integer)
    (g26236 . Integer)
    (g26235 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'sum26233) (Int 0))
    (Seq (Assign (Var 'i26234) (Int 5)) (Goto 'loop26239))))
  (cons
   'block26240
   (Seq
    (Assign (Var 'g26236) (Var 'sum26233))
    (Seq
     (Assign (Var 'g26237) (Var 'i26234))
     (Seq
      (Assign (Var 'sum26233) (Prim '+ (list (Var 'g26236) (Var 'g26237))))
      (Seq
       (Assign (Var 'g26238) (Var 'i26234))
       (Seq
        (Assign (Var 'i26234) (Prim '- (list (Var 'g26238) (Int 1))))
        (Goto 'loop26239)))))))
  (cons
   'loop26239
   (Seq
    (Assign (Var 'g26235) (Var 'i26234))
    (IfStmt
     (Prim '> (list (Var 'g26235) (Int 0)))
     (Goto 'block26240)
     (Goto 'block26241))))
  (cons 'block26241 (Return (Var 'sum26233)))))


output:  @ utilities.rkt:2042
result:
15


testing @ utilities.rkt:2016
test-name:
"while_test_1"

expected-result:
15


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (g26238 . Integer)
    (g26237 . Integer)
    (i26234 . Integer)
    (sum26233 . Integer)
    (g26236 . Integer)
    (g26235 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 0) (Var 'sum26233)))
     (Instr 'movq (list (Imm 5) (Var 'i26234)))
     (Jmp 'loop26239))))
  (cons
   'block26240
   (Block
    '()
    (list
     (Instr 'movq (list (Var 'sum26233) (Var 'g26236)))
     (Instr 'movq (list (Var 'i26234) (Var 'g26237)))
     (Instr 'movq (list (Var 'g26236) (Var 'sum26233)))
     (Instr 'addq (list (Var 'g26237) (Var 'sum26233)))
     (Instr 'movq (list (Var 'i26234) (Var 'g26238)))
     (Instr 'movq (list (Var 'g26238) (Var 'i26234)))
     (Instr 'subq (list (Imm 1) (Var 'i26234)))
     (Jmp 'loop26239))))
  (cons
   'loop26239
   (Block
    '()
    (list
     (Instr 'movq (list (Var 'i26234) (Var 'g26235)))
     (Instr 'cmpq (list (Imm 0) (Var 'g26235)))
     (JmpIf 'g 'block26240)
     (Jmp 'block26241))))
  (cons
   'block26241
   (Block
    '()
    (list (Instr 'movq (list (Var 'sum26233) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (g26238 . Integer)
    (g26237 . Integer)
    (i26234 . Integer)
    (sum26233 . Integer)
    (g26236 . Integer)
    (g26235 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 0) (Var 'sum26233)))
     (Instr 'movq (list (Imm 5) (Var 'i26234)))
     (Jmp 'loop26239))))
  (cons
   'block26240
   (Block
    '()
    (list
     (Instr 'movq (list (Var 'sum26233) (Var 'g26236)))
     (Instr 'movq (list (Var 'i26234) (Var 'g26237)))
     (Instr 'movq (list (Var 'g26236) (Var 'sum26233)))
     (Instr 'addq (list (Var 'g26237) (Var 'sum26233)))
     (Instr 'movq (list (Var 'i26234) (Var 'g26238)))
     (Instr 'movq (list (Var 'g26238) (Var 'i26234)))
     (Instr 'subq (list (Imm 1) (Var 'i26234)))
     (Jmp 'loop26239))))
  (cons
   'loop26239
   (Block
    '()
    (list
     (Instr 'movq (list (Var 'i26234) (Var 'g26235)))
     (Instr 'cmpq (list (Imm 0) (Var 'g26235)))
     (JmpIf 'g 'block26240)
     (Jmp 'block26241))))
  (cons
   'block26241
   (Block
    '()
    (list (Instr 'movq (list (Var 'sum26233) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
15


testing @ utilities.rkt:2016
test-name:
"while_test_1"

expected-result:
15


running pass: uncover live @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g26238 . Integer)
    (g26237 . Integer)
    (i26234 . Integer)
    (sum26233 . Integer)
    (g26236 . Integer)
    (g26235 . Integer))
  (cons
   'label->live
   (hash
    'block26240
    (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
    'block26241
    (set (Var 'sum26233) (Reg 'rsp))
    'loop26239
    (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'sum26233) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Var 'sum26233)))
     (Instr 'movq (list (Imm 5) (Var 'i26234)))
     (Jmp 'loop26239))))
  (cons
   'block26240
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'i26234) (Var 'g26236) (Reg 'rsp))
      (set (Var 'i26234) (Var 'g26236) (Var 'g26237) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Var 'g26237) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'g26238) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Var 'sum26233) (Var 'g26236)))
     (Instr 'movq (list (Var 'i26234) (Var 'g26237)))
     (Instr 'movq (list (Var 'g26236) (Var 'sum26233)))
     (Instr 'addq (list (Var 'g26237) (Var 'sum26233)))
     (Instr 'movq (list (Var 'i26234) (Var 'g26238)))
     (Instr 'movq (list (Var 'g26238) (Var 'i26234)))
     (Instr 'subq (list (Imm 1) (Var 'i26234)))
     (Jmp 'loop26239))))
  (cons
   'loop26239
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Var 'g26235) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Var 'i26234) (Var 'g26235)))
     (Instr 'cmpq (list (Imm 0) (Var 'g26235)))
     (JmpIf 'g 'block26240)
     (Jmp 'block26241))))
  (cons
   'block26241
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list (Instr 'movq (list (Var 'sum26233) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g26238 . Integer)
    (g26237 . Integer)
    (i26234 . Integer)
    (sum26233 . Integer)
    (g26236 . Integer)
    (g26235 . Integer))
  (cons
   'label->live
   (hash
    'block26240
    (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
    'block26241
    (set (Var 'sum26233) (Reg 'rsp))
    'loop26239
    (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set))))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'sum26233) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Var 'sum26233)))
     (Instr 'movq (list (Imm 5) (Var 'i26234)))
     (Jmp 'loop26239))))
  (cons
   'block26240
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'i26234) (Var 'g26236) (Reg 'rsp))
      (set (Var 'i26234) (Var 'g26236) (Var 'g26237) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Var 'g26237) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'g26238) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Var 'sum26233) (Var 'g26236)))
     (Instr 'movq (list (Var 'i26234) (Var 'g26237)))
     (Instr 'movq (list (Var 'g26236) (Var 'sum26233)))
     (Instr 'addq (list (Var 'g26237) (Var 'sum26233)))
     (Instr 'movq (list (Var 'i26234) (Var 'g26238)))
     (Instr 'movq (list (Var 'g26238) (Var 'i26234)))
     (Instr 'subq (list (Imm 1) (Var 'i26234)))
     (Jmp 'loop26239))))
  (cons
   'loop26239
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Var 'g26235) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Var 'i26234) (Var 'g26235)))
     (Instr 'cmpq (list (Imm 0) (Var 'g26235)))
     (JmpIf 'g 'block26240)
     (Jmp 'block26241))))
  (cons
   'block26241
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list (Instr 'movq (list (Var 'sum26233) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
15


testing @ utilities.rkt:2016
test-name:
"while_test_1"

expected-result:
15


running pass: build interference @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g26238 . Integer)
    (g26237 . Integer)
    (i26234 . Integer)
    (sum26233 . Integer)
    (g26236 . Integer)
    (g26235 . Integer))
  (cons
   'label->live
   (hash
    'block26240
    (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
    'block26241
    (set (Var 'sum26233) (Reg 'rsp))
    'loop26239
    (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'sum26233) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Var 'sum26233)))
     (Instr 'movq (list (Imm 5) (Var 'i26234)))
     (Jmp 'loop26239))))
  (cons
   'block26240
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'i26234) (Var 'g26236) (Reg 'rsp))
      (set (Var 'i26234) (Var 'g26236) (Var 'g26237) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Var 'g26237) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'g26238) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Var 'sum26233) (Var 'g26236)))
     (Instr 'movq (list (Var 'i26234) (Var 'g26237)))
     (Instr 'movq (list (Var 'g26236) (Var 'sum26233)))
     (Instr 'addq (list (Var 'g26237) (Var 'sum26233)))
     (Instr 'movq (list (Var 'i26234) (Var 'g26238)))
     (Instr 'movq (list (Var 'g26238) (Var 'i26234)))
     (Instr 'subq (list (Imm 1) (Var 'i26234)))
     (Jmp 'loop26239))))
  (cons
   'loop26239
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Var 'g26235) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Var 'i26234) (Var 'g26235)))
     (Instr 'cmpq (list (Imm 0) (Var 'g26235)))
     (JmpIf 'g 'block26240)
     (Jmp 'block26241))))
  (cons
   'block26241
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list (Instr 'movq (list (Var 'sum26233) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g26238 . Integer)
    (g26237 . Integer)
    (i26234 . Integer)
    (sum26233 . Integer)
    (g26236 . Integer)
    (g26235 . Integer))
  (cons
   'label->live
   (hash
    'block26240
    (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
    'block26241
    (set (Var 'sum26233) (Reg 'rsp))
    'loop26239
    (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'sum26233) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Var 'sum26233)))
     (Instr 'movq (list (Imm 5) (Var 'i26234)))
     (Jmp 'loop26239))))
  (cons
   'block26240
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'i26234) (Var 'g26236) (Reg 'rsp))
      (set (Var 'i26234) (Var 'g26236) (Var 'g26237) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Var 'g26237) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'g26238) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Var 'sum26233) (Var 'g26236)))
     (Instr 'movq (list (Var 'i26234) (Var 'g26237)))
     (Instr 'movq (list (Var 'g26236) (Var 'sum26233)))
     (Instr 'addq (list (Var 'g26237) (Var 'sum26233)))
     (Instr 'movq (list (Var 'i26234) (Var 'g26238)))
     (Instr 'movq (list (Var 'g26238) (Var 'i26234)))
     (Instr 'subq (list (Imm 1) (Var 'i26234)))
     (Jmp 'loop26239))))
  (cons
   'loop26239
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Var 'g26235) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Var 'i26234) (Var 'g26235)))
     (Instr 'cmpq (list (Imm 0) (Var 'g26235)))
     (JmpIf 'g 'block26240)
     (Jmp 'block26241))))
  (cons
   'block26241
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list (Instr 'movq (list (Var 'sum26233) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
15


testing @ utilities.rkt:2016
test-name:
"while_test_1"

expected-result:
15


running pass: allocate registers @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g26238 . Integer)
    (g26237 . Integer)
    (i26234 . Integer)
    (sum26233 . Integer)
    (g26236 . Integer)
    (g26235 . Integer))
  (cons
   'label->live
   (hash
    'block26240
    (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
    'block26241
    (set (Var 'sum26233) (Reg 'rsp))
    'loop26239
    (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'sum26233) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Reg 'rdx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Jmp 'loop26239))))
  (cons
   'block26240
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'i26234) (Var 'g26236) (Reg 'rsp))
      (set (Var 'i26234) (Var 'g26236) (Var 'g26237) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Var 'g26237) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'g26238) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'subq (list (Imm 1) (Reg 'rbx)))
     (Jmp 'loop26239))))
  (cons
   'loop26239
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Var 'g26235) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'cmpq (list (Imm 0) (Reg 'rcx)))
     (JmpIf 'g 'block26240)
     (Jmp 'block26241))))
  (cons
   'block26241
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list (Instr 'movq (list (Reg 'rdx) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g26238 . Integer)
    (g26237 . Integer)
    (i26234 . Integer)
    (sum26233 . Integer)
    (g26236 . Integer)
    (g26235 . Integer))
  (cons
   'label->live
   (hash
    'block26240
    (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
    'block26241
    (set (Var 'sum26233) (Reg 'rsp))
    'loop26239
    (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'sum26233) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Reg 'rdx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Jmp 'loop26239))))
  (cons
   'block26240
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'i26234) (Var 'g26236) (Reg 'rsp))
      (set (Var 'i26234) (Var 'g26236) (Var 'g26237) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Var 'g26237) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'g26238) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rdx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'movq (list (Reg 'rbx) (Reg 'rbx)))
     (Instr 'subq (list (Imm 1) (Reg 'rbx)))
     (Jmp 'loop26239))))
  (cons
   'loop26239
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Var 'g26235) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'cmpq (list (Imm 0) (Reg 'rcx)))
     (JmpIf 'g 'block26240)
     (Jmp 'block26241))))
  (cons
   'block26241
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list (Instr 'movq (list (Reg 'rdx) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
15


testing @ utilities.rkt:2016
test-name:
"while_test_1"

expected-result:
15


running pass: patch instructions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g26238 . Integer)
    (g26237 . Integer)
    (i26234 . Integer)
    (sum26233 . Integer)
    (g26236 . Integer)
    (g26235 . Integer))
  (cons
   'label->live
   (hash
    'block26240
    (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
    'block26241
    (set (Var 'sum26233) (Reg 'rsp))
    'loop26239
    (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'sum26233) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Reg 'rdx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Jmp 'loop26239))))
  (cons
   'block26240
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'i26234) (Var 'g26236) (Reg 'rsp))
      (set (Var 'i26234) (Var 'g26236) (Var 'g26237) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Var 'g26237) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'g26238) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rdx)))
     (Instr 'subq (list (Imm 1) (Reg 'rbx)))
     (Jmp 'loop26239))))
  (cons
   'loop26239
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Var 'g26235) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'cmpq (list (Imm 0) (Reg 'rcx)))
     (JmpIf 'g 'block26240)
     (Jmp 'block26241))))
  (cons
   'block26241
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list (Instr 'movq (list (Reg 'rdx) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g26238 . Integer)
    (g26237 . Integer)
    (i26234 . Integer)
    (sum26233 . Integer)
    (g26236 . Integer)
    (g26235 . Integer))
  (cons
   'label->live
   (hash
    'block26240
    (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
    'block26241
    (set (Var 'sum26233) (Reg 'rsp))
    'loop26239
    (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'sum26233) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Reg 'rdx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Jmp 'loop26239))))
  (cons
   'block26240
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'i26234) (Var 'g26236) (Reg 'rsp))
      (set (Var 'i26234) (Var 'g26236) (Var 'g26237) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Var 'g26237) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'g26238) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rdx)))
     (Instr 'subq (list (Imm 1) (Reg 'rbx)))
     (Jmp 'loop26239))))
  (cons
   'loop26239
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Var 'g26235) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'cmpq (list (Imm 0) (Reg 'rcx)))
     (JmpIf 'g 'block26240)
     (Jmp 'block26241))))
  (cons
   'block26241
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list (Instr 'movq (list (Reg 'rdx) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
15


testing @ utilities.rkt:2016
test-name:
"while_test_1"

expected-result:
15


running pass: prelude-and-conclusion @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 (list
  '(locals-types
    (g26238 . Integer)
    (g26237 . Integer)
    (i26234 . Integer)
    (sum26233 . Integer)
    (g26236 . Integer)
    (g26235 . Integer))
  (cons
   'label->live
   (hash
    'block26240
    (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
    'block26241
    (set (Var 'sum26233) (Reg 'rsp))
    'loop26239
    (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'sum26233) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Reg 'rdx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Jmp 'loop26239))))
  (cons
   'block26240
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'i26234) (Var 'g26236) (Reg 'rsp))
      (set (Var 'i26234) (Var 'g26236) (Var 'g26237) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Var 'g26237) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'g26238) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rdx)))
     (Instr 'subq (list (Imm 1) (Reg 'rbx)))
     (Jmp 'loop26239))))
  (cons
   'loop26239
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Var 'g26235) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'cmpq (list (Imm 0) (Reg 'rcx)))
     (JmpIf 'g 'block26240)
     (Jmp 'block26241))))
  (cons
   'block26241
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list (Instr 'movq (list (Reg 'rdx) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 (list
  '(locals-types
    (g26238 . Integer)
    (g26237 . Integer)
    (i26234 . Integer)
    (sum26233 . Integer)
    (g26236 . Integer)
    (g26235 . Integer))
  (cons
   'label->live
   (hash
    'block26240
    (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
    'block26241
    (set (Var 'sum26233) (Reg 'rsp))
    'loop26239
    (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
    'conclusion
    (set (Reg 'rax) (Reg 'rsp))
    'start
    (set)))
  '(conflicts . #<unweighted-graph>)
  '(stack-space . 8)
  (list 'used-callee (Reg 'rbx) (Reg 'rbx) (Reg 'rbx)))
 (list
  (cons
   'main
   (Block
    '()
    (list
     (Instr 'pushq (list (Reg 'rbp)))
     (Instr 'movq (list (Reg 'rsp) (Reg 'rbp)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'pushq (list (Reg 'rbx)))
     (Instr 'subq (list (Imm 8) (Reg 'rsp)))
     (Jmp 'start))))
  (cons
   'start
   (Block
    (list
     (list
      'live-after
      (set (Reg 'rsp))
      (set (Var 'sum26233) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Imm 0) (Reg 'rdx)))
     (Instr 'movq (list (Imm 5) (Reg 'rbx)))
     (Jmp 'loop26239))))
  (cons
   'block26240
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'i26234) (Var 'g26236) (Reg 'rsp))
      (set (Var 'i26234) (Var 'g26236) (Var 'g26237) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Var 'g26237) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'g26238) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Reg 'rdx) (Reg 'rcx)))
     (Instr 'movq (list (Reg 'rcx) (Reg 'rdx)))
     (Instr 'addq (list (Reg 'rbx) (Reg 'rdx)))
     (Instr 'subq (list (Imm 1) (Reg 'rbx)))
     (Jmp 'loop26239))))
  (cons
   'loop26239
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Var 'g26235) (Reg 'rsp))
      (set (Var 'sum26233) (Var 'i26234) (Reg 'rsp))
      (set (Var 'sum26233) (Reg 'rsp))
      (set)))
    (list
     (Instr 'movq (list (Reg 'rbx) (Reg 'rcx)))
     (Instr 'cmpq (list (Imm 0) (Reg 'rcx)))
     (JmpIf 'g 'block26240)
     (Jmp 'block26241))))
  (cons
   'block26241
   (Block
    (list
     (list
      'live-after
      (set (Var 'sum26233) (Reg 'rsp))
      (set (Reg 'rax) (Reg 'rsp))
      (set)))
    (list (Instr 'movq (list (Reg 'rdx) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'conclusion
   (Block
    '()
    (list
     (Instr 'addq (list (Imm 8) (Reg 'rsp)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbx)))
     (Instr 'popq (list (Reg 'rbp)))
     (Retq))))))


output:  @ utilities.rkt:2042
result:
15


testing @ utilities.rkt:2016
test-name:
"while_test_1"

expected-result:
15


dict-ref: no value for key: 'Void in: '()

type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
#f


encountered exception while testing 'while`, case while_test_2
